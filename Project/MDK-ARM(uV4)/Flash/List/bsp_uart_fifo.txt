; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;95     */
;;;96     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;97     {
;;;98     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;99     	{
;;;100    		#if UART1_FIFO_EN == 1
;;;101    			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;102    		#else
;;;103    			return 0;
;;;104    		#endif
;;;105    	}
;;;106    	else if (_ucPort == COM2)
;;;107    	{
;;;108    		#if UART2_FIFO_EN == 1
;;;109    			return &g_tUart2;
;;;110    		#else
;;;111    			return 0;
;;;112    		#endif
;;;113    	}
;;;114    	else if (_ucPort == COM3)
;;;115    	{
;;;116    		#if UART3_FIFO_EN == 1
;;;117    			return &g_tUart3;
;;;118    		#else
;;;119    			return 0;
;;;120    		#endif
;;;121    	}
;;;122    	else if (_ucPort == COM4)
;;;123    	{
;;;124    		#if UART4_FIFO_EN == 1
;;;125    			return &g_tUart4;
;;;126    		#else
;;;127    			return 0;
;;;128    		#endif
;;;129    	}
;;;130    	else if (_ucPort == COM5)
;;;131    	{
;;;132    		#if UART5_FIFO_EN == 1
;;;133    			return &g_tUart5;
;;;134    		#else
;;;135    			return 0;
;;;136    		#endif
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		/* 不做任何处理 */
;;;141    		return 0;
;;;142    	}
;;;143    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;106
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;114
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;122
00001a  d101              BNE      |L1.32|
00001c  4806              LDR      r0,|L1.56|
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;130
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;135
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;141
00002a  e7ec              B        |L1.6|
;;;144    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2
                  |L1.52|
                          DCD      g_tUart3
                  |L1.56|
                          DCD      g_tUart4

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;775    */
;;;776    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;777    {
;;;778    	NVIC_InitTypeDef NVIC_InitStructure;
;;;779    
;;;780    	/* Configure the NVIC Preemption Priority Bits */
;;;781    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;782    
;;;783    #if UART1_FIFO_EN == 1
;;;784    	/* 使能串口1中断 */
;;;785    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;786    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;787    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;788    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;789    	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;790    #endif
;;;791    
;;;792    #if UART2_FIFO_EN == 1
;;;793    	/* 使能串口2中断 */
;;;794    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000020  2026              MOVS     r0,#0x26
000022  f88d0000          STRB     r0,[sp,#0]
;;;795    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000026  2001              MOVS     r0,#1
000028  f88d0001          STRB     r0,[sp,#1]
;;;796    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00002c  2000              MOVS     r0,#0
00002e  f88d0002          STRB     r0,[sp,#2]
;;;797    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000032  2001              MOVS     r0,#1
000034  f88d0003          STRB     r0,[sp,#3]
;;;798    	NVIC_Init(&NVIC_InitStructure);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       NVIC_Init
;;;799    #endif
;;;800    
;;;801    #if UART3_FIFO_EN == 1
;;;802    	/* 使能串口3中断t */
;;;803    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
00003e  2027              MOVS     r0,#0x27
000040  f88d0000          STRB     r0,[sp,#0]
;;;804    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000044  2001              MOVS     r0,#1
000046  f88d0001          STRB     r0,[sp,#1]
;;;805    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004a  2000              MOVS     r0,#0
00004c  f88d0002          STRB     r0,[sp,#2]
;;;806    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000050  2001              MOVS     r0,#1
000052  f88d0003          STRB     r0,[sp,#3]
;;;807    	NVIC_Init(&NVIC_InitStructure);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       NVIC_Init
;;;808    #endif
;;;809    
;;;810    #if UART4_FIFO_EN == 1
;;;811    	/* 使能串口4中断t */
;;;812    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
00005c  2034              MOVS     r0,#0x34
00005e  f88d0000          STRB     r0,[sp,#0]
;;;813    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000062  2001              MOVS     r0,#1
000064  f88d0001          STRB     r0,[sp,#1]
;;;814    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000068  2000              MOVS     r0,#0
00006a  f88d0002          STRB     r0,[sp,#2]
;;;815    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00006e  2001              MOVS     r0,#1
000070  f88d0003          STRB     r0,[sp,#3]
;;;816    	NVIC_Init(&NVIC_InitStructure);
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       NVIC_Init
;;;817    #endif
;;;818    
;;;819    #if UART5_FIFO_EN == 1
;;;820    	/* 使能串口5中断t */
;;;821    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;822    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;823    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;824    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;825    	NVIC_Init(&NVIC_InitStructure);
;;;826    #endif
;;;827    
;;;828    #if UART6_FIFO_EN == 1
;;;829    	/* 使能串口6中断t */
;;;830    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;831    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;832    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;833    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;834    	NVIC_Init(&NVIC_InitStructure);
;;;835    #endif
;;;836    }
00007a  bd08              POP      {r3,pc}
;;;837    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;535    */
;;;536    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;537    {
000002  b085              SUB      sp,sp,#0x14
;;;538    	GPIO_InitTypeDef GPIO_InitStructure;
;;;539    	USART_InitTypeDef USART_InitStructure;
;;;540    
;;;541    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;542    
;;;543    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;544    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;545    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;546    
;;;547    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;548    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;549    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;550    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;551    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4887              LDR      r0,|L3.584|
00002c  f7fffffe          BL       GPIO_Init
;;;552    
;;;553    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;554    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;555    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;556    	*/
;;;557    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;558    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;559    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4881              LDR      r0,|L3.584|
000042  f7fffffe          BL       GPIO_Init
;;;560    	
;;;561    	/* 第4步： 配置串口硬件参数 */
;;;562    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;563    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;564    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;565    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;566    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;567    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;568    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  4879              LDR      r0,|L3.588|
000068  f7fffffe          BL       USART_Init
;;;569    
;;;570    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4876              LDR      r0,|L3.588|
000074  f7fffffe          BL       USART_ITConfig
;;;571    	/*
;;;572    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;573    		注意: 不要在此处打开发送中断
;;;574    		发送中断使能在SendUart()函数打开
;;;575    	*/
;;;576    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  4874              LDR      r0,|L3.588|
00007c  f7fffffe          BL       USART_Cmd
;;;577    
;;;578    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;579    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;580    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4872              LDR      r0,|L3.588|
000084  f7fffffe          BL       USART_ClearFlag
;;;581    #endif
;;;582    
;;;583    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;584    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;585    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;586    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;587    
;;;588    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;589    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000098  2004              MOVS     r0,#4
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;590    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;591    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;592    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4866              LDR      r0,|L3.584|
0000ae  f7fffffe          BL       GPIO_Init
;;;593    
;;;594    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;595    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;596    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;597    	*/
;;;598    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000b2  2008              MOVS     r0,#8
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;599    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;600    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4861              LDR      r0,|L3.584|
0000c2  f7fffffe          BL       GPIO_Init
;;;601    	/*  第3步已经做了，因此这步可以不做
;;;602    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;603    	*/
;;;604    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  485f              LDR      r0,|L3.584|
0000ca  f7fffffe          BL       GPIO_Init
;;;605    
;;;606    	/* 第4步： 配置串口硬件参数 */
;;;607    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f30e1          MOV      r0,#0x1c200
0000d2  9000              STR      r0,[sp,#0]
;;;608    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;609    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;610    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;611    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000e2  f8ad000c          STRH     r0,[sp,#0xc]
;;;612    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000e6  200c              MOVS     r0,#0xc
0000e8  f8ad000a          STRH     r0,[sp,#0xa]
;;;613    	USART_Init(USART2, &USART_InitStructure);
0000ec  4669              MOV      r1,sp
0000ee  4858              LDR      r0,|L3.592|
0000f0  f7fffffe          BL       USART_Init
;;;614    
;;;615    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f4  2201              MOVS     r2,#1
0000f6  f2405125          MOV      r1,#0x525
0000fa  4855              LDR      r0,|L3.592|
0000fc  f7fffffe          BL       USART_ITConfig
;;;616    	/*
;;;617    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;618    		注意: 不要在此处打开发送中断
;;;619    		发送中断使能在SendUart()函数打开
;;;620    	*/
;;;621    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000100  2101              MOVS     r1,#1
000102  4853              LDR      r0,|L3.592|
000104  f7fffffe          BL       USART_Cmd
;;;622    
;;;623    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;624    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;625    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000108  2140              MOVS     r1,#0x40
00010a  4851              LDR      r0,|L3.592|
00010c  f7fffffe          BL       USART_ClearFlag
;;;626    #endif
;;;627    
;;;628    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;629    
;;;630    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;631    	{
;;;632    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000110  2101              MOVS     r1,#1
000112  2008              MOVS     r0,#8
000114  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;633    
;;;634    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000118  2010              MOVS     r0,#0x10
00011a  f88d0013          STRB     r0,[sp,#0x13]
;;;635    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00011e  2003              MOVS     r0,#3
000120  f88d0012          STRB     r0,[sp,#0x12]
;;;636    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000124  2004              MOVS     r0,#4
000126  f8ad0010          STRH     r0,[sp,#0x10]
;;;637    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00012a  a904              ADD      r1,sp,#0x10
00012c  4849              LDR      r0,|L3.596|
00012e  f7fffffe          BL       GPIO_Init
;;;638    	}
;;;639    
;;;640    	/* 第1步： 开启GPIO和UART时钟 */
;;;641    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
000132  2101              MOVS     r1,#1
000134  2009              MOVS     r0,#9
000136  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;642    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00013a  2101              MOVS     r1,#1
00013c  0488              LSLS     r0,r1,#18
00013e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;643    
;;;644    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;645    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000142  f44f6080          MOV      r0,#0x400
000146  f8ad0010          STRH     r0,[sp,#0x10]
;;;646    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00014a  2018              MOVS     r0,#0x18
00014c  f88d0013          STRB     r0,[sp,#0x13]
;;;647    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000150  2003              MOVS     r0,#3
000152  f88d0012          STRB     r0,[sp,#0x12]
;;;648    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000156  a904              ADD      r1,sp,#0x10
000158  483e              LDR      r0,|L3.596|
00015a  f7fffffe          BL       GPIO_Init
;;;649    
;;;650    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;651    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;652    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;653    	*/
;;;654    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00015e  f44f6000          MOV      r0,#0x800
000162  f8ad0010          STRH     r0,[sp,#0x10]
;;;655    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000166  2004              MOVS     r0,#4
000168  f88d0013          STRB     r0,[sp,#0x13]
;;;656    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00016c  a904              ADD      r1,sp,#0x10
00016e  4839              LDR      r0,|L3.596|
000170  f7fffffe          BL       GPIO_Init
;;;657    	/*  第3步已经做了，因此这步可以不做
;;;658    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;659    	*/
;;;660    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000174  a904              ADD      r1,sp,#0x10
000176  4837              LDR      r0,|L3.596|
000178  f7fffffe          BL       GPIO_Init
;;;661    
;;;662    	/* 第4步： 配置串口硬件参数 */
;;;663    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
00017c  f44f30e1          MOV      r0,#0x1c200
000180  9000              STR      r0,[sp,#0]
;;;664    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000182  2000              MOVS     r0,#0
000184  f8ad0004          STRH     r0,[sp,#4]
;;;665    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000188  f8ad0006          STRH     r0,[sp,#6]
;;;666    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00018c  f8ad0008          STRH     r0,[sp,#8]
;;;667    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000190  f8ad000c          STRH     r0,[sp,#0xc]
;;;668    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000194  200c              MOVS     r0,#0xc
000196  f8ad000a          STRH     r0,[sp,#0xa]
;;;669    	USART_Init(USART3, &USART_InitStructure);
00019a  4669              MOV      r1,sp
00019c  482e              LDR      r0,|L3.600|
00019e  f7fffffe          BL       USART_Init
;;;670    
;;;671    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001a2  2201              MOVS     r2,#1
0001a4  f2405125          MOV      r1,#0x525
0001a8  482b              LDR      r0,|L3.600|
0001aa  f7fffffe          BL       USART_ITConfig
;;;672    	/*
;;;673    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;674    		注意: 不要在此处打开发送中断
;;;675    		发送中断使能在SendUart()函数打开
;;;676    	*/
;;;677    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001ae  2101              MOVS     r1,#1
0001b0  4829              LDR      r0,|L3.600|
0001b2  f7fffffe          BL       USART_Cmd
;;;678    
;;;679    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;680    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;681    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001b6  2140              MOVS     r1,#0x40
0001b8  4827              LDR      r0,|L3.600|
0001ba  f7fffffe          BL       USART_ClearFlag
;;;682    #endif
;;;683    
;;;684    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;685    	/* 第1步： 开启GPIO和UART时钟 */
;;;686    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
0001be  2101              MOVS     r1,#1
0001c0  2011              MOVS     r0,#0x11
0001c2  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;687    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
0001c6  2101              MOVS     r1,#1
0001c8  04c8              LSLS     r0,r1,#19
0001ca  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;688    
;;;689    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;690    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
0001ce  f44f6080          MOV      r0,#0x400
0001d2  f8ad0010          STRH     r0,[sp,#0x10]
;;;691    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
0001d6  2018              MOVS     r0,#0x18
0001d8  f88d0013          STRB     r0,[sp,#0x13]
;;;692    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0001dc  2003              MOVS     r0,#3
0001de  f88d0012          STRB     r0,[sp,#0x12]
;;;693    	GPIO_Init(GPIOC, &GPIO_InitStructure);
0001e2  a904              ADD      r1,sp,#0x10
0001e4  481d              LDR      r0,|L3.604|
0001e6  f7fffffe          BL       GPIO_Init
;;;694    
;;;695    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;696    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;697    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;698    	*/
;;;699    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
0001ea  f44f6000          MOV      r0,#0x800
0001ee  f8ad0010          STRH     r0,[sp,#0x10]
;;;700    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0001f2  2004              MOVS     r0,#4
0001f4  f88d0013          STRB     r0,[sp,#0x13]
;;;701    	GPIO_Init(GPIOC, &GPIO_InitStructure);
0001f8  a904              ADD      r1,sp,#0x10
0001fa  4818              LDR      r0,|L3.604|
0001fc  f7fffffe          BL       GPIO_Init
;;;702    
;;;703    	/* 第4步： 配置串口硬件参数 */
;;;704    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
000200  f44f30e1          MOV      r0,#0x1c200
000204  9000              STR      r0,[sp,#0]
;;;705    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000206  2000              MOVS     r0,#0
000208  f8ad0004          STRH     r0,[sp,#4]
;;;706    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00020c  f8ad0006          STRH     r0,[sp,#6]
;;;707    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000210  f8ad0008          STRH     r0,[sp,#8]
;;;708    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000214  f8ad000c          STRH     r0,[sp,#0xc]
;;;709    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000218  200c              MOVS     r0,#0xc
00021a  f8ad000a          STRH     r0,[sp,#0xa]
;;;710    	USART_Init(UART4, &USART_InitStructure);
00021e  4669              MOV      r1,sp
000220  480f              LDR      r0,|L3.608|
000222  f7fffffe          BL       USART_Init
;;;711    
;;;712    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000226  2201              MOVS     r2,#1
000228  f2405125          MOV      r1,#0x525
00022c  480c              LDR      r0,|L3.608|
00022e  f7fffffe          BL       USART_ITConfig
;;;713    	/*
;;;714    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;715    		注意: 不要在此处打开发送中断
;;;716    		发送中断使能在SendUart()函数打开
;;;717    	*/
;;;718    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
000232  2101              MOVS     r1,#1
000234  480a              LDR      r0,|L3.608|
000236  f7fffffe          BL       USART_Cmd
;;;719    
;;;720    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;721    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;722    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
00023a  2140              MOVS     r1,#0x40
00023c  4808              LDR      r0,|L3.608|
00023e  f7fffffe          BL       USART_ClearFlag
;;;723    #endif
;;;724    
;;;725    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;726    	/* 第1步： 开启GPIO和UART时钟 */
;;;727    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;728    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;729    
;;;730    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;731    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;732    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;733    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;734    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;735    
;;;736    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;737    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;738    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;739    	*/
;;;740    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;741    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;742    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;743    
;;;744    
;;;745    	/* 第4步： 配置串口硬件参数 */
;;;746    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;747    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;748    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;749    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;750    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;751    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;752    	USART_Init(UART5, &USART_InitStructure);
;;;753    
;;;754    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;755    	/*
;;;756    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;757    		注意: 不要在此处打开发送中断
;;;758    		发送中断使能在SendUart()函数打开
;;;759    	*/
;;;760    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;761    
;;;762    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;763    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;764    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;765    #endif
;;;766    }
000242  b005              ADD      sp,sp,#0x14
000244  bd00              POP      {pc}
;;;767    
                          ENDP

000246  0000              DCW      0x0000
                  |L3.584|
                          DCD      0x40010800
                  |L3.588|
                          DCD      0x40013800
                  |L3.592|
                          DCD      0x40004400
                  |L3.596|
                          DCD      0x40010c00
                  |L3.600|
                          DCD      0x40004800
                  |L3.604|
                          DCD      0x40011000
                  |L3.608|
                          DCD      0x40004c00

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;309    */
;;;310    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;311    {
;;;312    	GPIO_InitTypeDef GPIO_InitStructure;
;;;313    
;;;314    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;315    
;;;316    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;317    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;318    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2004              MOVS     r0,#4
000018  f8ad0000          STRH     r0,[sp,#0]
;;;319    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;320    }
000024  bd08              POP      {r3,pc}
;;;321    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;408    */
;;;409    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;410    {
;;;411    
;;;412    }
;;;413    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;352    */
;;;353    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;354    {
;;;355    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;356    }
000006  4770              BX       lr
;;;357    
                          ENDP

                  |L6.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;380    */
;;;381    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;382    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;383    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;384    }
000010  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;366    */
;;;367    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;368    {
;;;369    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;370    }
000006  4770              BX       lr
;;;371    
                          ENDP

                  |L8.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;395    */
;;;396    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;397    {
000002  4604              MOV      r4,r0
;;;398    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;399    }
000014  bd70              POP      {r4-r6,pc}
;;;400    
                          ENDP


                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART4_IRQHandler PROC
;;;1070   #if UART4_FIFO_EN == 1
;;;1071   void UART4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1072   {
;;;1073   	UartIRQ(&g_tUart4);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1074   }
000008  bd10              POP      {r4,pc}
;;;1075   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart4

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1049   #if UART1_FIFO_EN == 1
;;;1050   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1051   {
;;;1052   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1053   }
000008  bd10              POP      {r4,pc}
;;;1054   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1056   #if UART2_FIFO_EN == 1
;;;1057   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1058   {
;;;1059   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1060   }
000008  bd10              POP      {r4,pc}
;;;1061   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1063   #if UART3_FIFO_EN == 1
;;;1064   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1065   {
;;;1066   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       UartIRQ
;;;1067   }
000008  bd10              POP      {r4,pc}
;;;1068   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;917    */
;;;918    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;919    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;920    	uint16_t usCount;
;;;921    
;;;922    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;923    	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;924    	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;925    	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;926    
;;;927    	/* 如果读和写索引相同，则返回0 */
;;;928    	//if (_pUart->usRxRead == usRxWrite)
;;;929    	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L14.26|
;;;930    	{
;;;931    		return 0;
000016  2000              MOVS     r0,#0
                  |L14.24|
;;;932    	}
;;;933    	else
;;;934    	{
;;;935    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;936    
;;;937    		/* 改写FIFO读索引 */
;;;938    		DISABLE_INT();
;;;939    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;940    		{
;;;941    			_pUart->usRxRead = 0;
;;;942    		}
;;;943    		_pUart->usRxCount--;
;;;944    		ENABLE_INT();
;;;945    		return 1;
;;;946    	}
;;;947    }
000018  bd70              POP      {r4-r6,pc}
                  |L14.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;935
00001c  68a0              LDR      r0,[r4,#8]            ;935
00001e  5c40              LDRB     r0,[r0,r1]            ;935
000020  7028              STRB     r0,[r5,#0]            ;935
000022  2001              MOVS     r0,#1                 ;938
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;939
00002a  1c40              ADDS     r0,r0,#1              ;939
00002c  b280              UXTH     r0,r0                 ;939
00002e  8320              STRH     r0,[r4,#0x18]         ;939
000030  89e1              LDRH     r1,[r4,#0xe]          ;939
000032  4288              CMP      r0,r1                 ;939
000034  db01              BLT      |L14.58|
000036  2000              MOVS     r0,#0                 ;941
000038  8320              STRH     r0,[r4,#0x18]         ;941
                  |L14.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;943
00003c  1e40              SUBS     r0,r0,#1              ;943
00003e  8360              STRH     r0,[r4,#0x1a]         ;943
000040  2000              MOVS     r0,#0                 ;944
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;945
000048  e7e6              B        |L14.24|
;;;948    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;956    */
;;;957    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;958    {
000002  4604              MOV      r4,r0
;;;959    	/* 处理接收中断  */
;;;960    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L15.74|
;;;961    	{
;;;962    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;963    		uint8_t ch;
;;;964    
;;;965    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;966    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;967    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L15.48|
;;;968    		{
;;;969    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L15.48|
;;;970    		}
;;;971    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L15.62|
;;;972    		{
;;;973    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L15.62|
;;;974    		}
;;;975    
;;;976    		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;977    		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;978    		//if (_pUart->usRxCount == 1)
;;;979    		{
;;;980    			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L15.72|
;;;981    			{
;;;982    				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L15.72|
;;;983    			}
;;;984    		}
;;;985    	}
000048  bf00              NOP      
                  |L15.74|
;;;986    
;;;987    	/* 处理发送缓冲区空中断 */
;;;988    	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L15.154|
;;;989    	{
;;;990    		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;991    		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L15.116|
;;;992    		{
;;;993    			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;994    			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;995    
;;;996    			/* 使能数据发送完毕中断 */
;;;997    			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L15.228|
                  |L15.116|
;;;998    		}
;;;999    		else
;;;1000   		{
;;;1001   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1002   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1003   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L15.146|
;;;1004   			{
;;;1005   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L15.146|
;;;1006   			}
;;;1007   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L15.228|
                  |L15.154|
;;;1008   		}
;;;1009   
;;;1010   	}
;;;1011   	/* 数据bit位全部发送完毕的中断 */
;;;1012   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L15.228|
;;;1013   	{
;;;1014   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1015   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L15.192|
;;;1016   		{
;;;1017   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1018   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1019   
;;;1020   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1021   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L15.228|
;;;1022   			{
;;;1023   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L15.228|
                  |L15.192|
;;;1024   			}
;;;1025   		}
;;;1026   		else
;;;1027   		{
;;;1028   			/* 正常情况下，不会进入此分支 */
;;;1029   
;;;1030   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1031   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1032   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L15.222|
;;;1033   			{
;;;1034   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L15.222|
;;;1035   			}
;;;1036   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L15.228|
;;;1037   		}
;;;1038   	}
;;;1039   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1040   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;845    */
;;;846    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;847    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;848    	uint16_t i;
;;;849    
;;;850    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e029              B        |L16.96|
                  |L16.12|
;;;851    	{
;;;852    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;853    	#if 0
;;;854    		/*
;;;855    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;856    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;857    			将导致while(1) 无法退出
;;;858    		*/
;;;859    		while (1)
;;;860    		{
;;;861    			uint16_t usRead;
;;;862    
;;;863    			DISABLE_INT();
;;;864    			usRead = _pUart->usTxRead;
;;;865    			ENABLE_INT();
;;;866    
;;;867    			if (++usRead >= _pUart->usTxBufSize)
;;;868    			{
;;;869    				usRead = 0;
;;;870    			}
;;;871    
;;;872    			if (usRead != _pUart->usTxWrite)
;;;873    			{
;;;874    				break;
;;;875    			}
;;;876    		}
;;;877    	#else
;;;878    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;879    		while (1)
00000c  e00e              B        |L16.44|
                  |L16.14|
;;;880    		{
;;;881    			__IO uint16_t usCount;
;;;882    
;;;883    			DISABLE_INT();
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       __set_PRIMASK
;;;884    			usCount = _pUart->usTxCount;
000014  8aa0              LDRH     r0,[r4,#0x14]
000016  9000              STR      r0,[sp,#0]
;;;885    			ENABLE_INT();
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       __set_PRIMASK
;;;886    
;;;887    			if (usCount < _pUart->usTxBufSize)
00001e  89a0              LDRH     r0,[r4,#0xc]
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  4288              CMP      r0,r1
000026  dd00              BLE      |L16.42|
;;;888    			{
;;;889    				break;
000028  e001              B        |L16.46|
                  |L16.42|
;;;890    			}
;;;891    		}
00002a  bf00              NOP      
                  |L16.44|
00002c  e7ef              B        |L16.14|
                  |L16.46|
00002e  bf00              NOP                            ;889
;;;892    	#endif
;;;893    
;;;894    		/* 将新数据填入发送缓冲区 */
;;;895    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
000030  5d70              LDRB     r0,[r6,r5]
000032  8a22              LDRH     r2,[r4,#0x10]
000034  6861              LDR      r1,[r4,#4]
000036  5488              STRB     r0,[r1,r2]
;;;896    
;;;897    		DISABLE_INT();
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       __set_PRIMASK
;;;898    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003e  8a20              LDRH     r0,[r4,#0x10]
000040  1c40              ADDS     r0,r0,#1
000042  b280              UXTH     r0,r0
000044  8220              STRH     r0,[r4,#0x10]
000046  89a1              LDRH     r1,[r4,#0xc]
000048  4288              CMP      r0,r1
00004a  db01              BLT      |L16.80|
;;;899    		{
;;;900    			_pUart->usTxWrite = 0;
00004c  2000              MOVS     r0,#0
00004e  8220              STRH     r0,[r4,#0x10]
                  |L16.80|
;;;901    		}
;;;902    		_pUart->usTxCount++;
000050  8aa0              LDRH     r0,[r4,#0x14]
000052  1c40              ADDS     r0,r0,#1
000054  82a0              STRH     r0,[r4,#0x14]
;;;903    		ENABLE_INT();
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       __set_PRIMASK
00005c  1c68              ADDS     r0,r5,#1              ;850
00005e  b285              UXTH     r5,r0                 ;850
                  |L16.96|
000060  42bd              CMP      r5,r7                 ;850
000062  dbd3              BLT      |L16.12|
;;;904    	}
;;;905    
;;;906    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000064  2201              MOVS     r2,#1
000066  f2407127          MOV      r1,#0x727
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       USART_ITConfig
;;;907    }
000070  bdf8              POP      {r3-r7,pc}
;;;908    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;421    */
;;;422    static void UartVarInit(void)
000000  482a              LDR      r0,|L17.172|
;;;423    {
;;;424    #if UART1_FIFO_EN == 1
;;;425    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  492b              LDR      r1,|L17.176|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;426    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  482b              LDR      r0,|L17.180|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;427    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  482b              LDR      r0,|L17.184|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;428    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;429    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;430    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;431    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;432    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;433    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;434    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;435    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;436    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;437    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;438    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;439    #endif
;;;440    
;;;441    #if UART2_FIFO_EN == 1
;;;442    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  4824              LDR      r0,|L17.188|
00002c  4924              LDR      r1,|L17.192|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;443    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  4824              LDR      r0,|L17.196|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;444    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  4824              LDR      r0,|L17.200|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;445    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  f44f6080          MOV      r0,#0x400
00003c  8188              STRH     r0,[r1,#0xc]
;;;446    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003e  81c8              STRH     r0,[r1,#0xe]
;;;447    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;448    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;449    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;450    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;451    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;452    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;453    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;454    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;455    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;456    #endif
;;;457    
;;;458    #if UART3_FIFO_EN == 1
;;;459    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  481d              LDR      r0,|L17.204|
000056  491e              LDR      r1,|L17.208|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;460    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  481e              LDR      r0,|L17.212|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;461    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  481e              LDR      r0,|L17.216|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;462    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f6080          MOV      r0,#0x400
000066  8188              STRH     r0,[r1,#0xc]
;;;463    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;464    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;465    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;466    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;467    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;468    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;469    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000076  8288              STRH     r0,[r1,#0x14]
;;;470    	g_tUart3.SendBefor = 0;		                /* 发送数据前的回调函数 */
000078  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;471    	g_tUart3.SendOver = 0;			            /* 发送完毕后的回调函数 */
00007a  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;472    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
00007c  4817              LDR      r0,|L17.220|
00007e  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;473    #endif
;;;474    
;;;475    #if UART4_FIFO_EN == 1
;;;476    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
000080  4817              LDR      r0,|L17.224|
000082  4918              LDR      r1,|L17.228|
000084  6008              STR      r0,[r1,#0]  ; g_tUart4
;;;477    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
000086  4818              LDR      r0,|L17.232|
000088  6048              STR      r0,[r1,#4]  ; g_tUart4
;;;478    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
00008a  4818              LDR      r0,|L17.236|
00008c  6088              STR      r0,[r1,#8]  ; g_tUart4
;;;479    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00008e  f44f6080          MOV      r0,#0x400
000092  8188              STRH     r0,[r1,#0xc]
;;;480    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000094  81c8              STRH     r0,[r1,#0xe]
;;;481    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
000096  2000              MOVS     r0,#0
000098  8208              STRH     r0,[r1,#0x10]
;;;482    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
00009a  8248              STRH     r0,[r1,#0x12]
;;;483    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
00009c  82c8              STRH     r0,[r1,#0x16]
;;;484    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
00009e  8308              STRH     r0,[r1,#0x18]
;;;485    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
0000a0  8348              STRH     r0,[r1,#0x1a]
;;;486    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
0000a2  8288              STRH     r0,[r1,#0x14]
;;;487    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
0000a4  61c8              STR      r0,[r1,#0x1c]  ; g_tUart4
;;;488    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
0000a6  6208              STR      r0,[r1,#0x20]  ; g_tUart4
;;;489    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
0000a8  6248              STR      r0,[r1,#0x24]  ; g_tUart4
;;;490    #endif
;;;491    
;;;492    #if UART5_FIFO_EN == 1
;;;493    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;494    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;495    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;496    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;497    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;498    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;499    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;500    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;501    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;502    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;503    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;504    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;505    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;506    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;507    #endif
;;;508    
;;;509    
;;;510    #if UART6_FIFO_EN == 1
;;;511    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;512    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;513    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;514    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;515    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;516    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;517    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;518    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;519    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;520    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;521    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;522    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;523    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;524    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;525    #endif
;;;526    }
0000aa  4770              BX       lr
;;;527    
                          ENDP

                  |L17.172|
                          DCD      0x40013800
                  |L17.176|
                          DCD      g_tUart1
                  |L17.180|
                          DCD      g_TxBuf1
                  |L17.184|
                          DCD      g_RxBuf1
                  |L17.188|
                          DCD      0x40004400
                  |L17.192|
                          DCD      g_tUart2
                  |L17.196|
                          DCD      g_TxBuf2
                  |L17.200|
                          DCD      g_RxBuf2
                  |L17.204|
                          DCD      0x40004800
                  |L17.208|
                          DCD      g_tUart3
                  |L17.212|
                          DCD      g_TxBuf3
                  |L17.216|
                          DCD      g_RxBuf3
                  |L17.220|
                          DCD      RS485_ReciveNew
                  |L17.224|
                          DCD      0x40004c00
                  |L17.228|
                          DCD      g_tUart4
                  |L17.232|
                          DCD      g_TxBuf4
                  |L17.236|
                          DCD      g_RxBuf4

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;74     */
;;;75     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;78     
;;;79     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;80     
;;;81     	#if 0
;;;82     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
;;;83     	#endif
;;;84     	
;;;85     	ConfigUartNVIC();	/* 配置串口中断 */
00000a  f7fffffe          BL       ConfigUartNVIC
;;;86     }
00000e  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;329    */
;;;330    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;331    {
000002  4604              MOV      r4,r0
;;;332    	USART_InitTypeDef USART_InitStructure;
;;;333    
;;;334    	/* 第2步： 配置串口硬件参数 */
;;;335    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;336    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;337    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;338    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;339    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;340    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;341    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L20.40|
000022  f7fffffe          BL       USART_Init
;;;342    }
000026  bd1f              POP      {r0-r4,pc}
;;;343    
                          ENDP

                  |L20.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;262    */
;;;263    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;264    {
000002  4604              MOV      r4,r0
;;;265    	USART_InitTypeDef USART_InitStructure;
;;;266    
;;;267    	/* 第2步： 配置串口硬件参数 */
;;;268    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;269    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;270    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;271    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;272    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;273    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;274    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L21.40|
000022  f7fffffe          BL       USART_Init
;;;275    }
000026  bd1f              POP      {r0-r4,pc}
;;;276    
                          ENDP

                  |L21.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;284    */
;;;285    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287    	USART_InitTypeDef USART_InitStructure;
;;;288    
;;;289    	/* 第2步： 配置串口硬件参数 */
;;;290    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;291    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;292    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;293    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;294    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;295    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;296    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L22.40|
000022  f7fffffe          BL       USART_Init
;;;297    }
000026  bd1f              POP      {r0-r4,pc}
;;;298    
                          ENDP

                  |L22.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;239    */
;;;240    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;241    {
000002  4603              MOV      r3,r0
;;;242    	UART_T *pUart;
;;;243    
;;;244    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;245    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L23.16|
                  |L23.14|
;;;246    	{
;;;247    		return;
;;;248    	}
;;;249    
;;;250    	pUart->usRxWrite = 0;
;;;251    	pUart->usRxRead = 0;
;;;252    	pUart->usRxCount = 0;
;;;253    }
00000e  bd00              POP      {pc}
                  |L23.16|
000010  2000              MOVS     r0,#0                 ;250
000012  82d0              STRH     r0,[r2,#0x16]         ;250
000014  8310              STRH     r0,[r2,#0x18]         ;251
000016  8350              STRH     r0,[r2,#0x1a]         ;252
000018  bf00              NOP      
00001a  e7f8              B        |L23.14|
;;;254    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;216    */
;;;217    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;218    {
000002  4603              MOV      r3,r0
;;;219    	UART_T *pUart;
;;;220    
;;;221    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;222    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L24.16|
                  |L24.14|
;;;223    	{
;;;224    		return;
;;;225    	}
;;;226    
;;;227    	pUart->usTxWrite = 0;
;;;228    	pUart->usTxRead = 0;
;;;229    	pUart->usTxCount = 0;
;;;230    }
00000e  bd00              POP      {pc}
                  |L24.16|
000010  2000              MOVS     r0,#0                 ;227
000012  8210              STRH     r0,[r2,#0x10]         ;227
000014  8250              STRH     r0,[r2,#0x12]         ;228
000016  8290              STRH     r0,[r2,#0x14]         ;229
000018  bf00              NOP      
00001a  e7f8              B        |L24.14|
;;;231    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;195    */
;;;196    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;198    	UART_T *pUart;
;;;199    
;;;200    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;201    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L25.20|
;;;202    	{
;;;203    		return 0;
000010  2000              MOVS     r0,#0
                  |L25.18|
;;;204    	}
;;;205    
;;;206    	return UartGetChar(pUart, _pByte);
;;;207    }
000012  bd70              POP      {r4-r6,pc}
                  |L25.20|
000014  4631              MOV      r1,r6                 ;206
000016  4620              MOV      r0,r4                 ;206
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L25.18|
;;;208    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;154    */
;;;155    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;157    	UART_T *pUart;
;;;158    
;;;159    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;160    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L26.24|
                  |L26.20|
;;;161    	{
;;;162    		return;
;;;163    	}
;;;164    
;;;165    	if (pUart->SendBefor != 0)
;;;166    	{
;;;167    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;168    	}
;;;169    
;;;170    	UartSend(pUart, _ucaBuf, _usLen);
;;;171    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L26.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;165
00001a  b108              CBZ      r0,|L26.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;167
00001e  4780              BLX      r0                    ;167
                  |L26.32|
000020  463a              MOV      r2,r7                 ;170
000022  4631              MOV      r1,r6                 ;170
000024  4620              MOV      r0,r4                 ;170
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L26.20|
;;;172    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;181    */
;;;182    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;185    }
00000e  bd1c              POP      {r2-r4,pc}
;;;186    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1124   */
;;;1125   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1126   {
000002  4604              MOV      r4,r0
;;;1127   
;;;1128   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1129   	uint8_t ucData;
;;;1130   
;;;1131   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L28.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L28.6|
;;;1132   
;;;1133   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1134   #else
;;;1135   	/* 等待串口1输入数据 */
;;;1136   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1137   
;;;1138   	return (int)USART_ReceiveData(USART1);
;;;1139   #endif
;;;1140   }
000016  bd38              POP      {r3-r5,pc}
;;;1141   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1098   */
;;;1099   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1100   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1101   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1102   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1103   
;;;1104   	return ch;
00000e  4620              MOV      r0,r4
;;;1105   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1106   	/* 写一个字节到USART1 */
;;;1107   	USART_SendData(USART1, (uint8_t) ch);
;;;1108   
;;;1109   	/* 等待发送结束 */
;;;1110   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1111   	{}
;;;1112   
;;;1113   	return ch;
;;;1114   #endif
;;;1115   }
000010  bd70              POP      {r4-r6,pc}
;;;1116   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        1024
                  g_RxBuf2
                          %        1024
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024
                  g_tUart4
                          %        40
                  g_TxBuf4
                          %        1024
                  g_RxBuf4
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
