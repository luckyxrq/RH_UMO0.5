; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -I.\RTE\_Flash -IE:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IE:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;669    */
;;;670    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;671    {
;;;672    	/* 创建互斥信号量 */
;;;673        xMutex = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;674    	
;;;675    	if(xMutex == NULL)
;;;676        {
;;;677            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;678        }
;;;679    }
00000c  bd10              POP      {r4,pc}
;;;680    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      xMutex

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;638    */
;;;639    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;640    {
;;;641    	xTaskCreate( vTaskDecision,     		    /* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a14              LDR      r2,|L2.88|
000006  2301              MOVS     r3,#1
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f6280          MOV      r2,#0x400
000016  a111              ADR      r1,|L2.92|
000018  4814              LDR      r0,|L2.108|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;642                     "vTaskDecision",   		    /* 任务名    */
;;;643                     1024,            		        /* 任务栈大小，单位word，也就是4字节 */
;;;644                     NULL,           		        /* 任务参数  */
;;;645                     1,              		        /* 任务优先级*/
;;;646                     &xHandleTaskDecision );        /* 任务句柄  */
;;;647    	xTaskCreate( vTaskControl,     		        /* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a13              LDR      r2,|L2.112|
000022  2302              MOVS     r3,#2
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f6280          MOV      r2,#0x400
000032  a110              ADR      r1,|L2.116|
000034  4813              LDR      r0,|L2.132|
000036  f7fffffe          BL       xTaskGenericCreate
;;;648                     "vTaskControl",   		        /* 任务名    */
;;;649                     1024,            		        /* 任务栈大小，单位word，也就是4字节 */
;;;650                     NULL,           		        /* 任务参数  */
;;;651                     2,              		        /* 任务优先级*/
;;;652                     &xHandleTaskControl );         /* 任务句柄  */	
;;;653    	xTaskCreate( vTaskPerception,     		    /* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a12              LDR      r2,|L2.136|
00003e  2303              MOVS     r3,#3
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  f44f6280          MOV      r2,#0x400
00004e  a10f              ADR      r1,|L2.140|
000050  4812              LDR      r0,|L2.156|
000052  f7fffffe          BL       xTaskGenericCreate
;;;654                     "vTaskPerception",   		    /* 任务名    */
;;;655                     1024,            		        /* 任务栈大小，单位word，也就是4字节 */
;;;656                     NULL,           		        /* 任务参数  */
;;;657                     3,              		        /* 任务优先级*/
;;;658                     &xHandleTaskPerception );      /* 任务句柄  */	
;;;659    			 
;;;660    }
000056  bd1f              POP      {r0-r4,pc}
;;;661    
                          ENDP

                  |L2.88|
                          DCD      xHandleTaskDecision
                  |L2.92|
00005c  76546173          DCB      "vTaskDecision",0
000060  6b446563
000064  6973696f
000068  6e00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L2.108|
                          DCD      vTaskDecision
                  |L2.112|
                          DCD      xHandleTaskControl
                  |L2.116|
000074  76546173          DCB      "vTaskControl",0
000078  6b436f6e
00007c  74726f6c
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L2.132|
                          DCD      vTaskControl
                  |L2.136|
                          DCD      xHandleTaskPerception
                  |L2.140|
00008c  76546173          DCB      "vTaskPerception",0
000090  6b506572
000094  63657074
000098  696f6e00
                  |L2.156|
                          DCD      vTaskPerception

                          AREA ||i.App_Printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  App_Printf PROC
;;;689    */
;;;690    void  App_Printf(char *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;691    {
000002  b500              PUSH     {lr}
000004  b0b5              SUB      sp,sp,#0xd4
;;;692        char  buf_str[200 + 1];
;;;693        va_list   v_args;
;;;694    
;;;695    
;;;696        va_start(v_args, format);
000006  a837              ADD      r0,sp,#0xdc
000008  9001              STR      r0,[sp,#4]
;;;697       (void)vsnprintf((char       *)&buf_str[0],
00000a  21c9              MOVS     r1,#0xc9
00000c  a802              ADD      r0,sp,#8
00000e  9b01              LDR      r3,[sp,#4]
000010  9a36              LDR      r2,[sp,#0xd8]
000012  f7fffffe          BL       __c89vsnprintf
;;;698                       (size_t      ) sizeof(buf_str),
;;;699                       (char const *) format,
;;;700                                      v_args);
;;;701        va_end(v_args);
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;702    
;;;703    	/* 互斥信号量 */
;;;704    	xSemaphoreTake(xMutex, portMAX_DELAY);
00001a  2300              MOVS     r3,#0
00001c  1e42              SUBS     r2,r0,#1
00001e  4619              MOV      r1,r3
000020  4808              LDR      r0,|L3.68|
000022  6800              LDR      r0,[r0,#0]  ; xMutex
000024  f7fffffe          BL       xQueueGenericReceive
;;;705    
;;;706        printf("%s", buf_str);
000028  a902              ADD      r1,sp,#8
00002a  a007              ADR      r0,|L3.72|
00002c  f7fffffe          BL       __2printf
;;;707    
;;;708       	xSemaphoreGive(xMutex);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  4619              MOV      r1,r3
000036  4803              LDR      r0,|L3.68|
000038  6800              LDR      r0,[r0,#0]  ; xMutex
00003a  f7fffffe          BL       xQueueGenericSend
;;;709    }
00003e  b035              ADD      sp,sp,#0xd4
000040  f85dfb14          LDR      pc,[sp],#0x14
;;;710    
                          ENDP

                  |L3.68|
                          DCD      xMutex
                  |L3.72|
000048  257300            DCB      "%s",0
00004b  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;49     */
;;;50     int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;51     {
;;;52     	/* 
;;;53     	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;54     	  这样做的好处是：
;;;55     	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;56     	  2. 保证系统正常启动，不受别的中断影响。
;;;57     	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;58     	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;59     	  和cpsie i是等效的。
;;;60          */
;;;61     	__set_PRIMASK(1);  
;;;62     	
;;;63     	/* 硬件初始化 */
;;;64     	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;65     	
;;;66     	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;67     		  目中不要使用，因为这个功能比较影响系统实时性。
;;;68     	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;69     	*/
;;;70     	vSetupSysInfoTest();
00000c  f7fffffe          BL       vSetupSysInfoTest
;;;71     	
;;;72     	/* 创建任务 */
;;;73     	AppTaskCreate();
000010  f7fffffe          BL       AppTaskCreate
;;;74     
;;;75     	/* 创建任务通信机制 */
;;;76     	AppObjCreate();
000014  f7fffffe          BL       AppObjCreate
;;;77     	
;;;78         /* 启动调度，开始执行任务 */
;;;79         vTaskStartScheduler();
000018  f7fffffe          BL       vTaskStartScheduler
;;;80     
;;;81     	/* 
;;;82     	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;83     	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;84     	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;85     	*/
;;;86     	while(1);
00001c  bf00              NOP      
                  |L4.30|
00001e  e7fe              B        |L4.30|
;;;87     }
;;;88     
                          ENDP


                          AREA ||i.vTaskControl||, CODE, READONLY, ALIGN=1

                  vTaskControl PROC
;;;566    */
;;;567    static void vTaskControl(void *pvParameters)       //控制 根据决策控制电机
000000  e008              B        |L5.20|
                  |L5.2|
;;;568    {
;;;569    	while(1)
;;;570        {
;;;571    #if 0
;;;572    		bsp_SendReportFrame();
;;;573    		bsp_PrintRemoteState();
;;;574    #endif
;;;575    		bsp_IWDG_Feed(); /* 喂狗 */
000002  f7fffffe          BL       bsp_IWDG_Feed
;;;576    		
;;;577    		bsp_PidSched(); /*10MS调用一次，这里面进行PWM计算，占空比设置，速度（脉冲为单位；MM为单位）计算*/
000006  f7fffffe          BL       bsp_PidSched
;;;578    #if 0		
;;;579    		DEBUG("L %d MM/S\r\n",bsp_MotorGetSpeed(MotorLeft));
;;;580    		DEBUG("R %d MM/S\r\n",bsp_MotorGetSpeed(MotorRight));
;;;581    #endif		
;;;582    		bsp_ComAnalysis();
00000a  f7fffffe          BL       bsp_ComAnalysis
;;;583    		vTaskDelay(10);
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       vTaskDelay
                  |L5.20|
000014  e7f5              B        |L5.2|
;;;584        }
;;;585    	
;;;586    }
;;;587    
                          ENDP


                          AREA ||i.vTaskDecision||, CODE, READONLY, ALIGN=2

                  vTaskDecision PROC
;;;99     */
;;;100    static void vTaskDecision(void *pvParameters)      //决策 整机软件控制流程
000000  b08e              SUB      sp,sp,#0x38
;;;101    {
;;;102    	uint8_t ucKeyCode;	
;;;103    	uint32_t count = 0 ;
000002  2000              MOVS     r0,#0
000004  900d              STR      r0,[sp,#0x34]
;;;104    	
;;;105    	uint16_t clifadc_right[5] = {0};
000006  900a              STR      r0,[sp,#0x28]
000008  900b              STR      r0,[sp,#0x2c]
00000a  900c              STR      r0,[sp,#0x30]
;;;106    	uint16_t clifadc_left[5] = {0};
00000c  9007              STR      r0,[sp,#0x1c]
00000e  9008              STR      r0,[sp,#0x20]
000010  9009              STR      r0,[sp,#0x24]
;;;107    	uint16_t clifadc_middle[5] = {0};
000012  9004              STR      r0,[sp,#0x10]
000014  9005              STR      r0,[sp,#0x14]
000016  9006              STR      r0,[sp,#0x18]
;;;108    	
;;;109    	uint32_t clifAdcRight = 0;
000018  2600              MOVS     r6,#0
;;;110    	uint32_t clifAdcLeft = 0;
00001a  2700              MOVS     r7,#0
;;;111    	uint32_t clifAdcMiddle = 0;
00001c  4680              MOV      r8,r0
;;;112    	uint16_t clifAdcRef = 0;
00001e  2400              MOVS     r4,#0
;;;113    	
;;;114    	uint8_t clifRightCnt = 0;
000020  4682              MOV      r10,r0
;;;115    	uint8_t clifLeftCnt = 0;
000022  4683              MOV      r11,r0
;;;116    	uint8_t clifMiddleCnt = 0;
000024  9003              STR      r0,[sp,#0xc]
;;;117    	uint8_t i;
;;;118    	
;;;119    	
;;;120    	bsp_AngleRst();
000026  f7fffffe          BL       bsp_AngleRst
;;;121    	
;;;122    	
;;;123    
;;;124    	
;;;125    	
;;;126    	
;;;127    	while(1)
00002a  e3f1              B        |L6.2064|
                  |L6.44|
;;;128    	{
;;;129    		/* 处理按键事件 */
;;;130    		ucKeyCode = bsp_GetKey();
00002c  f7fffffe          BL       bsp_GetKey
000030  4681              MOV      r9,r0
;;;131    		if (ucKeyCode > 0)
000032  f1b90f00          CMP      r9,#0
000036  dd10              BLE      |L6.90|
;;;132    		{
;;;133    			/* 有键按下 */
;;;134    			switch (ucKeyCode)
000038  f1b90f0a          CMP      r9,#0xa
00003c  d20c              BCS      |L6.88|
00003e  e8dff009          TBB      [pc,r9]
000042  0b05              DCB      0x0b,0x05
000044  0b08060b          DCB      0x0b,0x08,0x06,0x0b
000048  09070b0a          DCB      0x09,0x07,0x0b,0x0a
;;;135    			{
;;;136    				case KEY_1_DOWN:/*按键1按下*/
;;;137    				{
;;;138    					
;;;139    				}break;
00004c  e004              B        |L6.88|
;;;140    				
;;;141    				case KEY_2_DOWN:/*按键2按下*/
;;;142    				{
;;;143    					
;;;144    				}break;
00004e  e003              B        |L6.88|
;;;145    				
;;;146    				case KEY_3_DOWN:/*按键3按下*/	
;;;147    				{
;;;148    					
;;;149    				}break;
000050  e002              B        |L6.88|
;;;150    
;;;151    				case KEY_1_LONG:/*按键1长按*/	
;;;152    				{
;;;153    					
;;;154    				}break;
000052  e001              B        |L6.88|
;;;155    				
;;;156    				case KEY_2_LONG:/*按键2长按*/	
;;;157    				{
;;;158    					
;;;159    				}break;
000054  e000              B        |L6.88|
;;;160    				
;;;161    				case KEY_3_LONG:/*按键3长按*/	
;;;162    				{
;;;163    					
;;;164    				}break;
000056  bf00              NOP      
                  |L6.88|
000058  bf00              NOP                            ;139
                  |L6.90|
;;;165    			}
;;;166    		}
;;;167    
;;;168    		if(count++ % 20 == 0)
00005a  980d              LDR      r0,[sp,#0x34]
00005c  1c41              ADDS     r1,r0,#1
00005e  910d              STR      r1,[sp,#0x34]
000060  2114              MOVS     r1,#0x14
000062  fbb0f2f1          UDIV     r2,r0,r1
000066  fb010012          MLS      r0,r1,r2,r0
00006a  b960              CBNZ     r0,|L6.134|
;;;169    		{
;;;170    			if(bsp_SpeakerIsBusy())
00006c  f7fffffe          BL       bsp_SpeakerIsBusy
000070  b118              CBZ      r0,|L6.122|
;;;171    			{
;;;172    				DEBUG("busy\r\n");
000072  a0fe              ADR      r0,|L6.1132|
000074  f7fffffe          BL       __2printf
000078  e005              B        |L6.134|
                  |L6.122|
;;;173    			}
;;;174    			else
;;;175    			{
;;;176    				DEBUG("play\r\n");
00007a  a0fe              ADR      r0,|L6.1140|
00007c  f7fffffe          BL       __2printf
;;;177    				bsp_SperkerPlay(Song3);
000080  2006              MOVS     r0,#6
000082  f7fffffe          BL       bsp_SperkerPlay
                  |L6.134|
;;;178    			}
;;;179    		}
;;;180    		
;;;181    //*****************************************************************************************************//	
;;;182    		// 主循环
;;;183    		//a 获取按键信息标志位
;;;184    	
;;;185    		//b 更新机器状态并作出决策
;;;186    		    //0初始化
;;;187    				//a 检查红外跳崖传感器数据并标定
;;;188    				//b 检查红外碰撞传感器数据是否正常
;;;189    			//1暂停
;;;190    				//a 关闭所有电机电源
;;;191    				//b 计算暂停时间，超时后进入待机状态
;;;192    			//2工作
;;;193    				//a 获取尘盒状态
;;;194    			    //b 获取离地开关状态
;;;195    				//c 获取电机电流
;;;196    				//d 获取跳崖传感器数据
;;;197    				//e 获取红外对管碰撞沿边数据
;;;198    				//f	获取电池电压数据
;;;199    				//g 传感器数据正常根据策略清扫（乱撞 、惯导规划 、BOT3）
;;;200    				//h 传感器数据异常，语音播报，返回暂停状态
;;;201    			//3待机
;;;202    				//a 低功耗模式
;;;203    			//4回充
;;;204    			    //a 关闭清扫电机电流
;;;205    				//b 获取离地开关状态
;;;206    				//c 获取运动电机电流
;;;207    				//d 获取跳崖传感器数据
;;;208    				//e 获取红外对管碰撞沿边数据
;;;209    				//f 获取两对红外编码数据
;;;210    				//g 获取充电状态
;;;211    				//h 传感器数据正常根据策略回充（自主、BOT3）
;;;212    				//i 传感器数据异常，语音播报，返回暂停状态
;;;213    //*****************************************************************************************************//					
;;;214    		last_robot_state = cur_robot_state;
000086  48fd              LDR      r0,|L6.1148|
000088  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
00008a  49fd              LDR      r1,|L6.1152|
00008c  7008              STRB     r0,[r1,#0]
;;;215    //*****************************************************************************************************//		
;;;216    		if(home_key_down_flag == 1)
00008e  48fd              LDR      r0,|L6.1156|
000090  7800              LDRB     r0,[r0,#0]  ; home_key_down_flag
000092  2801              CMP      r0,#1
000094  d12a              BNE      |L6.236|
;;;217    		{
;;;218    			if(last_robot_state == ROBOT_STATE_DEFAULT)       cur_robot_state = ROBOT_STATE_INIT;
000096  4608              MOV      r0,r1
000098  7800              LDRB     r0,[r0,#0]  ; last_robot_state
00009a  28ff              CMP      r0,#0xff
00009c  d103              BNE      |L6.166|
00009e  2000              MOVS     r0,#0
0000a0  49f6              LDR      r1,|L6.1148|
0000a2  7008              STRB     r0,[r1,#0]
0000a4  e01e              B        |L6.228|
                  |L6.166|
;;;219    			else if(last_robot_state == ROBOT_STATE_WORKING)  cur_robot_state = ROBOT_STATE_SUSPEND;
0000a6  48f6              LDR      r0,|L6.1152|
0000a8  7800              LDRB     r0,[r0,#0]  ; last_robot_state
0000aa  2802              CMP      r0,#2
0000ac  d103              BNE      |L6.182|
0000ae  2003              MOVS     r0,#3
0000b0  49f2              LDR      r1,|L6.1148|
0000b2  7008              STRB     r0,[r1,#0]
0000b4  e016              B        |L6.228|
                  |L6.182|
;;;220    			else if(last_robot_state == ROBOT_STATE_CHARGING) cur_robot_state = ROBOT_STATE_SUSPEND;
0000b6  48f2              LDR      r0,|L6.1152|
0000b8  7800              LDRB     r0,[r0,#0]  ; last_robot_state
0000ba  2804              CMP      r0,#4
0000bc  d103              BNE      |L6.198|
0000be  2003              MOVS     r0,#3
0000c0  49ee              LDR      r1,|L6.1148|
0000c2  7008              STRB     r0,[r1,#0]
0000c4  e00e              B        |L6.228|
                  |L6.198|
;;;221    			else if(last_robot_state == ROBOT_STATE_SUSPEND)  cur_robot_state = ROBOT_STATE_WORKING;
0000c6  48ee              LDR      r0,|L6.1152|
0000c8  7800              LDRB     r0,[r0,#0]  ; last_robot_state
0000ca  2803              CMP      r0,#3
0000cc  d103              BNE      |L6.214|
0000ce  2002              MOVS     r0,#2
0000d0  49ea              LDR      r1,|L6.1148|
0000d2  7008              STRB     r0,[r1,#0]
0000d4  e006              B        |L6.228|
                  |L6.214|
;;;222    			else if(last_robot_state == ROBOT_STATE_STANDBY)  cur_robot_state = ROBOT_STATE_WORKING;
0000d6  48ea              LDR      r0,|L6.1152|
0000d8  7800              LDRB     r0,[r0,#0]  ; last_robot_state
0000da  2801              CMP      r0,#1
0000dc  d102              BNE      |L6.228|
0000de  2002              MOVS     r0,#2
0000e0  49e6              LDR      r1,|L6.1148|
0000e2  7008              STRB     r0,[r1,#0]
                  |L6.228|
;;;223    			
;;;224    			robot_work_way  = ROBOT_WORKWAY_HOME;
0000e4  2001              MOVS     r0,#1
0000e6  49e8              LDR      r1,|L6.1160|
0000e8  7008              STRB     r0,[r1,#0]
0000ea  e05c              B        |L6.422|
                  |L6.236|
;;;225    		}
;;;226    		else if(charge_key_down_flag == 1)
0000ec  48e7              LDR      r0,|L6.1164|
0000ee  7800              LDRB     r0,[r0,#0]  ; charge_key_down_flag
0000f0  2801              CMP      r0,#1
0000f2  d12a              BNE      |L6.330|
;;;227    		{
;;;228    			if(last_robot_state == ROBOT_STATE_DEFAULT)       cur_robot_state = ROBOT_STATE_INIT;
0000f4  48e2              LDR      r0,|L6.1152|
0000f6  7800              LDRB     r0,[r0,#0]  ; last_robot_state
0000f8  28ff              CMP      r0,#0xff
0000fa  d103              BNE      |L6.260|
0000fc  2000              MOVS     r0,#0
0000fe  49df              LDR      r1,|L6.1148|
000100  7008              STRB     r0,[r1,#0]
000102  e01e              B        |L6.322|
                  |L6.260|
;;;229    			else if(last_robot_state == ROBOT_STATE_WORKING)  cur_robot_state = ROBOT_STATE_CHARGING;
000104  48de              LDR      r0,|L6.1152|
000106  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000108  2802              CMP      r0,#2
00010a  d103              BNE      |L6.276|
00010c  2004              MOVS     r0,#4
00010e  49db              LDR      r1,|L6.1148|
000110  7008              STRB     r0,[r1,#0]
000112  e016              B        |L6.322|
                  |L6.276|
;;;230    			else if(last_robot_state == ROBOT_STATE_CHARGING) cur_robot_state = ROBOT_STATE_SUSPEND;
000114  48da              LDR      r0,|L6.1152|
000116  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000118  2804              CMP      r0,#4
00011a  d103              BNE      |L6.292|
00011c  2003              MOVS     r0,#3
00011e  49d7              LDR      r1,|L6.1148|
000120  7008              STRB     r0,[r1,#0]
000122  e00e              B        |L6.322|
                  |L6.292|
;;;231    			else if(last_robot_state == ROBOT_STATE_SUSPEND)  cur_robot_state = ROBOT_STATE_CHARGING;
000124  48d6              LDR      r0,|L6.1152|
000126  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000128  2803              CMP      r0,#3
00012a  d103              BNE      |L6.308|
00012c  2004              MOVS     r0,#4
00012e  49d3              LDR      r1,|L6.1148|
000130  7008              STRB     r0,[r1,#0]
000132  e006              B        |L6.322|
                  |L6.308|
;;;232    			else if(last_robot_state == ROBOT_STATE_STANDBY)  cur_robot_state = ROBOT_STATE_CHARGING;
000134  48d2              LDR      r0,|L6.1152|
000136  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000138  2801              CMP      r0,#1
00013a  d102              BNE      |L6.322|
00013c  2004              MOVS     r0,#4
00013e  49cf              LDR      r1,|L6.1148|
000140  7008              STRB     r0,[r1,#0]
                  |L6.322|
;;;233    			
;;;234    			robot_work_way  = ROBOT_WORKWAY_CHARGE;
000142  2003              MOVS     r0,#3
000144  49d0              LDR      r1,|L6.1160|
000146  7008              STRB     r0,[r1,#0]
000148  e02d              B        |L6.422|
                  |L6.330|
;;;235    		}
;;;236    		else if(clean_key_down_flag == 1)
00014a  48d1              LDR      r0,|L6.1168|
00014c  7800              LDRB     r0,[r0,#0]  ; clean_key_down_flag
00014e  2801              CMP      r0,#1
000150  d129              BNE      |L6.422|
;;;237    		{
;;;238    			if(last_robot_state == ROBOT_STATE_DEFAULT)       cur_robot_state = ROBOT_STATE_INIT;
000152  48cb              LDR      r0,|L6.1152|
000154  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000156  28ff              CMP      r0,#0xff
000158  d103              BNE      |L6.354|
00015a  2000              MOVS     r0,#0
00015c  49c7              LDR      r1,|L6.1148|
00015e  7008              STRB     r0,[r1,#0]
000160  e01e              B        |L6.416|
                  |L6.354|
;;;239    			else if(last_robot_state == ROBOT_STATE_WORKING)  cur_robot_state = ROBOT_STATE_SUSPEND;
000162  48c7              LDR      r0,|L6.1152|
000164  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000166  2802              CMP      r0,#2
000168  d103              BNE      |L6.370|
00016a  2003              MOVS     r0,#3
00016c  49c3              LDR      r1,|L6.1148|
00016e  7008              STRB     r0,[r1,#0]
000170  e016              B        |L6.416|
                  |L6.370|
;;;240    			else if(last_robot_state == ROBOT_STATE_CHARGING) cur_robot_state = ROBOT_STATE_SUSPEND;
000172  48c3              LDR      r0,|L6.1152|
000174  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000176  2804              CMP      r0,#4
000178  d103              BNE      |L6.386|
00017a  2003              MOVS     r0,#3
00017c  49bf              LDR      r1,|L6.1148|
00017e  7008              STRB     r0,[r1,#0]
000180  e00e              B        |L6.416|
                  |L6.386|
;;;241    			else if(last_robot_state == ROBOT_STATE_SUSPEND)  cur_robot_state = ROBOT_STATE_WORKING;
000182  48bf              LDR      r0,|L6.1152|
000184  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000186  2803              CMP      r0,#3
000188  d103              BNE      |L6.402|
00018a  2002              MOVS     r0,#2
00018c  49bb              LDR      r1,|L6.1148|
00018e  7008              STRB     r0,[r1,#0]
000190  e006              B        |L6.416|
                  |L6.402|
;;;242    			else if(last_robot_state == ROBOT_STATE_STANDBY)  cur_robot_state = ROBOT_STATE_WORKING;
000192  48bb              LDR      r0,|L6.1152|
000194  7800              LDRB     r0,[r0,#0]  ; last_robot_state
000196  2801              CMP      r0,#1
000198  d102              BNE      |L6.416|
00019a  2002              MOVS     r0,#2
00019c  49b7              LDR      r1,|L6.1148|
00019e  7008              STRB     r0,[r1,#0]
                  |L6.416|
;;;243    			
;;;244    			robot_work_way  = ROBOT_WORKWAY_CLEAN;
0001a0  2002              MOVS     r0,#2
0001a2  49b9              LDR      r1,|L6.1160|
0001a4  7008              STRB     r0,[r1,#0]
                  |L6.422|
;;;245    		}
;;;246    //*****************************************************************************************************//
;;;247    		
;;;248    //*****************************************************************************************************//		
;;;249    		if(cur_robot_state == ROBOT_STATE_INIT)
0001a6  48b5              LDR      r0,|L6.1148|
0001a8  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
0001aa  2800              CMP      r0,#0
0001ac  d172              BNE      |L6.660|
;;;250    		{
;;;251    			for( i=0;i<5;i++)
0001ae  2500              MOVS     r5,#0
0001b0  e02b              B        |L6.522|
                  |L6.434|
;;;252    			{
;;;253    				clifadc_left[i]   =   bsp_GetCliffVoltage(Cliff1_left);     //left
0001b2  2000              MOVS     r0,#0
0001b4  f7fffffe          BL       bsp_GetCliffVoltage
0001b8  9002              STR      r0,[sp,#8]
0001ba  f7fffffe          BL       __aeabi_f2uiz
0001be  a907              ADD      r1,sp,#0x1c
0001c0  f8210015          STRH     r0,[r1,r5,LSL #1]
;;;254    				clifadc_middle[i] =   bsp_GetCliffVoltage(Cliff2_middle);   //middle
0001c4  2001              MOVS     r0,#1
0001c6  f7fffffe          BL       bsp_GetCliffVoltage
0001ca  9002              STR      r0,[sp,#8]
0001cc  f7fffffe          BL       __aeabi_f2uiz
0001d0  a904              ADD      r1,sp,#0x10
0001d2  f8210015          STRH     r0,[r1,r5,LSL #1]
;;;255    				clifadc_right[i]  =   bsp_GetCliffVoltage(Cliff3_right);    //right
0001d6  2002              MOVS     r0,#2
0001d8  f7fffffe          BL       bsp_GetCliffVoltage
0001dc  9002              STR      r0,[sp,#8]
0001de  f7fffffe          BL       __aeabi_f2uiz
0001e2  a90a              ADD      r1,sp,#0x28
0001e4  f8210015          STRH     r0,[r1,r5,LSL #1]
;;;256    				vTaskDelay(10);	
0001e8  200a              MOVS     r0,#0xa
0001ea  f7fffffe          BL       vTaskDelay
;;;257    				clifAdcRight+=clifadc_right[i];
0001ee  a80a              ADD      r0,sp,#0x28
0001f0  f8300015          LDRH     r0,[r0,r5,LSL #1]
0001f4  4406              ADD      r6,r6,r0
;;;258    				clifAdcLeft +=clifadc_left[i];
0001f6  a807              ADD      r0,sp,#0x1c
0001f8  f8300015          LDRH     r0,[r0,r5,LSL #1]
0001fc  4407              ADD      r7,r7,r0
;;;259    				clifAdcMiddle+=clifadc_middle[i];
0001fe  a804              ADD      r0,sp,#0x10
000200  f8300015          LDRH     r0,[r0,r5,LSL #1]
000204  4480              ADD      r8,r8,r0
000206  1c68              ADDS     r0,r5,#1              ;251
000208  b2c5              UXTB     r5,r0                 ;251
                  |L6.522|
00020a  2d05              CMP      r5,#5                 ;251
00020c  dbd1              BLT      |L6.434|
;;;260    			}
;;;261    			
;;;262    			clifAdcRight/=5; 
00020e  2005              MOVS     r0,#5
000210  fbb6f6f0          UDIV     r6,r6,r0
;;;263    			clifAdcLeft/=5; 
000214  fbb7f7f0          UDIV     r7,r7,r0
;;;264    			clifAdcMiddle/=5; 
000218  fbb8f8f0          UDIV     r8,r8,r0
;;;265    			clifAdcRef = (clifAdcRight+clifAdcLeft+clifAdcMiddle)/3;
00021c  19f0              ADDS     r0,r6,r7
00021e  4440              ADD      r0,r0,r8
000220  2103              MOVS     r1,#3
000222  fbb0f0f1          UDIV     r0,r0,r1
000226  b284              UXTH     r4,r0
;;;266    			
;;;267    		//	DEBUG("%d,%d,%d\n",clifAdcRight,clifAdcLeft,clifAdcMiddle);		
;;;268    		//	DEBUG("clifAdcRef:%d, %d,%d,%d\n",clifAdcRef,clifAdcRight-clifAdcRef,clifAdcLeft-clifAdcRef,clifAdcMiddle-clifAdcRef);
;;;269    			
;;;270    			if(((clifAdcRef>clifAdcRight)?(clifAdcRef-clifAdcRight):(clifAdcRight-clifAdcRef)) > MAXCLIFFADCDT )
000228  42b4              CMP      r4,r6
00022a  d901              BLS      |L6.560|
00022c  1ba0              SUBS     r0,r4,r6
00022e  e000              B        |L6.562|
                  |L6.560|
000230  1b30              SUBS     r0,r6,r4
                  |L6.562|
000232  f64031b8          MOV      r1,#0xbb8
000236  4288              CMP      r0,r1
000238  d911              BLS      |L6.606|
;;;271    			{
;;;272    				//	DEBUG("请擦拭悬崖传感器");
;;;273    				cur_robot_state = ROBOT_STATE_DEFAULT;
00023a  20ff              MOVS     r0,#0xff
00023c  498f              LDR      r1,|L6.1148|
00023e  7008              STRB     r0,[r1,#0]
;;;274    				robot_error_num = ROBOT_ERROR_NUM_CLIF;
000240  2000              MOVS     r0,#0
000242  4994              LDR      r1,|L6.1172|
000244  7008              STRB     r0,[r1,#0]
;;;275    				while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000246  e002              B        |L6.590|
                  |L6.584|
000248  2064              MOVS     r0,#0x64
00024a  f7fffffe          BL       vTaskDelay
                  |L6.590|
00024e  f7fffffe          BL       bsp_SpeakerIsBusy
000252  2800              CMP      r0,#0
000254  d1f8              BNE      |L6.584|
;;;276    				bsp_SperkerPlay(Song11);
000256  200e              MOVS     r0,#0xe
000258  f7fffffe          BL       bsp_SperkerPlay
;;;277    				continue;
00025c  e2fe              B        |L6.2140|
                  |L6.606|
;;;278    			}
;;;279    			if(((clifAdcRef>clifAdcLeft)?(clifAdcRef-clifAdcLeft):(clifAdcLeft-clifAdcRef)) > MAXCLIFFADCDT )
00025e  42bc              CMP      r4,r7
000260  d901              BLS      |L6.614|
000262  1be0              SUBS     r0,r4,r7
000264  e000              B        |L6.616|
                  |L6.614|
000266  1b38              SUBS     r0,r7,r4
                  |L6.616|
000268  f64031b8          MOV      r1,#0xbb8
00026c  4288              CMP      r0,r1
00026e  d912              BLS      |L6.662|
;;;280    			{
;;;281    				//	DEBUG("请擦拭悬崖传感器");
;;;282    				cur_robot_state = ROBOT_STATE_DEFAULT;
000270  20ff              MOVS     r0,#0xff
000272  4982              LDR      r1,|L6.1148|
000274  7008              STRB     r0,[r1,#0]
;;;283    				robot_error_num = ROBOT_ERROR_NUM_CLIF;
000276  2000              MOVS     r0,#0
000278  4986              LDR      r1,|L6.1172|
00027a  7008              STRB     r0,[r1,#0]
;;;284    				while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
00027c  e002              B        |L6.644|
                  |L6.638|
00027e  2064              MOVS     r0,#0x64
000280  f7fffffe          BL       vTaskDelay
                  |L6.644|
000284  f7fffffe          BL       bsp_SpeakerIsBusy
000288  2800              CMP      r0,#0
00028a  d1f8              BNE      |L6.638|
;;;285    				bsp_SperkerPlay(Song11);				
00028c  200e              MOVS     r0,#0xe
00028e  f7fffffe          BL       bsp_SperkerPlay
;;;286    				continue;
000292  e2e3              B        |L6.2140|
                  |L6.660|
000294  e044              B        |L6.800|
                  |L6.662|
;;;287    			}
;;;288    			if(((clifAdcRef>clifAdcMiddle)?(clifAdcRef-clifAdcMiddle):(clifAdcMiddle-clifAdcRef)) > MAXCLIFFADCDT )
000296  4544              CMP      r4,r8
000298  d902              BLS      |L6.672|
00029a  eba40008          SUB      r0,r4,r8
00029e  e001              B        |L6.676|
                  |L6.672|
0002a0  eba80004          SUB      r0,r8,r4
                  |L6.676|
0002a4  f64031b8          MOV      r1,#0xbb8
0002a8  4288              CMP      r0,r1
0002aa  d911              BLS      |L6.720|
;;;289    			{
;;;290    				//	DEBUG("请擦拭悬崖传感器");
;;;291    				cur_robot_state = ROBOT_STATE_DEFAULT;
0002ac  20ff              MOVS     r0,#0xff
0002ae  4973              LDR      r1,|L6.1148|
0002b0  7008              STRB     r0,[r1,#0]
;;;292    				robot_error_num = ROBOT_ERROR_NUM_CLIF;
0002b2  2000              MOVS     r0,#0
0002b4  4977              LDR      r1,|L6.1172|
0002b6  7008              STRB     r0,[r1,#0]
;;;293    				while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0002b8  e002              B        |L6.704|
                  |L6.698|
0002ba  2064              MOVS     r0,#0x64
0002bc  f7fffffe          BL       vTaskDelay
                  |L6.704|
0002c0  f7fffffe          BL       bsp_SpeakerIsBusy
0002c4  2800              CMP      r0,#0
0002c6  d1f8              BNE      |L6.698|
;;;294    				bsp_SperkerPlay(Song11);
0002c8  200e              MOVS     r0,#0xe
0002ca  f7fffffe          BL       bsp_SperkerPlay
;;;295    				continue;
0002ce  e2c5              B        |L6.2140|
                  |L6.720|
;;;296    			}
;;;297    			
;;;298    			cur_robot_state = (robot_work_way == ROBOT_WORKWAY_CHARGE)? ROBOT_STATE_CHARGING:ROBOT_STATE_WORKING;
0002d0  486d              LDR      r0,|L6.1160|
0002d2  7800              LDRB     r0,[r0,#0]  ; robot_work_way
0002d4  2803              CMP      r0,#3
0002d6  d101              BNE      |L6.732|
0002d8  2004              MOVS     r0,#4
0002da  e000              B        |L6.734|
                  |L6.732|
0002dc  2002              MOVS     r0,#2
                  |L6.734|
0002de  4967              LDR      r1,|L6.1148|
0002e0  7008              STRB     r0,[r1,#0]
;;;299    			
;;;300    			if(robot_work_way==ROBOT_WORKWAY_CLEAN || robot_work_way==ROBOT_WORKWAY_HOME)
0002e2  4869              LDR      r0,|L6.1160|
0002e4  7800              LDRB     r0,[r0,#0]  ; robot_work_way
0002e6  2802              CMP      r0,#2
0002e8  d003              BEQ      |L6.754|
0002ea  4867              LDR      r0,|L6.1160|
0002ec  7800              LDRB     r0,[r0,#0]  ; robot_work_way
0002ee  2801              CMP      r0,#1
0002f0  d115              BNE      |L6.798|
                  |L6.754|
;;;301    			{
;;;302    				bsp_MotorCleanSetPWM(MotorRollingBrush, CW , ROLLMOTORRPM);
0002f2  f44f62fa          MOV      r2,#0x7d0
0002f6  2100              MOVS     r1,#0
0002f8  4608              MOV      r0,r1
0002fa  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;303    				bsp_MotorCleanSetPWM(MotorSideBrush, CW , BRUSHMOTORRPM);
0002fe  f44f62fa          MOV      r2,#0x7d0
000302  2100              MOVS     r1,#0
000304  2001              MOVS     r0,#1
000306  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;304    				bsp_StartVacuum();
00030a  f7fffffe          BL       bsp_StartVacuum
;;;305    				bsp_SetMotorSpeed(MotorLeft,0);
00030e  2100              MOVS     r1,#0
000310  4608              MOV      r0,r1
000312  f7fffffe          BL       bsp_SetMotorSpeed
;;;306    				bsp_SetMotorSpeed(MotorRight,0);
000316  2100              MOVS     r1,#0
000318  2001              MOVS     r0,#1
00031a  f7fffffe          BL       bsp_SetMotorSpeed
                  |L6.798|
00031e  e299              B        |L6.2132|
                  |L6.800|
;;;307    				
;;;308    			}
;;;309    
;;;310    		}
;;;311    //*****************************************************************************************************//
;;;312    		else if(cur_robot_state == ROBOT_STATE_STANDBY)
000320  4856              LDR      r0,|L6.1148|
000322  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
000324  2801              CMP      r0,#1
000326  d0fa              BEQ      |L6.798|
;;;313    		{
;;;314    			//do nothing
;;;315    		}
;;;316    //*****************************************************************************************************//
;;;317    		else if(cur_robot_state == ROBOT_STATE_WORKING)
000328  4854              LDR      r0,|L6.1148|
00032a  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
00032c  2802              CMP      r0,#2
00032e  d179              BNE      |L6.1060|
;;;318    		{
;;;319    			//a 获取尘盒状态
;;;320    			//b 获取离地开关状态
;;;321    			//c 获取电机电流
;;;322    			//d 获取电池电压数据
;;;323    			//e 获取红外对管碰撞沿边数据
;;;324    			//f	获取跳崖传感器数据
;;;325    			//g 传感器数据异常，语音播报，返回暂停状态
;;;326    			//h 传感器数据正常根据策略清扫（乱撞 、惯导规划 、BOT3）
;;;327    			
;;;328    			if( DustBoxOutside == bsp_DustBoxGetState()) 
000330  f7fffffe          BL       bsp_DustBoxGetState
000334  2801              CMP      r0,#1
000336  d106              BNE      |L6.838|
;;;329    			{
;;;330    				cur_robot_state = ROBOT_STATE_SUSPEND;
000338  2003              MOVS     r0,#3
00033a  4950              LDR      r1,|L6.1148|
00033c  7008              STRB     r0,[r1,#0]
;;;331    				robot_error_num = ROBOT_ERROR_NUM_DUST_HALL;
00033e  200a              MOVS     r0,#0xa
000340  4954              LDR      r1,|L6.1172|
000342  7008              STRB     r0,[r1,#0]
;;;332    				continue;
000344  e28a              B        |L6.2140|
                  |L6.838|
;;;333    			}
;;;334    			if( OffSiteRight == bsp_OffSiteGetState())
000346  f7fffffe          BL       bsp_OffSiteGetState
00034a  2802              CMP      r0,#2
00034c  d106              BNE      |L6.860|
;;;335    			{
;;;336    				cur_robot_state = ROBOT_STATE_SUSPEND;
00034e  2003              MOVS     r0,#3
000350  494a              LDR      r1,|L6.1148|
000352  7008              STRB     r0,[r1,#0]
;;;337    				robot_error_num = ROBOT_ERROR_NUM_OFFLANDR;
000354  2006              MOVS     r0,#6
000356  494f              LDR      r1,|L6.1172|
000358  7008              STRB     r0,[r1,#0]
;;;338    				continue;
00035a  e27f              B        |L6.2140|
                  |L6.860|
;;;339    			}
;;;340    			if( OffSiteLeft ==  bsp_OffSiteGetState())
00035c  f7fffffe          BL       bsp_OffSiteGetState
000360  2801              CMP      r0,#1
000362  d106              BNE      |L6.882|
;;;341    			{
;;;342    				cur_robot_state = ROBOT_STATE_SUSPEND;
000364  2003              MOVS     r0,#3
000366  4945              LDR      r1,|L6.1148|
000368  7008              STRB     r0,[r1,#0]
;;;343    				robot_error_num = ROBOT_ERROR_NUM_OFFLANDL;
00036a  2007              MOVS     r0,#7
00036c  4949              LDR      r1,|L6.1172|
00036e  7008              STRB     r0,[r1,#0]
;;;344    				continue;
000370  e274              B        |L6.2140|
                  |L6.882|
;;;345    			}
;;;346    			//get roller motor adc value
;;;347    			if(bsp_GetFeedbackVoltage(eRollingBrush) >ROLLER_MOTOR_MAX_ADC_VALUE)
000372  2003              MOVS     r0,#3
000374  f7fffffe          BL       bsp_GetFeedbackVoltage
000378  4947              LDR      r1,|L6.1176|
00037a  9002              STR      r0,[sp,#8]
00037c  f7fffffe          BL       __aeabi_cfrcmple
000380  d205              BCS      |L6.910|
;;;348    			{
;;;349    				cur_robot_state = ROBOT_STATE_SUSPEND;
000382  2003              MOVS     r0,#3
000384  493d              LDR      r1,|L6.1148|
000386  7008              STRB     r0,[r1,#0]
;;;350    				robot_error_num = ROBOT_ERROR_NUM_ROLLER_MOTOR;
000388  4942              LDR      r1,|L6.1172|
00038a  7008              STRB     r0,[r1,#0]
;;;351    				continue;
00038c  e266              B        |L6.2140|
                  |L6.910|
;;;352    			}
;;;353    			
;;;354    			//get brush motor adc vaule
;;;355    			if(bsp_GetFeedbackVoltage(eSideBrush) >BRUSH_MOTOR_MAX_ADC_VALUE)
00038e  2004              MOVS     r0,#4
000390  f7fffffe          BL       bsp_GetFeedbackVoltage
000394  4940              LDR      r1,|L6.1176|
000396  9002              STR      r0,[sp,#8]
000398  f7fffffe          BL       __aeabi_cfrcmple
00039c  d206              BCS      |L6.940|
;;;356    			{
;;;357    				cur_robot_state = ROBOT_STATE_SUSPEND;
00039e  2003              MOVS     r0,#3
0003a0  4936              LDR      r1,|L6.1148|
0003a2  7008              STRB     r0,[r1,#0]
;;;358    				robot_error_num = ROBOT_ERROR_NUM_BRUSH_MOTOR;
0003a4  2004              MOVS     r0,#4
0003a6  493b              LDR      r1,|L6.1172|
0003a8  7008              STRB     r0,[r1,#0]
;;;359    				continue;
0003aa  e257              B        |L6.2140|
                  |L6.940|
;;;360    			}
;;;361    				
;;;362    			//get vacuum motor adc value
;;;363    			if(bsp_GetFeedbackVoltage(eVacuum) >VACUUM_MOTOR_MAX_ADC_VALUE)
0003ac  2002              MOVS     r0,#2
0003ae  f7fffffe          BL       bsp_GetFeedbackVoltage
0003b2  4939              LDR      r1,|L6.1176|
0003b4  9002              STR      r0,[sp,#8]
0003b6  f7fffffe          BL       __aeabi_cfrcmple
0003ba  d206              BCS      |L6.970|
;;;364    			{
;;;365    				cur_robot_state = ROBOT_STATE_SUSPEND;
0003bc  2003              MOVS     r0,#3
0003be  492f              LDR      r1,|L6.1148|
0003c0  7008              STRB     r0,[r1,#0]
;;;366    				robot_error_num = ROBOT_ERROR_NUM_VACUUM_MOTOR;
0003c2  2005              MOVS     r0,#5
0003c4  4933              LDR      r1,|L6.1172|
0003c6  7008              STRB     r0,[r1,#0]
;;;367    				continue;
0003c8  e248              B        |L6.2140|
                  |L6.970|
;;;368    			}
;;;369    			//get robot battery adc value
;;;370    			if(bsp_GetFeedbackVoltage(eBatteryVoltage) <ROBOT_BATTERY_MIN_ADC_VALUE)
0003ca  2005              MOVS     r0,#5
0003cc  f7fffffe          BL       bsp_GetFeedbackVoltage
0003d0  4932              LDR      r1,|L6.1180|
0003d2  9002              STR      r0,[sp,#8]
0003d4  f7fffffe          BL       __aeabi_cfcmple
0003d8  d206              BCS      |L6.1000|
;;;371    			{
;;;372    				cur_robot_state = ROBOT_STATE_CHARGING;
0003da  2004              MOVS     r0,#4
0003dc  4927              LDR      r1,|L6.1148|
0003de  7008              STRB     r0,[r1,#0]
;;;373    				robot_error_num = ROBOT_ERROR_NUM_BATTERY;
0003e0  2008              MOVS     r0,#8
0003e2  492c              LDR      r1,|L6.1172|
0003e4  7008              STRB     r0,[r1,#0]
;;;374    				continue;
0003e6  e239              B        |L6.2140|
                  |L6.1000|
;;;375    			}
;;;376    			//get left wheel adc value
;;;377    			if(bsp_GetFeedbackVoltage(eMotorLeft) >WHEEL_MOTOR_MAX_ADC_VALUE)
0003e8  2000              MOVS     r0,#0
0003ea  f7fffffe          BL       bsp_GetFeedbackVoltage
0003ee  492a              LDR      r1,|L6.1176|
0003f0  9002              STR      r0,[sp,#8]
0003f2  f7fffffe          BL       __aeabi_cfrcmple
0003f6  d206              BCS      |L6.1030|
;;;378    			{
;;;379    				cur_robot_state = ROBOT_STATE_SUSPEND;
0003f8  2003              MOVS     r0,#3
0003fa  4920              LDR      r1,|L6.1148|
0003fc  7008              STRB     r0,[r1,#0]
;;;380    				robot_error_num = ROBOT_ERROR_NUM_LEFT_WHEEL;
0003fe  2001              MOVS     r0,#1
000400  4924              LDR      r1,|L6.1172|
000402  7008              STRB     r0,[r1,#0]
;;;381    				continue;
000404  e22a              B        |L6.2140|
                  |L6.1030|
;;;382    			}
;;;383    			//get right wheel adc value
;;;384    			if(bsp_GetFeedbackVoltage(eMotorRight) >WHEEL_MOTOR_MAX_ADC_VALUE)
000406  2001              MOVS     r0,#1
000408  f7fffffe          BL       bsp_GetFeedbackVoltage
00040c  4922              LDR      r1,|L6.1176|
00040e  9002              STR      r0,[sp,#8]
000410  f7fffffe          BL       __aeabi_cfrcmple
000414  d207              BCS      |L6.1062|
;;;385    			{
;;;386    				cur_robot_state = ROBOT_STATE_SUSPEND;
000416  2003              MOVS     r0,#3
000418  4918              LDR      r1,|L6.1148|
00041a  7008              STRB     r0,[r1,#0]
;;;387    				robot_error_num = ROBOT_ERROR_NUM_RIGHT_WHEEL;
00041c  2002              MOVS     r0,#2
00041e  491d              LDR      r1,|L6.1172|
000420  7008              STRB     r0,[r1,#0]
;;;388    				continue;
000422  e21b              B        |L6.2140|
                  |L6.1060|
000424  e12f              B        |L6.1670|
                  |L6.1062|
;;;389    			}
;;;390    	
;;;391    			bsp_GetCliffVoltage(Cliff1_left);     //left
000426  2000              MOVS     r0,#0
000428  f7fffffe          BL       bsp_GetCliffVoltage
;;;392    			bsp_GetCliffVoltage(Cliff2_middle);   //middle
00042c  2001              MOVS     r0,#1
00042e  f7fffffe          BL       bsp_GetCliffVoltage
;;;393    			bsp_GetCliffVoltage(Cliff3_right);
000432  2002              MOVS     r0,#2
000434  f7fffffe          BL       bsp_GetCliffVoltage
;;;394    			//get cliff infrared data
;;;395    			if((clifAdcLeft  -  bsp_GetCliffVoltage (Cliff1_left   ))>1500) clifLeftCnt++;
000438  2000              MOVS     r0,#0
00043a  f7fffffe          BL       bsp_GetCliffVoltage
00043e  9001              STR      r0,[sp,#4]
000440  4638              MOV      r0,r7
000442  f7fffffe          BL       __aeabi_ui2f
000446  9000              STR      r0,[sp,#0]
000448  9901              LDR      r1,[sp,#4]
00044a  f7fffffe          BL       __aeabi_fsub
00044e  4914              LDR      r1,|L6.1184|
000450  9002              STR      r0,[sp,#8]
000452  f7fffffe          BL       __aeabi_cfrcmple
000456  d203              BCS      |L6.1120|
000458  f10b0001          ADD      r0,r11,#1
00045c  f0000bff          AND      r11,r0,#0xff
                  |L6.1120|
;;;396    			if((clifAdcMiddle - bsp_GetCliffVoltage (Cliff2_middle ))>1500) clifMiddleCnt++;
000460  2001              MOVS     r0,#1
000462  f7fffffe          BL       bsp_GetCliffVoltage
000466  9001              STR      r0,[sp,#4]
000468  4640              MOV      r0,r8
00046a  e01b              B        |L6.1188|
                  |L6.1132|
00046c  62757379          DCB      "busy\r\n",0
000470  0d0a00  
000473  00                DCB      0
                  |L6.1140|
000474  706c6179          DCB      "play\r\n",0
000478  0d0a00  
00047b  00                DCB      0
                  |L6.1148|
                          DCD      cur_robot_state
                  |L6.1152|
                          DCD      last_robot_state
                  |L6.1156|
                          DCD      home_key_down_flag
                  |L6.1160|
                          DCD      robot_work_way
                  |L6.1164|
                          DCD      charge_key_down_flag
                  |L6.1168|
                          DCD      clean_key_down_flag
                  |L6.1172|
                          DCD      robot_error_num
                  |L6.1176|
                          DCD      0x457a0000
                  |L6.1180|
                          DCD      0x44fa0000
                  |L6.1184|
                          DCD      0x44bb8000
                  |L6.1188|
0004a4  f7fffffe          BL       __aeabi_ui2f
0004a8  9000              STR      r0,[sp,#0]
0004aa  9901              LDR      r1,[sp,#4]
0004ac  f7fffffe          BL       __aeabi_fsub
0004b0  49eb              LDR      r1,|L6.2144|
0004b2  9002              STR      r0,[sp,#8]
0004b4  f7fffffe          BL       __aeabi_cfrcmple
0004b8  d203              BCS      |L6.1218|
0004ba  9803              LDR      r0,[sp,#0xc]
0004bc  1c40              ADDS     r0,r0,#1
0004be  b2c0              UXTB     r0,r0
0004c0  9003              STR      r0,[sp,#0xc]
                  |L6.1218|
;;;397    			if((clifAdcRight -  bsp_GetCliffVoltage (Cliff3_right  ))>1500) clifRightCnt++;	
0004c2  2002              MOVS     r0,#2
0004c4  f7fffffe          BL       bsp_GetCliffVoltage
0004c8  9001              STR      r0,[sp,#4]
0004ca  4630              MOV      r0,r6
0004cc  f7fffffe          BL       __aeabi_ui2f
0004d0  9000              STR      r0,[sp,#0]
0004d2  9901              LDR      r1,[sp,#4]
0004d4  f7fffffe          BL       __aeabi_fsub
0004d8  49e1              LDR      r1,|L6.2144|
0004da  9002              STR      r0,[sp,#8]
0004dc  f7fffffe          BL       __aeabi_cfrcmple
0004e0  d203              BCS      |L6.1258|
0004e2  f10a0001          ADD      r0,r10,#1
0004e6  f0000aff          AND      r10,r0,#0xff
                  |L6.1258|
;;;398    			//get  collision infrared data
;;;399    			
;;;400    			//get bumper data
;;;401    			if(robot_work_way  == ROBOT_WORKWAY_HOME)
0004ea  48de              LDR      r0,|L6.2148|
0004ec  7800              LDRB     r0,[r0,#0]  ; robot_work_way
0004ee  2801              CMP      r0,#1
0004f0  d11d              BNE      |L6.1326|
;;;402    			{
;;;403    				if( CollisionLeft == bsp_CollisionScan())
0004f2  f7fffffe          BL       bsp_CollisionScan
0004f6  b9d8              CBNZ     r0,|L6.1328|
;;;404    				{
;;;405    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
0004f8  f06f01c7          MVN      r1,#0xc7
0004fc  2000              MOVS     r0,#0
0004fe  f7fffffe          BL       bsp_SetMotorSpeed
;;;406    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000502  f06f01c7          MVN      r1,#0xc7
000506  2001              MOVS     r0,#1
000508  f7fffffe          BL       bsp_SetMotorSpeed
;;;407    					vTaskDelay(500);
00050c  f44f70fa          MOV      r0,#0x1f4
000510  f7fffffe          BL       vTaskDelay
;;;408    					bsp_SetMotorSpeed(MotorLeft,MOTORSPEED);
000514  21c8              MOVS     r1,#0xc8
000516  2000              MOVS     r0,#0
000518  f7fffffe          BL       bsp_SetMotorSpeed
;;;409    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
00051c  f06f01c7          MVN      r1,#0xc7
000520  2001              MOVS     r0,#1
000522  f7fffffe          BL       bsp_SetMotorSpeed
;;;410    					vTaskDelay(800);
000526  f44f7048          MOV      r0,#0x320
00052a  f7fffffe          BL       vTaskDelay
                  |L6.1326|
00052e  e0a9              B        |L6.1668|
                  |L6.1328|
;;;411    				}
;;;412    				else if(CollisionRight == bsp_CollisionScan())
000530  f7fffffe          BL       bsp_CollisionScan
000534  2801              CMP      r0,#1
000536  d11b              BNE      |L6.1392|
;;;413    				{
;;;414    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
000538  f06f01c7          MVN      r1,#0xc7
00053c  2000              MOVS     r0,#0
00053e  f7fffffe          BL       bsp_SetMotorSpeed
;;;415    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000542  f06f01c7          MVN      r1,#0xc7
000546  2001              MOVS     r0,#1
000548  f7fffffe          BL       bsp_SetMotorSpeed
;;;416    					vTaskDelay(500);
00054c  f44f70fa          MOV      r0,#0x1f4
000550  f7fffffe          BL       vTaskDelay
;;;417    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
000554  f06f01c7          MVN      r1,#0xc7
000558  2000              MOVS     r0,#0
00055a  f7fffffe          BL       bsp_SetMotorSpeed
;;;418    					bsp_SetMotorSpeed(MotorRight,MOTORSPEED);
00055e  21c8              MOVS     r1,#0xc8
000560  2001              MOVS     r0,#1
000562  f7fffffe          BL       bsp_SetMotorSpeed
;;;419    					vTaskDelay(800);
000566  f44f7048          MOV      r0,#0x320
00056a  f7fffffe          BL       vTaskDelay
00056e  e089              B        |L6.1668|
                  |L6.1392|
;;;420    				}
;;;421    				else if(CollisionAll == bsp_CollisionScan())
000570  f7fffffe          BL       bsp_CollisionScan
000574  2802              CMP      r0,#2
000576  d11b              BNE      |L6.1456|
;;;422    				{
;;;423    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
000578  f06f01c7          MVN      r1,#0xc7
00057c  2000              MOVS     r0,#0
00057e  f7fffffe          BL       bsp_SetMotorSpeed
;;;424    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000582  f06f01c7          MVN      r1,#0xc7
000586  2001              MOVS     r0,#1
000588  f7fffffe          BL       bsp_SetMotorSpeed
;;;425    					vTaskDelay(500);
00058c  f44f70fa          MOV      r0,#0x1f4
000590  f7fffffe          BL       vTaskDelay
;;;426    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
000594  f06f01c7          MVN      r1,#0xc7
000598  2000              MOVS     r0,#0
00059a  f7fffffe          BL       bsp_SetMotorSpeed
;;;427    					bsp_SetMotorSpeed(MotorRight,MOTORSPEED);
00059e  21c8              MOVS     r1,#0xc8
0005a0  2001              MOVS     r0,#1
0005a2  f7fffffe          BL       bsp_SetMotorSpeed
;;;428    					vTaskDelay(1000);
0005a6  f44f707a          MOV      r0,#0x3e8
0005aa  f7fffffe          BL       vTaskDelay
0005ae  e069              B        |L6.1668|
                  |L6.1456|
;;;429    				}
;;;430    				else if(clifRightCnt>2 )
0005b0  f1ba0f02          CMP      r10,#2
0005b4  dd1d              BLE      |L6.1522|
;;;431    				{
;;;432    					clifRightCnt = 0;
0005b6  f04f0a00          MOV      r10,#0
;;;433    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
0005ba  f06f01c7          MVN      r1,#0xc7
0005be  2000              MOVS     r0,#0
0005c0  f7fffffe          BL       bsp_SetMotorSpeed
;;;434    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
0005c4  f06f01c7          MVN      r1,#0xc7
0005c8  2001              MOVS     r0,#1
0005ca  f7fffffe          BL       bsp_SetMotorSpeed
;;;435    					vTaskDelay(500);
0005ce  f44f70fa          MOV      r0,#0x1f4
0005d2  f7fffffe          BL       vTaskDelay
;;;436    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
0005d6  f06f01c7          MVN      r1,#0xc7
0005da  2000              MOVS     r0,#0
0005dc  f7fffffe          BL       bsp_SetMotorSpeed
;;;437    					bsp_SetMotorSpeed(MotorRight,MOTORSPEED);
0005e0  21c8              MOVS     r1,#0xc8
0005e2  2001              MOVS     r0,#1
0005e4  f7fffffe          BL       bsp_SetMotorSpeed
;;;438    					vTaskDelay(800);
0005e8  f44f7048          MOV      r0,#0x320
0005ec  f7fffffe          BL       vTaskDelay
0005f0  e048              B        |L6.1668|
                  |L6.1522|
;;;439    					
;;;440    				}
;;;441    				else if(clifLeftCnt>2)
0005f2  f1bb0f02          CMP      r11,#2
0005f6  dd1d              BLE      |L6.1588|
;;;442    				{
;;;443    					clifLeftCnt = 0;
0005f8  f04f0b00          MOV      r11,#0
;;;444    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
0005fc  f06f01c7          MVN      r1,#0xc7
000600  2000              MOVS     r0,#0
000602  f7fffffe          BL       bsp_SetMotorSpeed
;;;445    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000606  f06f01c7          MVN      r1,#0xc7
00060a  2001              MOVS     r0,#1
00060c  f7fffffe          BL       bsp_SetMotorSpeed
;;;446    					vTaskDelay(500);
000610  f44f70fa          MOV      r0,#0x1f4
000614  f7fffffe          BL       vTaskDelay
;;;447    					bsp_SetMotorSpeed(MotorLeft,MOTORSPEED);
000618  21c8              MOVS     r1,#0xc8
00061a  2000              MOVS     r0,#0
00061c  f7fffffe          BL       bsp_SetMotorSpeed
;;;448    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000620  f06f01c7          MVN      r1,#0xc7
000624  2001              MOVS     r0,#1
000626  f7fffffe          BL       bsp_SetMotorSpeed
;;;449    					vTaskDelay(800);
00062a  f44f7048          MOV      r0,#0x320
00062e  f7fffffe          BL       vTaskDelay
000632  e027              B        |L6.1668|
                  |L6.1588|
;;;450    				}
;;;451    				else if(clifMiddleCnt>2)
000634  9803              LDR      r0,[sp,#0xc]
000636  2802              CMP      r0,#2
000638  dd1c              BLE      |L6.1652|
;;;452    				{
;;;453    					clifMiddleCnt = 0;
00063a  2000              MOVS     r0,#0
00063c  9003              STR      r0,[sp,#0xc]
;;;454    					bsp_SetMotorSpeed(MotorLeft,-MOTORSPEED);
00063e  f06f01c7          MVN      r1,#0xc7
000642  f7fffffe          BL       bsp_SetMotorSpeed
;;;455    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000646  f06f01c7          MVN      r1,#0xc7
00064a  2001              MOVS     r0,#1
00064c  f7fffffe          BL       bsp_SetMotorSpeed
;;;456    					vTaskDelay(500);
000650  f44f70fa          MOV      r0,#0x1f4
000654  f7fffffe          BL       vTaskDelay
;;;457    					bsp_SetMotorSpeed(MotorLeft,MOTORSPEED);
000658  21c8              MOVS     r1,#0xc8
00065a  2000              MOVS     r0,#0
00065c  f7fffffe          BL       bsp_SetMotorSpeed
;;;458    					bsp_SetMotorSpeed(MotorRight,-MOTORSPEED);
000660  f06f01c7          MVN      r1,#0xc7
000664  2001              MOVS     r0,#1
000666  f7fffffe          BL       bsp_SetMotorSpeed
;;;459    					vTaskDelay(800);
00066a  f44f7048          MOV      r0,#0x320
00066e  f7fffffe          BL       vTaskDelay
000672  e007              B        |L6.1668|
                  |L6.1652|
;;;460    				}
;;;461    				else
;;;462    				{
;;;463    					bsp_SetMotorSpeed(MotorLeft,MOTORSPEED);
000674  21c8              MOVS     r1,#0xc8
000676  2000              MOVS     r0,#0
000678  f7fffffe          BL       bsp_SetMotorSpeed
;;;464    					bsp_SetMotorSpeed(MotorRight,MOTORSPEED);
00067c  21c8              MOVS     r1,#0xc8
00067e  2001              MOVS     r0,#1
000680  f7fffffe          BL       bsp_SetMotorSpeed
                  |L6.1668|
;;;465    				}
;;;466    				
;;;467    			}
;;;468    			
;;;469    			if(robot_work_way  == ROBOT_WORKWAY_CLEAN)
000684  e0e6              B        |L6.2132|
                  |L6.1670|
;;;470    			{
;;;471    				
;;;472    			}
;;;473    			
;;;474    				
;;;475    		}
;;;476    //*****************************************************************************************************//
;;;477    		else if(cur_robot_state == ROBOT_STATE_SUSPEND)
000686  4878              LDR      r0,|L6.2152|
000688  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
00068a  2803              CMP      r0,#3
00068c  d174              BNE      |L6.1912|
;;;478    		{		
;;;479    			//WheelBrake();
;;;480    			bsp_MotorCleanSetPWM(MotorRollingBrush, CW , 0);
00068e  2200              MOVS     r2,#0
000690  4611              MOV      r1,r2
000692  4610              MOV      r0,r2
000694  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;481    			bsp_MotorCleanSetPWM(MotorSideBrush, CW , 0);
000698  2200              MOVS     r2,#0
00069a  4611              MOV      r1,r2
00069c  2001              MOVS     r0,#1
00069e  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;482    			bsp_StopVacuum();
0006a2  f7fffffe          BL       bsp_StopVacuum
;;;483    			bsp_SetMotorSpeed(MotorLeft,0);
0006a6  2100              MOVS     r1,#0
0006a8  4608              MOV      r0,r1
0006aa  f7fffffe          BL       bsp_SetMotorSpeed
;;;484    			bsp_SetMotorSpeed(MotorRight,0);
0006ae  2100              MOVS     r1,#0
0006b0  2001              MOVS     r0,#1
0006b2  f7fffffe          BL       bsp_SetMotorSpeed
;;;485    			
;;;486    			switch(robot_error_num)
0006b6  486d              LDR      r0,|L6.2156|
0006b8  7800              LDRB     r0,[r0,#0]  ; robot_error_num
0006ba  2806              CMP      r0,#6
0006bc  d05d              BEQ      |L6.1914|
0006be  dc06              BGT      |L6.1742|
0006c0  2806              CMP      r0,#6
0006c2  d272              BCS      |L6.1962|
0006c4  e8dff000          TBB      [pc,r0]
0006c8  101c2834          DCB      0x10,0x1c,0x28,0x34
0006cc  404c              DCB      0x40,0x4c
                  |L6.1742|
0006ce  2809              CMP      r0,#9
0006d0  d07a              BEQ      |L6.1992|
0006d2  dc04              BGT      |L6.1758|
0006d4  2807              CMP      r0,#7
0006d6  d05c              BEQ      |L6.1938|
0006d8  2808              CMP      r0,#8
0006da  d166              BNE      |L6.1962|
0006dc  e067              B        |L6.1966|
                  |L6.1758|
0006de  280a              CMP      r0,#0xa
0006e0  d07e              BEQ      |L6.2016|
0006e2  28ff              CMP      r0,#0xff
0006e4  d161              BNE      |L6.1962|
0006e6  e087              B        |L6.2040|
;;;487    			{
;;;488    				case ROBOT_ERROR_NUM_CLIF : 
;;;489    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0006e8  e002              B        |L6.1776|
                  |L6.1770|
0006ea  2064              MOVS     r0,#0x64
0006ec  f7fffffe          BL       vTaskDelay
                  |L6.1776|
0006f0  f7fffffe          BL       bsp_SpeakerIsBusy
0006f4  2800              CMP      r0,#0
0006f6  d1f8              BNE      |L6.1770|
;;;490    					bsp_SperkerPlay(Song11);
0006f8  200e              MOVS     r0,#0xe
0006fa  f7fffffe          BL       bsp_SperkerPlay
;;;491    					break;
0006fe  e089              B        |L6.2068|
;;;492    				case ROBOT_ERROR_NUM_LEFT_WHEEL :
;;;493    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000700  e002              B        |L6.1800|
                  |L6.1794|
000702  2064              MOVS     r0,#0x64
000704  f7fffffe          BL       vTaskDelay
                  |L6.1800|
000708  f7fffffe          BL       bsp_SpeakerIsBusy
00070c  2800              CMP      r0,#0
00070e  d1f8              BNE      |L6.1794|
;;;494    					bsp_SperkerPlay(Song11);					
000710  200e              MOVS     r0,#0xe
000712  f7fffffe          BL       bsp_SperkerPlay
;;;495    					break;	
000716  e07d              B        |L6.2068|
;;;496    				case ROBOT_ERROR_NUM_RIGHT_WHEEL :
;;;497    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000718  e002              B        |L6.1824|
                  |L6.1818|
00071a  2064              MOVS     r0,#0x64
00071c  f7fffffe          BL       vTaskDelay
                  |L6.1824|
000720  f7fffffe          BL       bsp_SpeakerIsBusy
000724  2800              CMP      r0,#0
000726  d1f8              BNE      |L6.1818|
;;;498    					bsp_SperkerPlay(Song11);					
000728  200e              MOVS     r0,#0xe
00072a  f7fffffe          BL       bsp_SperkerPlay
;;;499    					break;	
00072e  e071              B        |L6.2068|
;;;500    				case ROBOT_ERROR_NUM_ROLLER_MOTOR :
;;;501    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000730  e002              B        |L6.1848|
                  |L6.1842|
000732  2064              MOVS     r0,#0x64
000734  f7fffffe          BL       vTaskDelay
                  |L6.1848|
000738  f7fffffe          BL       bsp_SpeakerIsBusy
00073c  2800              CMP      r0,#0
00073e  d1f8              BNE      |L6.1842|
;;;502    					bsp_SperkerPlay(Song11);					
000740  200e              MOVS     r0,#0xe
000742  f7fffffe          BL       bsp_SperkerPlay
;;;503    					break;	
000746  e065              B        |L6.2068|
;;;504    				case ROBOT_ERROR_NUM_BRUSH_MOTOR :
;;;505    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000748  e002              B        |L6.1872|
                  |L6.1866|
00074a  2064              MOVS     r0,#0x64
00074c  f7fffffe          BL       vTaskDelay
                  |L6.1872|
000750  f7fffffe          BL       bsp_SpeakerIsBusy
000754  2800              CMP      r0,#0
000756  d1f8              BNE      |L6.1866|
;;;506    					bsp_SperkerPlay(Song11);
000758  200e              MOVS     r0,#0xe
00075a  f7fffffe          BL       bsp_SperkerPlay
;;;507    					break;    
00075e  e059              B        |L6.2068|
;;;508    				case ROBOT_ERROR_NUM_VACUUM_MOTOR :
;;;509    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000760  e002              B        |L6.1896|
                  |L6.1890|
000762  2064              MOVS     r0,#0x64
000764  f7fffffe          BL       vTaskDelay
                  |L6.1896|
000768  f7fffffe          BL       bsp_SpeakerIsBusy
00076c  2800              CMP      r0,#0
00076e  d1f8              BNE      |L6.1890|
;;;510    					bsp_SperkerPlay(Song11);					
000770  200e              MOVS     r0,#0xe
000772  f7fffffe          BL       bsp_SperkerPlay
;;;511    					break;	
000776  e04d              B        |L6.2068|
                  |L6.1912|
000778  e054              B        |L6.2084|
                  |L6.1914|
;;;512    				case ROBOT_ERROR_NUM_OFFLANDR :
;;;513    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
00077a  e002              B        |L6.1922|
                  |L6.1916|
00077c  2064              MOVS     r0,#0x64
00077e  f7fffffe          BL       vTaskDelay
                  |L6.1922|
000782  f7fffffe          BL       bsp_SpeakerIsBusy
000786  2800              CMP      r0,#0
000788  d1f8              BNE      |L6.1916|
;;;514    					bsp_SperkerPlay(Song11);					
00078a  200e              MOVS     r0,#0xe
00078c  f7fffffe          BL       bsp_SperkerPlay
;;;515    					break;     
000790  e040              B        |L6.2068|
                  |L6.1938|
;;;516    				case ROBOT_ERROR_NUM_OFFLANDL :
;;;517    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
000792  e002              B        |L6.1946|
                  |L6.1940|
000794  2064              MOVS     r0,#0x64
000796  f7fffffe          BL       vTaskDelay
                  |L6.1946|
00079a  f7fffffe          BL       bsp_SpeakerIsBusy
00079e  2800              CMP      r0,#0
0007a0  d1f8              BNE      |L6.1940|
;;;518    					bsp_SperkerPlay(Song11);
0007a2  200e              MOVS     r0,#0xe
0007a4  f7fffffe          BL       bsp_SperkerPlay
;;;519    					break;	
0007a8  e034              B        |L6.2068|
                  |L6.1962|
0007aa  e032              B        |L6.2066|
0007ac  e00c              B        |L6.1992|
                  |L6.1966|
;;;520    				case ROBOT_ERROR_NUM_BATTERY :
;;;521    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0007ae  e002              B        |L6.1974|
                  |L6.1968|
0007b0  2064              MOVS     r0,#0x64
0007b2  f7fffffe          BL       vTaskDelay
                  |L6.1974|
0007b6  f7fffffe          BL       bsp_SpeakerIsBusy
0007ba  2800              CMP      r0,#0
0007bc  d1f8              BNE      |L6.1968|
;;;522    					bsp_SperkerPlay(Song11);
0007be  200e              MOVS     r0,#0xe
0007c0  f7fffffe          BL       bsp_SperkerPlay
;;;523    					break;
0007c4  e026              B        |L6.2068|
0007c6  e00b              B        |L6.2016|
                  |L6.1992|
;;;524    				case ROBOT_ERROR_NUM_BUMPER :
;;;525    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0007c8  e002              B        |L6.2000|
                  |L6.1994|
0007ca  2064              MOVS     r0,#0x64
0007cc  f7fffffe          BL       vTaskDelay
                  |L6.2000|
0007d0  f7fffffe          BL       bsp_SpeakerIsBusy
0007d4  2800              CMP      r0,#0
0007d6  d1f8              BNE      |L6.1994|
;;;526    					bsp_SperkerPlay(Song11);
0007d8  200e              MOVS     r0,#0xe
0007da  f7fffffe          BL       bsp_SperkerPlay
;;;527    					break;	
0007de  e019              B        |L6.2068|
                  |L6.2016|
;;;528    				case ROBOT_ERROR_NUM_DUST_HALL :
;;;529    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0007e0  e002              B        |L6.2024|
                  |L6.2018|
0007e2  2064              MOVS     r0,#0x64
0007e4  f7fffffe          BL       vTaskDelay
                  |L6.2024|
0007e8  f7fffffe          BL       bsp_SpeakerIsBusy
0007ec  2800              CMP      r0,#0
0007ee  d1f8              BNE      |L6.2018|
;;;530    					bsp_SperkerPlay(Song11);
0007f0  200e              MOVS     r0,#0xe
0007f2  f7fffffe          BL       bsp_SperkerPlay
;;;531    					break;	
0007f6  e00d              B        |L6.2068|
                  |L6.2040|
;;;532    				case ROBOT_ERROR_NUM_DEFAULT :
;;;533    					while(bsp_SpeakerIsBusy()) vTaskDelay(100);	
0007f8  e002              B        |L6.2048|
                  |L6.2042|
0007fa  2064              MOVS     r0,#0x64
0007fc  f7fffffe          BL       vTaskDelay
                  |L6.2048|
000800  f7fffffe          BL       bsp_SpeakerIsBusy
000804  2800              CMP      r0,#0
000806  d1f8              BNE      |L6.2042|
;;;534    					bsp_SperkerPlay(Song11);
000808  200e              MOVS     r0,#0xe
00080a  f7fffffe          BL       bsp_SperkerPlay
;;;535    					break;	
00080e  e001              B        |L6.2068|
                  |L6.2064|
000810  e024              B        |L6.2140|
                  |L6.2066|
;;;536    				default:
;;;537    					break;
000812  bf00              NOP      
                  |L6.2068|
000814  bf00              NOP                            ;491
;;;538    				
;;;539    			}
;;;540    			robot_error_num = ROBOT_ERROR_NUM_DEFAULT;
000816  20ff              MOVS     r0,#0xff
000818  4914              LDR      r1,|L6.2156|
00081a  7008              STRB     r0,[r1,#0]
;;;541    			cur_robot_state = ROBOT_STATE_STANDBY;
00081c  2001              MOVS     r0,#1
00081e  4912              LDR      r1,|L6.2152|
000820  7008              STRB     r0,[r1,#0]
000822  e017              B        |L6.2132|
                  |L6.2084|
;;;542    		}
;;;543    //*****************************************************************************************************//
;;;544    		else if(cur_robot_state == ROBOT_STATE_CHARGING)
000824  4810              LDR      r0,|L6.2152|
000826  7800              LDRB     r0,[r0,#0]  ; cur_robot_state
000828  2804              CMP      r0,#4
00082a  d113              BNE      |L6.2132|
;;;545    		{
;;;546    			bsp_MotorCleanSetPWM(MotorRollingBrush, CW , 0);
00082c  2200              MOVS     r2,#0
00082e  4611              MOV      r1,r2
000830  4610              MOV      r0,r2
000832  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;547    			bsp_MotorCleanSetPWM(MotorSideBrush, CW , 0);
000836  2200              MOVS     r2,#0
000838  4611              MOV      r1,r2
00083a  2001              MOVS     r0,#1
00083c  f7fffffe          BL       bsp_MotorCleanSetPWM
;;;548    			bsp_StopVacuum();
000840  f7fffffe          BL       bsp_StopVacuum
;;;549    			bsp_SetMotorSpeed(MotorLeft,0);
000844  2100              MOVS     r1,#0
000846  4608              MOV      r0,r1
000848  f7fffffe          BL       bsp_SetMotorSpeed
;;;550    		    bsp_SetMotorSpeed(MotorRight,0);
00084c  2100              MOVS     r1,#0
00084e  2001              MOVS     r0,#1
000850  f7fffffe          BL       bsp_SetMotorSpeed
                  |L6.2132|
;;;551    			//printf("AutogoChargeStation!!!! \n");	
;;;552    		}
;;;553    		
;;;554    		vTaskDelay(50);	
000854  2032              MOVS     r0,#0x32
000856  f7fffffe          BL       vTaskDelay
00085a  bf00              NOP                            ;277
                  |L6.2140|
00085c  f7ffbbe6          B        |L6.44|
;;;555    	}
;;;556    }
;;;557    
                          ENDP

                  |L6.2144|
                          DCD      0x44bb8000
                  |L6.2148|
                          DCD      robot_work_way
                  |L6.2152|
                          DCD      cur_robot_state
                  |L6.2156|
                          DCD      robot_error_num

                          AREA ||i.vTaskPerception||, CODE, READONLY, ALIGN=1

                  vTaskPerception PROC
;;;597    */
;;;598    static void vTaskPerception(void *pvParameters)   //
000000  f7fffffe          BL       bsp_DetectStart
;;;599    {
;;;600    	/*开启红外对管轮询扫描*/
;;;601    	bsp_DetectStart(); 
;;;602    	/*开启寻找充电桩*/
;;;603    #if 0
;;;604    	bsp_StartSearchChargingPile();
;;;605    #endif
;;;606    	bsp_StartUpdatePos();
000004  f7fffffe          BL       bsp_StartUpdatePos
;;;607    	
;;;608    	while(1)
000008  e00c              B        |L7.36|
                  |L7.10|
;;;609        {
;;;610            bsp_DetectAct();  /*红外对管轮询扫描*/
00000a  f7fffffe          BL       bsp_DetectAct
;;;611    		bsp_DetectDeal(); /*红外对管扫描结果处理*/
00000e  f7fffffe          BL       bsp_DetectDeal
;;;612    
;;;613    		/*四个红外接收管*/
;;;614    #if 0 
;;;615    		bsp_GetCapCnt(CapCH1);
;;;616    		bsp_GetCapCnt(CapCH2);
;;;617    		bsp_GetCapCnt(CapCH3);
;;;618    		bsp_GetCapCnt(CapCH4);
;;;619    #endif
;;;620    		/*寻找充电桩*/
;;;621    		bsp_SearchChargingPileAct();
000012  f7fffffe          BL       bsp_SearchChargingPileAct
;;;622    		/*更新坐标*/
;;;623    		bsp_PositionUpdate();
000016  f7fffffe          BL       bsp_PositionUpdate
;;;624    		bsp_KeyScan();
00001a  f7fffffe          BL       bsp_KeyScan
;;;625            vTaskDelay(1);	
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       vTaskDelay
                  |L7.36|
000024  e7f1              B        |L7.10|
;;;626    	}		
;;;627    
;;;628    }
;;;629    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskDecision
                          DCD      0x00000000
                  xHandleTaskControl
                          DCD      0x00000000
                  xHandleTaskPerception
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  home_key_down_flag
000010  00                DCB      0x00
                  power_key_down_flag
000011  00                DCB      0x00
                  charge_key_down_flag
000012  00                DCB      0x00
                  clean_key_down_flag
000013  00                DCB      0x00
                  last_robot_state
000014  ff                DCB      0xff
                  cur_robot_state
000015  ff                DCB      0xff
                  robot_work_way
000016  ff                DCB      0xff
                  robot_error_num
000017  ff                DCB      0xff

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
