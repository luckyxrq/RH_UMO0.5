; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;261    */
;;;262    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264    	/* 创建互斥信号量 */
;;;265        xMutex = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;266    	
;;;267    	if(xMutex == NULL)
;;;268        {
;;;269            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;270        }
;;;271    }
00000c  bd10              POP      {r4,pc}
;;;272    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      xMutex

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;220    */
;;;221    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;222    {
;;;223        xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a1b              LDR      r2,|L2.116|
000006  2301              MOVS     r3,#1
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a118              ADR      r1,|L2.120|
000018  481a              LDR      r0,|L2.132|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;224                     "vTaskUserIF",     	/* 任务名    */
;;;225                     512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;226                     NULL,              	/* 任务参数  */
;;;227                     1,                 	/* 任务优先级*/
;;;228                     &xHandleTaskUserIF );  /* 任务句柄  */
;;;229    	
;;;230    	
;;;231    	xTaskCreate( vTaskLED,    		/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a19              LDR      r2,|L2.136|
000022  2302              MOVS     r3,#2
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a116              ADR      r1,|L2.140|
000034  4818              LDR      r0,|L2.152|
000036  f7fffffe          BL       xTaskGenericCreate
;;;232                     "vTaskLED",  		/* 任务名    */
;;;233                     512,         		/* stack大小，单位word，也就是4字节 */
;;;234                     NULL,        		/* 任务参数  */
;;;235                     2,           		/* 任务优先级*/
;;;236                     &xHandleTaskLED ); /* 任务句柄  */
;;;237    	
;;;238    	xTaskCreate( vTaskMsgPro,     		/* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a17              LDR      r2,|L2.156|
00003e  2303              MOVS     r3,#3
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  f44f7200          MOV      r2,#0x200
00004e  a114              ADR      r1,|L2.160|
000050  4816              LDR      r0,|L2.172|
000052  f7fffffe          BL       xTaskGenericCreate
;;;239                     "vTaskMsgPro",   		/* 任务名    */
;;;240                     512,             		/* 任务栈大小，单位word，也就是4字节 */
;;;241                     NULL,           		/* 任务参数  */
;;;242                     3,               		/* 任务优先级*/
;;;243                     &xHandleTaskMsgPro );  /* 任务句柄  */
;;;244    	
;;;245    	
;;;246    	xTaskCreate( vTaskStart,     		/* 任务函数  */
000056  2000              MOVS     r0,#0
000058  4a15              LDR      r2,|L2.176|
00005a  2304              MOVS     r3,#4
00005c  e9cd2001          STRD     r2,r0,[sp,#4]
000060  9300              STR      r3,[sp,#0]
000062  9003              STR      r0,[sp,#0xc]
000064  4603              MOV      r3,r0
000066  f44f7200          MOV      r2,#0x200
00006a  a112              ADR      r1,|L2.180|
00006c  4814              LDR      r0,|L2.192|
00006e  f7fffffe          BL       xTaskGenericCreate
;;;247                     "vTaskStart",   		/* 任务名    */
;;;248                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;249                     NULL,           		/* 任务参数  */
;;;250                     4,              		/* 任务优先级*/
;;;251                     &xHandleTaskStart );   /* 任务句柄  */
;;;252    }
000072  bd1f              POP      {r0-r4,pc}
;;;253    
                          ENDP

                  |L2.116|
                          DCD      xHandleTaskUserIF
                  |L2.120|
000078  76546173          DCB      "vTaskUserIF",0
00007c  6b557365
000080  72494600
                  |L2.132|
                          DCD      vTaskTaskUserIF
                  |L2.136|
                          DCD      xHandleTaskLED
                  |L2.140|
00008c  76546173          DCB      "vTaskLED",0
000090  6b4c4544
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L2.152|
                          DCD      vTaskLED
                  |L2.156|
                          DCD      xHandleTaskMsgPro
                  |L2.160|
0000a0  76546173          DCB      "vTaskMsgPro",0
0000a4  6b4d7367
0000a8  50726f00
                  |L2.172|
                          DCD      vTaskMsgPro
                  |L2.176|
                          DCD      xHandleTaskStart
                  |L2.180|
0000b4  76546173          DCB      "vTaskStart",0
0000b8  6b537461
0000bc  727400  
0000bf  00                DCB      0
                  |L2.192|
                          DCD      vTaskStart

                          AREA ||i.App_Printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  App_Printf PROC
;;;281    */
;;;282    void  App_Printf(char *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;283    {
000002  b500              PUSH     {lr}
000004  b0b5              SUB      sp,sp,#0xd4
;;;284        char  buf_str[200 + 1];
;;;285        va_list   v_args;
;;;286    
;;;287    
;;;288        va_start(v_args, format);
000006  a837              ADD      r0,sp,#0xdc
000008  9001              STR      r0,[sp,#4]
;;;289       (void)vsnprintf((char       *)&buf_str[0],
00000a  21c9              MOVS     r1,#0xc9
00000c  a802              ADD      r0,sp,#8
00000e  9b01              LDR      r3,[sp,#4]
000010  9a36              LDR      r2,[sp,#0xd8]
000012  f7fffffe          BL       __c89vsnprintf
;;;290                       (size_t      ) sizeof(buf_str),
;;;291                       (char const *) format,
;;;292                                      v_args);
;;;293        va_end(v_args);
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;294    
;;;295    	/* 互斥信号量 */
;;;296    	xSemaphoreTake(xMutex, portMAX_DELAY);
00001a  2300              MOVS     r3,#0
00001c  1e42              SUBS     r2,r0,#1
00001e  4619              MOV      r1,r3
000020  4808              LDR      r0,|L3.68|
000022  6800              LDR      r0,[r0,#0]  ; xMutex
000024  f7fffffe          BL       xQueueGenericReceive
;;;297    
;;;298        printf("%s", buf_str);
000028  a902              ADD      r1,sp,#8
00002a  a007              ADR      r0,|L3.72|
00002c  f7fffffe          BL       __2printf
;;;299    
;;;300       	xSemaphoreGive(xMutex);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  4619              MOV      r1,r3
000036  4803              LDR      r0,|L3.68|
000038  6800              LDR      r0,[r0,#0]  ; xMutex
00003a  f7fffffe          BL       xQueueGenericSend
;;;301    }
00003e  b035              ADD      sp,sp,#0xd4
000040  f85dfb14          LDR      pc,[sp],#0x14
;;;302    
                          ENDP

                  |L3.68|
                          DCD      xMutex
                  |L3.72|
000048  257300            DCB      "%s",0
00004b  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;37     */
;;;38     int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;39     {
;;;40     	/* 
;;;41     	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;42     	  这样做的好处是：
;;;43     	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;44     	  2. 保证系统正常启动，不受别的中断影响。
;;;45     	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;46     	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;47     	  和cpsie i是等效的。
;;;48          */
;;;49     	__set_PRIMASK(1);  
;;;50     	
;;;51     	/* 硬件初始化 */
;;;52     	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;53     	
;;;54     	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;55     		  目中不要使用，因为这个功能比较影响系统实时性。
;;;56     	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;57     	*/
;;;58     	vSetupSysInfoTest();
00000c  f7fffffe          BL       vSetupSysInfoTest
;;;59     	
;;;60     	/* 创建任务 */
;;;61     	AppTaskCreate();
000010  f7fffffe          BL       AppTaskCreate
;;;62     
;;;63     	/* 创建任务通信机制 */
;;;64     	AppObjCreate();
000014  f7fffffe          BL       AppObjCreate
;;;65     	
;;;66         /* 启动调度，开始执行任务 */
;;;67         vTaskStartScheduler();
000018  f7fffffe          BL       vTaskStartScheduler
;;;68     
;;;69     	/* 
;;;70     	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;71     	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;72     	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;73     	*/
;;;74     	while(1);
00001c  bf00              NOP      
                  |L4.30|
00001e  e7fe              B        |L4.30|
;;;75     }
;;;76     
                          ENDP


                          AREA ||i.vTaskLED||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLED PROC
;;;141    */
;;;142    static void vTaskLED(void *pvParameters)
000000  e02b              B        |L5.90|
                  |L5.2|
;;;143    {
;;;144    	static uint32_t index = 0 ;
;;;145        while(1)
;;;146        {
;;;147    		bsp_IWDG_Feed(); /* 喂狗 */
000002  f7fffffe          BL       bsp_IWDG_Feed
;;;148    		
;;;149    		
;;;150    		{
;;;151    			Collision collision = bsp_CollisionScan();
000006  f7fffffe          BL       bsp_CollisionScan
00000a  4604              MOV      r4,r0
;;;152    			if(collision == CollisionLeft)
00000c  b94c              CBNZ     r4,|L5.34|
;;;153    			{
;;;154    				DEBUG("%06d左边碰撞\r\n",index++);
00000e  4813              LDR      r0,|L5.92|
000010  6801              LDR      r1,[r0,#0]  ; index
000012  6800              LDR      r0,[r0,#0]  ; index
000014  1c40              ADDS     r0,r0,#1
000016  4b11              LDR      r3,|L5.92|
000018  6018              STR      r0,[r3,#0]  ; index
00001a  a011              ADR      r0,|L5.96|
00001c  f7fffffe          BL       __2printf
000020  e016              B        |L5.80|
                  |L5.34|
;;;155    			}
;;;156    			else if(collision == CollisionRight)
000022  2c01              CMP      r4,#1
000024  d109              BNE      |L5.58|
;;;157    			{
;;;158    				DEBUG("%06d右边碰撞\r\n",index++);
000026  480d              LDR      r0,|L5.92|
000028  6801              LDR      r1,[r0,#0]  ; index
00002a  6800              LDR      r0,[r0,#0]  ; index
00002c  1c40              ADDS     r0,r0,#1
00002e  4b0b              LDR      r3,|L5.92|
000030  6018              STR      r0,[r3,#0]  ; index
000032  a00f              ADR      r0,|L5.112|
000034  f7fffffe          BL       __2printf
000038  e00a              B        |L5.80|
                  |L5.58|
;;;159    			}
;;;160    			else if(collision == CollisionAll)
00003a  2c02              CMP      r4,#2
00003c  d108              BNE      |L5.80|
;;;161    			{
;;;162    				DEBUG("%06d两边碰撞\r\n",index++);
00003e  4807              LDR      r0,|L5.92|
000040  6801              LDR      r1,[r0,#0]  ; index
000042  6800              LDR      r0,[r0,#0]  ; index
000044  1c40              ADDS     r0,r0,#1
000046  4b05              LDR      r3,|L5.92|
000048  6018              STR      r0,[r3,#0]  ; index
00004a  a00d              ADR      r0,|L5.128|
00004c  f7fffffe          BL       __2printf
                  |L5.80|
;;;163    			}
;;;164    			
;;;165    		}
;;;166    		
;;;167    		bsp_PidControlAct();
000050  f7fffffe          BL       bsp_PidControlAct
;;;168    		
;;;169    		vTaskDelay(100);
000054  2064              MOVS     r0,#0x64
000056  f7fffffe          BL       vTaskDelay
                  |L5.90|
00005a  e7d2              B        |L5.2|
;;;170        }
;;;171    }
;;;172    
                          ENDP

                  |L5.92|
                          DCD      index
                  |L5.96|
000060  25303664          DCB      "%06d",215,243,177,223,197,246,215,178,"\r\n",0
000064  d7f3b1df
000068  c5f6d7b2
00006c  0d0a00  
00006f  00                DCB      0
                  |L5.112|
000070  25303664          DCB      "%06d",211,210,177,223,197,246,215,178,"\r\n",0
000074  d3d2b1df
000078  c5f6d7b2
00007c  0d0a00  
00007f  00                DCB      0
                  |L5.128|
000080  25303664          DCB      "%06d",193,189,177,223,197,246,215,178,"\r\n",0
000084  c1bdb1df
000088  c5f6d7b2
00008c  0d0a00  
00008f  00                DCB      0

                          AREA ||i.vTaskMsgPro||, CODE, READONLY, ALIGN=1

                  vTaskMsgPro PROC
;;;181    */
;;;182    static void vTaskMsgPro(void *pvParameters)
000000  e002              B        |L6.8|
                  |L6.2|
;;;183    {
;;;184    	//bsp_StartRunStable();
;;;185        while(1)
;;;186        {
;;;187    		//bsp_RunStableAct(); /* 平滑启动状态机 */
;;;188    		vTaskDelay(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       vTaskDelay
                  |L6.8|
000008  e7fb              B        |L6.2|
;;;189        }
;;;190    }
;;;191    
                          ENDP


                          AREA ||i.vTaskStart||, CODE, READONLY, ALIGN=1

                  vTaskStart PROC
;;;200    */
;;;201    static void vTaskStart(void *pvParameters)
000000  f7fffffe          BL       bsp_DetectStart
;;;202    {
;;;203    	bsp_DetectStart(); /*开启红外对管轮询扫描*/
;;;204        while(1)
000004  e006              B        |L7.20|
                  |L7.6|
;;;205        {
;;;206    		bsp_DetectAct();  /*红外对管轮询扫描*/
000006  f7fffffe          BL       bsp_DetectAct
;;;207    		bsp_DetectDeal(); /*红外对管扫描结果处理*/
00000a  f7fffffe          BL       bsp_DetectDeal
;;;208    		//bsp_EdgewiseAct();/*沿边*/
;;;209            vTaskDelay(1);
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       vTaskDelay
                  |L7.20|
000014  e7f7              B        |L7.6|
;;;210        }
;;;211    }
;;;212    				
                          ENDP


                          AREA ||i.vTaskTaskUserIF||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  vTaskTaskUserIF PROC
;;;85     */
;;;86     static void vTaskTaskUserIF(void *pvParameters)
000000  e024              B        |L8.76|
                  |L8.2|
;;;87     {
;;;88     #if 0 /* 左前  右前 */
;;;89     	bsp_SetMotorPWM(MotorLeft,Forward,6000);
;;;90     	bsp_SetMotorPWM(MotorRight,Forward,6000);
;;;91     #endif
;;;92     
;;;93     #if 0 /* 左后  右后 */
;;;94     	bsp_SetMotorPWM(MotorLeft,Backward,6000);
;;;95     	bsp_SetMotorPWM(MotorRight,Backward,6000);
;;;96     #endif
;;;97     	
;;;98     #if 0 /* 左前  右后 */
;;;99     	bsp_SetMotorPWM(MotorLeft,Forward,6000);
;;;100    	bsp_SetMotorPWM(MotorRight,Backward,6000);
;;;101    #endif	
;;;102    	
;;;103    #if 0 /* 左后  右前 */
;;;104    	bsp_SetMotorPWM(MotorLeft,Backward,6000);
;;;105    	bsp_SetMotorPWM(MotorRight,Forward,6000);
;;;106    #endif	
;;;107    	
;;;108    #if 0 /* 给定初始角度和转动角度，得到目的角度 */
;;;109    	printf("des angle:%.2F\r\n",bsp_AngleAdd(-100,120));
;;;110    #endif	
;;;111    
;;;112        while(1)
;;;113        {
;;;114    		#if 1
;;;115    		DEBUG("左轮速度:%.2F\r\n",bsp_EncoderGetSpeed(EncoderLeft));
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_EncoderGetSpeed
000008  4606              MOV      r6,r0
00000a  f7fffffe          BL       __aeabi_f2d
00000e  4604              MOV      r4,r0
000010  4622              MOV      r2,r4
000012  460b              MOV      r3,r1
000014  a00e              ADR      r0,|L8.80|
000016  f7fffffe          BL       __2printf
;;;116    		DEBUG("右轮速度:%.2F\r\n",bsp_EncoderGetSpeed(EncoderRight));
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       bsp_EncoderGetSpeed
000020  4606              MOV      r6,r0
000022  f7fffffe          BL       __aeabi_f2d
000026  4604              MOV      r4,r0
000028  4622              MOV      r2,r4
00002a  460b              MOV      r3,r1
00002c  a00c              ADR      r0,|L8.96|
00002e  f7fffffe          BL       __2printf
;;;117    		#endif
;;;118    		
;;;119    		
;;;120    		#if 0
;;;121    		DEBUG("角度：%.2F\r\n",bsp_AngleRead());
;;;122    		#endif
;;;123    		
;;;124    		bsp_LedToggle(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       bsp_LedToggle
;;;125    		bsp_LedToggle(2);
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       bsp_LedToggle
;;;126    		bsp_LedToggle(3);
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       bsp_LedToggle
;;;127    		
;;;128    		vTaskDelay(500);
000044  f44f70fa          MOV      r0,#0x1f4
000048  f7fffffe          BL       vTaskDelay
                  |L8.76|
00004c  e7d9              B        |L8.2|
;;;129    		
;;;130    	}
;;;131    }
;;;132    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
000050  d7f3c2d6          DCB      215,243,194,214,203,217,182,200,":%.2F\r\n",0
000054  cbd9b6c8
000058  3a252e32
00005c  460d0a00
                  |L8.96|
000060  d3d2c2d6          DCB      211,210,194,214,203,217,182,200,":%.2F\r\n",0
000064  cbd9b6c8
000068  3a252e32
00006c  460d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleTaskLED
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  index
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
