; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_angle.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_angle.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\BAK\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_angle.crf ..\..\User\app\src\bsp_Angle.c]
                          THUMB

                          AREA ||i.bsp_AngleAdd||, CODE, READONLY, ALIGN=2

                  bsp_AngleAdd PROC
;;;240    */
;;;241    float bsp_AngleAdd(float angle1 , float angle2)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;242    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;243    	float ret = 0.0F;
000008  2400              MOVS     r4,#0
;;;244    	
;;;245    	ret = angle1 + angle2;
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       __aeabi_fadd
000012  4604              MOV      r4,r0
;;;246    	
;;;247    	if(angle1>=0.0F)
000014  2100              MOVS     r1,#0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       __aeabi_cfrcmple
00001c  d81e              BHI      |L1.92|
;;;248    	{
;;;249    		if(ret >= 0.0F && ret <= 180.0F)
00001e  2100              MOVS     r1,#0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       __aeabi_cfrcmple
000026  d807              BHI      |L1.56|
000028  491b              LDR      r1,|L1.152|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       __aeabi_cfcmple
000030  d802              BHI      |L1.56|
;;;250    		{
;;;251    			return ret ;
000032  4620              MOV      r0,r4
                  |L1.52|
;;;252    		}
;;;253    		else if(ret > 180.0F)
;;;254    		{
;;;255    			return -(180 - (ret-180.0F));
;;;256    		}
;;;257    		else
;;;258    		{
;;;259    			return ret ;
;;;260    		}
;;;261    	}
;;;262    	else
;;;263    	{
;;;264    		if(ret < 0.0F && ret > -180.0F)
;;;265    		{
;;;266    			return ret ;
;;;267    		}
;;;268    		else if(ret < -180.0F)
;;;269    		{
;;;270    			return (180-(-ret-180));
;;;271    		}
;;;272    		else
;;;273    		{
;;;274    			return ret ;
;;;275    		}
;;;276    	}
;;;277    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L1.56|
000038  4917              LDR      r1,|L1.152|
00003a  4620              MOV      r0,r4                 ;253
00003c  f7fffffe          BL       __aeabi_cfrcmple
000040  d20a              BCS      |L1.88|
000042  4915              LDR      r1,|L1.152|
000044  4620              MOV      r0,r4                 ;255
000046  f7fffffe          BL       __aeabi_fsub
00004a  4607              MOV      r7,r0                 ;255
00004c  4912              LDR      r1,|L1.152|
00004e  f7fffffe          BL       __aeabi_frsub
000052  f0804000          EOR      r0,r0,#0x80000000     ;255
000056  e7ed              B        |L1.52|
                  |L1.88|
000058  4620              MOV      r0,r4                 ;259
00005a  e7eb              B        |L1.52|
                  |L1.92|
00005c  2100              MOVS     r1,#0                 ;264
00005e  4620              MOV      r0,r4                 ;264
000060  f7fffffe          BL       __aeabi_cfcmple
000064  d206              BCS      |L1.116|
000066  490d              LDR      r1,|L1.156|
000068  4620              MOV      r0,r4                 ;264
00006a  f7fffffe          BL       __aeabi_cfrcmple
00006e  d201              BCS      |L1.116|
000070  4620              MOV      r0,r4                 ;266
000072  e7df              B        |L1.52|
                  |L1.116|
000074  4909              LDR      r1,|L1.156|
000076  4620              MOV      r0,r4                 ;268
000078  f7fffffe          BL       __aeabi_cfcmple
00007c  d20a              BCS      |L1.148|
00007e  f0844800          EOR      r8,r4,#0x80000000     ;270
000082  4905              LDR      r1,|L1.152|
000084  4640              MOV      r0,r8                 ;270
000086  f7fffffe          BL       __aeabi_fsub
00008a  4607              MOV      r7,r0                 ;270
00008c  4902              LDR      r1,|L1.152|
00008e  f7fffffe          BL       __aeabi_frsub
000092  e7cf              B        |L1.52|
                  |L1.148|
000094  4620              MOV      r0,r4                 ;274
000096  e7cd              B        |L1.52|
                          ENDP

                  |L1.152|
                          DCD      0x43340000
                  |L1.156|
                          DCD      0xc3340000

                          AREA ||i.bsp_AngleAnalyzeApp||, CODE, READONLY, ALIGN=2

                  bsp_AngleAnalyzeApp PROC
;;;222    */
;;;223    static void bsp_AngleAnalyzeApp(void)
000000  b570              PUSH     {r4-r6,lr}
;;;224    {	
;;;225    	int16_t ret = angle.buf[5] << 8 | angle.buf[4];
000002  480a              LDR      r0,|L2.44|
000004  7a01              LDRB     r1,[r0,#8]
000006  7a40              LDRB     r0,[r0,#9]
000008  ea412000          ORR      r0,r1,r0,LSL #8
00000c  b204              SXTH     r4,r0
;;;226    	ret = -ret ;
00000e  4260              RSBS     r0,r4,#0
000010  b204              SXTH     r4,r0
;;;227    	angle.angle = ret / 100.0F;
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       __aeabi_i2f
000018  4605              MOV      r5,r0
00001a  4905              LDR      r1,|L2.48|
00001c  f7fffffe          BL       __aeabi_fdiv
000020  4902              LDR      r1,|L2.44|
000022  6148              STR      r0,[r1,#0x14]  ; angle
;;;228    	angle.angleRaw = ret;
000024  4608              MOV      r0,r1
000026  8304              STRH     r4,[r0,#0x18]
;;;229    }
000028  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      angle
                  |L2.48|
                          DCD      0x42c80000

                          AREA ||i.bsp_AngleCheck||, CODE, READONLY, ALIGN=2

                  bsp_AngleCheck PROC
;;;190    */
;;;191    static bool bsp_AngleCheck(void)
000000  4823              LDR      r0,|L3.144|
;;;192    {
;;;193    	angleFrame.HEAD     = angle.buf[1] << 8  | angle.buf[0];
000002  7901              LDRB     r1,[r0,#4]  ; angle
000004  7940              LDRB     r0,[r0,#5]
000006  ea412000          ORR      r0,r1,r0,LSL #8
00000a  b200              SXTH     r0,r0
00000c  4921              LDR      r1,|L3.148|
00000e  8008              STRH     r0,[r1,#0]
;;;194    	angleFrame.RATE     = angle.buf[3] << 8  | angle.buf[2];
000010  481f              LDR      r0,|L3.144|
000012  7981              LDRB     r1,[r0,#6]
000014  79c0              LDRB     r0,[r0,#7]
000016  ea412000          ORR      r0,r1,r0,LSL #8
00001a  b200              SXTH     r0,r0
00001c  491d              LDR      r1,|L3.148|
00001e  8048              STRH     r0,[r1,#2]
;;;195    	angleFrame.ANGLE    = angle.buf[5] << 8  | angle.buf[4];
000020  481b              LDR      r0,|L3.144|
000022  7a01              LDRB     r1,[r0,#8]
000024  7a40              LDRB     r0,[r0,#9]
000026  ea412000          ORR      r0,r1,r0,LSL #8
00002a  b200              SXTH     r0,r0
00002c  4919              LDR      r1,|L3.148|
00002e  8088              STRH     r0,[r1,#4]
;;;196    	angleFrame.SUM1     = angle.buf[7] << 8  | angle.buf[6];
000030  4817              LDR      r0,|L3.144|
000032  7a81              LDRB     r1,[r0,#0xa]
000034  7ac0              LDRB     r0,[r0,#0xb]
000036  ea412000          ORR      r0,r1,r0,LSL #8
00003a  b200              SXTH     r0,r0
00003c  4915              LDR      r1,|L3.148|
00003e  80c8              STRH     r0,[r1,#6]
;;;197    	angleFrame.RESERVE  = angle.buf[9] << 8  | angle.buf[8];
000040  4813              LDR      r0,|L3.144|
000042  7b01              LDRB     r1,[r0,#0xc]
000044  7b40              LDRB     r0,[r0,#0xd]
000046  ea412000          ORR      r0,r1,r0,LSL #8
00004a  b200              SXTH     r0,r0
00004c  4911              LDR      r1,|L3.148|
00004e  8108              STRH     r0,[r1,#8]
;;;198    	angleFrame.SUM2     = angle.buf[10];
000050  480f              LDR      r0,|L3.144|
000052  7b80              LDRB     r0,[r0,#0xe]
000054  b240              SXTB     r0,r0
000056  7288              STRB     r0,[r1,#0xa]
;;;199    	angleFrame.END      = angle.buf[12] << 8 | angle.buf[11];
000058  480d              LDR      r0,|L3.144|
00005a  7bc1              LDRB     r1,[r0,#0xf]
00005c  7c00              LDRB     r0,[r0,#0x10]
00005e  ea412000          ORR      r0,r1,r0,LSL #8
000062  b200              SXTH     r0,r0
000064  490b              LDR      r1,|L3.148|
000066  8188              STRH     r0,[r1,#0xc]
;;;200    	
;;;201    	
;;;202    	/*Ğ£ÑéSUM1*/
;;;203    	if((angleFrame.HEAD+angleFrame.RATE+angleFrame.ANGLE) != angleFrame.SUM1)
000068  4608              MOV      r0,r1
00006a  f9b00000          LDRSH    r0,[r0,#0]  ; angleFrame
00006e  f9b11002          LDRSH    r1,[r1,#2]  ; angleFrame
000072  4408              ADD      r0,r0,r1
000074  4907              LDR      r1,|L3.148|
000076  f9b11004          LDRSH    r1,[r1,#4]  ; angleFrame
00007a  4408              ADD      r0,r0,r1
00007c  4905              LDR      r1,|L3.148|
00007e  f9b11006          LDRSH    r1,[r1,#6]  ; angleFrame
000082  4288              CMP      r0,r1
000084  d001              BEQ      |L3.138|
;;;204    	{
;;;205    		return false;
000086  2000              MOVS     r0,#0
                  |L3.136|
;;;206    	}
;;;207    
;;;208    	#if 0
;;;209    	DEBUG("%X   %X\r\n",angleFrame.HEAD+angleFrame.RATE+angleFrame.ANGLE,angleFrame.SUM1);
;;;210    	#endif
;;;211    	
;;;212    	return true;
;;;213    }	
000088  4770              BX       lr
                  |L3.138|
00008a  2001              MOVS     r0,#1                 ;212
00008c  e7fc              B        |L3.136|
;;;214    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      angle
                  |L3.148|
                          DCD      angleFrame

                          AREA ||i.bsp_AnglePoll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  bsp_AnglePoll PROC
;;;151    */
;;;152    static void bsp_AnglePoll(void)
000000  b510              PUSH     {r4,lr}
;;;153    {	
;;;154    	if (angle.timeout == false)	/* ³¬¹ı3.5¸ö×Ö·ûÊ±¼äºóÖ´ĞĞMODH_RxTimeOut()º¯Êı¡£ */
000002  4810              LDR      r0,|L4.68|
000004  7800              LDRB     r0,[r0,#0]  ; angle
000006  b900              CBNZ     r0,|L4.10|
                  |L4.8|
;;;155    	{
;;;156    		/* Ã»ÓĞ³¬Ê±£¬¼ÌĞø½ÓÊÕ¡£²»ÒªÇåÁã  */
;;;157    		return ;
;;;158    	}
;;;159    
;;;160    	/* ³¬Ê±ÇåÁã  */
;;;161    	angle.timeout = false;
;;;162    
;;;163    	if (angle.rxCount != 13)
;;;164    	{
;;;165    		WARNING("angle len err:%d\r\n",angle.rxCount);
;;;166    		goto err_ret;
;;;167    	}
;;;168    	
;;;169    	/* ¼ÆËãSUMĞ£ÑéºÍ */
;;;170    	if(bsp_AngleCheck() == false)
;;;171    	{
;;;172    		WARNING("angle chk err:\r\n");
;;;173    		goto err_ret;
;;;174    	}
;;;175    	
;;;176    	/* ·ÖÎöÓ¦ÓÃ²ãĞ­Òé */
;;;177    	bsp_AngleAnalyzeApp();
;;;178    
;;;179    err_ret:
;;;180    	angle.rxCount = 0;	/* ±ØĞëÇåÁã¼ÆÊıÆ÷£¬·½±ãÏÂ´ÎÖ¡Í¬²½ */
;;;181    }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  2000              MOVS     r0,#0                 ;161
00000c  490d              LDR      r1,|L4.68|
00000e  7008              STRB     r0,[r1,#0]            ;161
000010  4608              MOV      r0,r1                 ;163
000012  8840              LDRH     r0,[r0,#2]            ;163  ; angle
000014  280d              CMP      r0,#0xd               ;163
000016  d005              BEQ      |L4.36|
000018  4608              MOV      r0,r1                 ;165
00001a  8841              LDRH     r1,[r0,#2]            ;165  ; angle
00001c  a00a              ADR      r0,|L4.72|
00001e  f7fffffe          BL       __2printf
000022  e009              B        |L4.56|
                  |L4.36|
000024  f7fffffe          BL       bsp_AngleCheck
000028  b918              CBNZ     r0,|L4.50|
00002a  a00c              ADR      r0,|L4.92|
00002c  f7fffffe          BL       __2printf
000030  e002              B        |L4.56|
                  |L4.50|
000032  f7fffffe          BL       bsp_AngleAnalyzeApp
000036  bf00              NOP                            ;179
                  |L4.56|
000038  2000              MOVS     r0,#0                 ;180
00003a  4902              LDR      r1,|L4.68|
00003c  8048              STRH     r0,[r1,#2]            ;180
00003e  bf00              NOP      
000040  e7e2              B        |L4.8|
;;;182    
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      angle
                  |L4.72|
000048  616e676c          DCB      "angle len err:%d\r\n",0
00004c  65206c65
000050  6e206572
000054  723a2564
000058  0d0a00  
00005b  00                DCB      0
                  |L4.92|
00005c  616e676c          DCB      "angle chk err:\r\n",0
000060  65206368
000064  6b206572
000068  723a0d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.bsp_AngleRead||, CODE, READONLY, ALIGN=2

                  bsp_AngleRead PROC
;;;72     */
;;;73     float bsp_AngleRead(void)
000000  4801              LDR      r0,|L5.8|
;;;74     {
;;;75     	return angle.angle;
000002  6940              LDR      r0,[r0,#0x14]  ; angle
;;;76     }
000004  4770              BX       lr
;;;77     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      angle

                          AREA ||i.bsp_AngleReadRaw||, CODE, READONLY, ALIGN=2

                  bsp_AngleReadRaw PROC
;;;86     */
;;;87     int16_t bsp_AngleReadRaw(void)
000000  4801              LDR      r0,|L6.8|
;;;88     {
;;;89     	return angle.angleRaw;
000002  f9b00018          LDRSH    r0,[r0,#0x18]  ; angle
;;;90     }
000006  4770              BX       lr
;;;91     
                          ENDP

                  |L6.8|
                          DCD      angle

                          AREA ||i.bsp_AngleRevByte||, CODE, READONLY, ALIGN=2

                  bsp_AngleRevByte PROC
;;;100    */
;;;101    void bsp_AngleRevByte(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
000002  4604              MOV      r4,r0
;;;103    	/*
;;;104    		3.5¸ö×Ö·ûµÄÊ±¼ä¼ä¸ô£¬Ö»ÊÇÓÃÔÚRTUÄ£Ê½ÏÂÃæ£¬ÒòÎªRTUÄ£Ê½Ã»ÓĞ¿ªÊ¼·ûºÍ½áÊø·û£¬
;;;105    		Á½¸öÊı¾İ°üÖ®¼äÖ»ÄÜ¿¿Ê±¼ä¼ä¸ôÀ´Çø·Ö£¬Modbus¶¨ÒåÔÚ²»Í¬µÄ²¨ÌØÂÊÏÂ£¬¼ä¸ôÊ±¼äÊÇ²»Ò»ÑùµÄ£¬
;;;106    		ËùÒÔ¾ÍÊÇ3.5¸ö×Ö·ûµÄÊ±¼ä£¬²¨ÌØÂÊ¸ß£¬Õâ¸öÊ±¼ä¼ä¸ô¾ÍĞ¡£¬²¨ÌØÂÊµÍ£¬Õâ¸öÊ±¼ä¼ä¸ôÏàÓ¦¾Í´ó
;;;107    
;;;108    		4800  = 7.297ms
;;;109    		9600  = 3.646ms
;;;110    		19200  = 1.771ms
;;;111    		38400  = 0.885ms
;;;112    	*/
;;;113    	uint32_t timeout;
;;;114    
;;;115    	angle.timeout = false;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L7.48|
000008  7008              STRB     r0,[r1,#0]
;;;116    	
;;;117    	timeout = 35000000 / RX_BAUD;		/* ¼ÆËã³¬Ê±Ê±¼ä£¬µ¥Î»us 35000000*/
00000a  f240152f          MOV      r5,#0x12f
;;;118    	
;;;119    	/* Ó²¼ş¶¨Ê±ÖĞ¶Ï£¬¶¨Ê±¾«¶Èus*/
;;;120    	bsp_StartHardTimer(3, timeout, (void *)bsp_AngleTimeout);
00000e  4a09              LDR      r2,|L7.52|
000010  4629              MOV      r1,r5
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       bsp_StartHardTimer
;;;121    
;;;122    	if (angle.rxCount < RX_BUF_SIZE)
000018  4805              LDR      r0,|L7.48|
00001a  8840              LDRH     r0,[r0,#2]  ; angle
00001c  280d              CMP      r0,#0xd
00001e  da06              BGE      |L7.46|
;;;123    	{
;;;124    		angle.buf[angle.rxCount++] = byte;
000020  4903              LDR      r1,|L7.48|
000022  8848              LDRH     r0,[r1,#2]  ; angle
000024  1c41              ADDS     r1,r0,#1
000026  4a02              LDR      r2,|L7.48|
000028  8051              STRH     r1,[r2,#2]
00002a  1d11              ADDS     r1,r2,#4
00002c  540c              STRB     r4,[r1,r0]
                  |L7.46|
;;;125    	}
;;;126    }
00002e  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP

                  |L7.48|
                          DCD      angle
                  |L7.52|
                          DCD      bsp_AngleTimeout

                          AREA ||i.bsp_AngleRst||, CODE, READONLY, ALIGN=2

                  bsp_AngleRst PROC
;;;54     */
;;;55     void bsp_AngleRst(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	GPIO_SetBits(GPIO_PORT_RST,GPIO_PIN_RST);
000002  f44f5100          MOV      r1,#0x2000
000006  480a              LDR      r0,|L8.48|
000008  f7fffffe          BL       GPIO_SetBits
;;;58     	bsp_DelayMS(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       bsp_DelayMS
;;;59     	GPIO_ResetBits(GPIO_PORT_RST,GPIO_PIN_RST);
000012  f44f5100          MOV      r1,#0x2000
000016  4806              LDR      r0,|L8.48|
000018  f7fffffe          BL       GPIO_ResetBits
;;;60     	bsp_DelayMS(10);
00001c  200a              MOVS     r0,#0xa
00001e  f7fffffe          BL       bsp_DelayMS
;;;61     	GPIO_SetBits(GPIO_PORT_RST,GPIO_PIN_RST);
000022  f44f5100          MOV      r1,#0x2000
000026  4802              LDR      r0,|L8.48|
000028  f7fffffe          BL       GPIO_SetBits
;;;62     }
00002c  bd10              POP      {r4,pc}
;;;63     
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0x40010c00

                          AREA ||i.bsp_AngleTimeout||, CODE, READONLY, ALIGN=2

                  bsp_AngleTimeout PROC
;;;135    */
;;;136    static void bsp_AngleTimeout(void)
000000  b510              PUSH     {r4,lr}
;;;137    {
;;;138    	angle.timeout = true;
000002  2001              MOVS     r0,#1
000004  4902              LDR      r1,|L9.16|
000006  7008              STRB     r0,[r1,#0]
;;;139    	
;;;140    	bsp_AnglePoll();
000008  f7fffffe          BL       bsp_AnglePoll
;;;141    }
00000c  bd10              POP      {r4,pc}
;;;142    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      angle

                          AREA ||i.bsp_InitAngle||, CODE, READONLY, ALIGN=2

                  bsp_InitAngle PROC
;;;31     */
;;;32     void bsp_InitAngle(void)
000000  b508              PUSH     {r3,lr}
;;;33     {
;;;34     	GPIO_InitTypeDef GPIO_InitStructure;
;;;35     
;;;36     	/* ´ò¿ªGPIOÊ±ÖÓ */
;;;37     	RCC_APB2PeriphClockCmd(RCC_ALL_ANGLE, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;38     
;;;39     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;40     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;	
000010  2014              MOVS     r0,#0x14
000012  f88d0003          STRB     r0,[sp,#3]
;;;41     	
;;;42     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_RST;
000016  f44f5000          MOV      r0,#0x2000
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;43     	GPIO_Init(GPIO_PORT_RST, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L10.40|
000022  f7fffffe          BL       GPIO_Init
;;;44     
;;;45     }
000026  bd08              POP      {r3,pc}
;;;46     
                          ENDP

                  |L10.40|
                          DCD      0x40010c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  angle
                          %        28
                  angleFrame
                          %        14

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Angle.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Angle_c_ba9d2981____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_Angle_c_ba9d2981____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Angle_c_ba9d2981____REVSH|
#line 128
|__asm___11_bsp_Angle_c_ba9d2981____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
