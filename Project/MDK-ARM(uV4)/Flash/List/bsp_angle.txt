; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_angle.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_angle.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_angle.crf ..\..\User\app\src\bsp_Angle.c]
                          THUMB

                          AREA ||i.bsp_AngleAnalyzeApp||, CODE, READONLY, ALIGN=2

                  bsp_AngleAnalyzeApp PROC
;;;175    */
;;;176    static void bsp_AngleAnalyzeApp(void)
000000  b570              PUSH     {r4-r6,lr}
;;;177    {	
;;;178    	int16_t ret = angle.buf[5] << 8 | angle.buf[4];
000002  4808              LDR      r0,|L1.36|
000004  7a01              LDRB     r1,[r0,#8]
000006  7a40              LDRB     r0,[r0,#9]
000008  ea412000          ORR      r0,r1,r0,LSL #8
00000c  b204              SXTH     r4,r0
;;;179    	angle.angle = ret / 100.0F;
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_i2f
000014  4605              MOV      r5,r0
000016  4904              LDR      r1,|L1.40|
000018  f7fffffe          BL       __aeabi_fdiv
00001c  4901              LDR      r1,|L1.36|
00001e  6148              STR      r0,[r1,#0x14]  ; angle
;;;180    }
000020  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      angle
                  |L1.40|
                          DCD      0x42c80000

                          AREA ||i.bsp_AngleCheck||, CODE, READONLY, ALIGN=2

                  bsp_AngleCheck PROC
;;;143    */
;;;144    static bool bsp_AngleCheck(void)
000000  4823              LDR      r0,|L2.144|
;;;145    {
;;;146    	angleFrame.HEAD     = angle.buf[1] << 8  | angle.buf[0];
000002  7901              LDRB     r1,[r0,#4]  ; angle
000004  7940              LDRB     r0,[r0,#5]
000006  ea412000          ORR      r0,r1,r0,LSL #8
00000a  b200              SXTH     r0,r0
00000c  4921              LDR      r1,|L2.148|
00000e  8008              STRH     r0,[r1,#0]
;;;147    	angleFrame.RATE     = angle.buf[3] << 8  | angle.buf[2];
000010  481f              LDR      r0,|L2.144|
000012  7981              LDRB     r1,[r0,#6]
000014  79c0              LDRB     r0,[r0,#7]
000016  ea412000          ORR      r0,r1,r0,LSL #8
00001a  b200              SXTH     r0,r0
00001c  491d              LDR      r1,|L2.148|
00001e  8048              STRH     r0,[r1,#2]
;;;148    	angleFrame.ANGLE    = angle.buf[5] << 8  | angle.buf[4];
000020  481b              LDR      r0,|L2.144|
000022  7a01              LDRB     r1,[r0,#8]
000024  7a40              LDRB     r0,[r0,#9]
000026  ea412000          ORR      r0,r1,r0,LSL #8
00002a  b200              SXTH     r0,r0
00002c  4919              LDR      r1,|L2.148|
00002e  8088              STRH     r0,[r1,#4]
;;;149    	angleFrame.SUM1     = angle.buf[7] << 8  | angle.buf[6];
000030  4817              LDR      r0,|L2.144|
000032  7a81              LDRB     r1,[r0,#0xa]
000034  7ac0              LDRB     r0,[r0,#0xb]
000036  ea412000          ORR      r0,r1,r0,LSL #8
00003a  b200              SXTH     r0,r0
00003c  4915              LDR      r1,|L2.148|
00003e  80c8              STRH     r0,[r1,#6]
;;;150    	angleFrame.RESERVE  = angle.buf[9] << 8  | angle.buf[8];
000040  4813              LDR      r0,|L2.144|
000042  7b01              LDRB     r1,[r0,#0xc]
000044  7b40              LDRB     r0,[r0,#0xd]
000046  ea412000          ORR      r0,r1,r0,LSL #8
00004a  b200              SXTH     r0,r0
00004c  4911              LDR      r1,|L2.148|
00004e  8108              STRH     r0,[r1,#8]
;;;151    	angleFrame.SUM2     = angle.buf[10];
000050  480f              LDR      r0,|L2.144|
000052  7b80              LDRB     r0,[r0,#0xe]
000054  b240              SXTB     r0,r0
000056  7288              STRB     r0,[r1,#0xa]
;;;152    	angleFrame.END      = angle.buf[12] << 8 | angle.buf[11];
000058  480d              LDR      r0,|L2.144|
00005a  7bc1              LDRB     r1,[r0,#0xf]
00005c  7c00              LDRB     r0,[r0,#0x10]
00005e  ea412000          ORR      r0,r1,r0,LSL #8
000062  b200              SXTH     r0,r0
000064  490b              LDR      r1,|L2.148|
000066  8188              STRH     r0,[r1,#0xc]
;;;153    	
;;;154    	
;;;155    	/*校验SUM1*/
;;;156    	if((angleFrame.HEAD+angleFrame.RATE+angleFrame.ANGLE) != angleFrame.SUM1)
000068  4608              MOV      r0,r1
00006a  f9b00000          LDRSH    r0,[r0,#0]  ; angleFrame
00006e  f9b11002          LDRSH    r1,[r1,#2]  ; angleFrame
000072  4408              ADD      r0,r0,r1
000074  4907              LDR      r1,|L2.148|
000076  f9b11004          LDRSH    r1,[r1,#4]  ; angleFrame
00007a  4408              ADD      r0,r0,r1
00007c  4905              LDR      r1,|L2.148|
00007e  f9b11006          LDRSH    r1,[r1,#6]  ; angleFrame
000082  4288              CMP      r0,r1
000084  d001              BEQ      |L2.138|
;;;157    	{
;;;158    		return false;
000086  2000              MOVS     r0,#0
                  |L2.136|
;;;159    	}
;;;160    
;;;161    	#if 0
;;;162    	DEBUG("%X   %X\r\n",angleFrame.HEAD+angleFrame.RATE+angleFrame.ANGLE,angleFrame.SUM1);
;;;163    	#endif
;;;164    	
;;;165    	return true;
;;;166    }	
000088  4770              BX       lr
                  |L2.138|
00008a  2001              MOVS     r0,#1                 ;165
00008c  e7fc              B        |L2.136|
;;;167    
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      angle
                  |L2.148|
                          DCD      angleFrame

                          AREA ||i.bsp_AnglePoll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  bsp_AnglePoll PROC
;;;105    */
;;;106    static void bsp_AnglePoll(void)
000000  b510              PUSH     {r4,lr}
;;;107    {	
;;;108    	if (angle.timeout == false)	/* 超过3.5个字符时间后执行MODH_RxTimeOut()函数。 */
000002  480e              LDR      r0,|L3.60|
000004  7800              LDRB     r0,[r0,#0]  ; angle
000006  b900              CBNZ     r0,|L3.10|
                  |L3.8|
;;;109    	{
;;;110    		/* 没有超时，继续接收。不要清零  */
;;;111    		return ;
;;;112    	}
;;;113    
;;;114    	/* 超时清零  */
;;;115    	angle.timeout = false;
;;;116    
;;;117    	if (angle.rxCount != 13)
;;;118    	{
;;;119    		WARNING("陀螺仪数据长度错误:%d\r\n",angle.rxCount);
;;;120    		goto err_ret;
;;;121    	}
;;;122    	
;;;123    	/* 计算SUM校验和 */
;;;124    	if(bsp_AngleCheck() == false)
;;;125    	{
;;;126    		goto err_ret;
;;;127    	}
;;;128    	
;;;129    	/* 分析应用层协议 */
;;;130    	bsp_AngleAnalyzeApp();
;;;131    
;;;132    err_ret:
;;;133    	angle.rxCount = 0;	/* 必须清零计数器，方便下次帧同步 */
;;;134    }
000008  bd10              POP      {r4,pc}
                  |L3.10|
00000a  2000              MOVS     r0,#0                 ;115
00000c  490b              LDR      r1,|L3.60|
00000e  7008              STRB     r0,[r1,#0]            ;115
000010  4608              MOV      r0,r1                 ;117
000012  8840              LDRH     r0,[r0,#2]            ;117  ; angle
000014  280d              CMP      r0,#0xd               ;117
000016  d005              BEQ      |L3.36|
000018  4608              MOV      r0,r1                 ;119
00001a  8841              LDRH     r1,[r0,#2]            ;119  ; angle
00001c  a008              ADR      r0,|L3.64|
00001e  f7fffffe          BL       __2printf
000022  e006              B        |L3.50|
                  |L3.36|
000024  f7fffffe          BL       bsp_AngleCheck
000028  b900              CBNZ     r0,|L3.44|
00002a  e002              B        |L3.50|
                  |L3.44|
00002c  f7fffffe          BL       bsp_AngleAnalyzeApp
000030  bf00              NOP                            ;132
                  |L3.50|
000032  2000              MOVS     r0,#0                 ;133
000034  4901              LDR      r1,|L3.60|
000036  8048              STRH     r0,[r1,#2]            ;133
000038  bf00              NOP      
00003a  e7e5              B        |L3.8|
;;;135    
                          ENDP

                  |L3.60|
                          DCD      angle
                  |L3.64|
000040  cdd3c2dd          DCB      205,211,194,221,210,199,202,253,190,221,179,164,182,200,180
000044  d2c7cafd
000048  beddb3a4
00004c  b6c8b4  
00004f  edcef33a          DCB      237,206,243,":%d\r\n",0
000053  25640d0a
000057  00      

                          AREA ||i.bsp_AngleRead||, CODE, READONLY, ALIGN=2

                  bsp_AngleRead PROC
;;;40     */
;;;41     float bsp_AngleRead(void)
000000  4801              LDR      r0,|L4.8|
;;;42     {
;;;43     	return angle.angle;
000002  6940              LDR      r0,[r0,#0x14]  ; angle
;;;44     }
000004  4770              BX       lr
;;;45     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      angle

                          AREA ||i.bsp_AngleRevByte||, CODE, READONLY, ALIGN=2

                  bsp_AngleRevByte PROC
;;;54     */
;;;55     void bsp_AngleRevByte(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57     	/*
;;;58     		3.5个字符的时间间隔，只是用在RTU模式下面，因为RTU模式没有开始符和结束符，
;;;59     		两个数据包之间只能靠时间间隔来区分，Modbus定义在不同的波特率下，间隔时间是不一样的，
;;;60     		所以就是3.5个字符的时间，波特率高，这个时间间隔就小，波特率低，这个时间间隔相应就大
;;;61     
;;;62     		4800  = 7.297ms
;;;63     		9600  = 3.646ms
;;;64     		19200  = 1.771ms
;;;65     		38400  = 0.885ms
;;;66     	*/
;;;67     	uint32_t timeout;
;;;68     
;;;69     	angle.timeout = false;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L5.48|
000008  7008              STRB     r0,[r1,#0]
;;;70     	
;;;71     	timeout = 35000000 / RX_BAUD;		/* 计算超时时间，单位us 35000000*/
00000a  f240152f          MOV      r5,#0x12f
;;;72     	
;;;73     	/* 硬件定时中断，定时精度us*/
;;;74     	bsp_StartHardTimer(3, timeout, (void *)bsp_AngleTimeout);
00000e  4a09              LDR      r2,|L5.52|
000010  4629              MOV      r1,r5
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       bsp_StartHardTimer
;;;75     
;;;76     	if (angle.rxCount < RX_BUF_SIZE)
000018  4805              LDR      r0,|L5.48|
00001a  8840              LDRH     r0,[r0,#2]  ; angle
00001c  280d              CMP      r0,#0xd
00001e  da06              BGE      |L5.46|
;;;77     	{
;;;78     		angle.buf[angle.rxCount++] = byte;
000020  4903              LDR      r1,|L5.48|
000022  8848              LDRH     r0,[r1,#2]  ; angle
000024  1c41              ADDS     r1,r0,#1
000026  4a02              LDR      r2,|L5.48|
000028  8051              STRH     r1,[r2,#2]
00002a  1d11              ADDS     r1,r2,#4
00002c  540c              STRB     r4,[r1,r0]
                  |L5.46|
;;;79     	}
;;;80     }
00002e  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  |L5.48|
                          DCD      angle
                  |L5.52|
                          DCD      bsp_AngleTimeout

                          AREA ||i.bsp_AngleTimeout||, CODE, READONLY, ALIGN=2

                  bsp_AngleTimeout PROC
;;;89     */
;;;90     static void bsp_AngleTimeout(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     	angle.timeout = true;
000002  2001              MOVS     r0,#1
000004  4902              LDR      r1,|L6.16|
000006  7008              STRB     r0,[r1,#0]
;;;93     	
;;;94     	bsp_AnglePoll();
000008  f7fffffe          BL       bsp_AnglePoll
;;;95     }
00000c  bd10              POP      {r4,pc}
;;;96     
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      angle

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  angle
                          %        24
                  angleFrame
                          %        14

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Angle.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Angle_c_f16e245a____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_Angle_c_f16e245a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Angle_c_f16e245a____REVSH|
#line 128
|__asm___11_bsp_Angle_c_f16e245a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
