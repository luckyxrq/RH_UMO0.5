; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_control.crf ..\..\User\app\src\bsp_Control.c]
                          THUMB

                          AREA ||i.bsp_InitPid||, CODE, READONLY, ALIGN=2

                  bsp_InitPid PROC
;;;42     */
;;;43     void bsp_InitPid(MotorSN sn)
000000  b958              CBNZ     r0,|L1.26|
;;;44     {
;;;45     	if(sn == MotorLeft)
;;;46     	{
;;;47     		/*给定KP KI参数*/
;;;48     		pid[0].kp = 5;
000002  490d              LDR      r1,|L1.56|
000004  4a0d              LDR      r2,|L1.60|
000006  6011              STR      r1,[r2,#0]  ; pid
;;;49     		pid[0].ki = 10;
000008  490d              LDR      r1,|L1.64|
00000a  6051              STR      r1,[r2,#4]  ; pid
;;;50     		/*清除之前的误差*/
;;;51     		pid[0].bias = 0 ;
00000c  2100              MOVS     r1,#0
00000e  6091              STR      r1,[r2,#8]  ; pid
;;;52     		pid[0].lastBias = 0 ;
000010  60d1              STR      r1,[r2,#0xc]  ; pid
;;;53     		pid[0].pwm = 0 ;
000012  6111              STR      r1,[r2,#0x10]  ; pid
;;;54     		/*目的速度*/
;;;55     		pid[0].target = 0 ;
000014  6151              STR      r1,[r2,#0x14]  ; pid
;;;56     		/*上一次目的速度*/
;;;57     		pid[0].lastTarget = 0 ;
000016  6191              STR      r1,[r2,#0x18]  ; pid
000018  e00d              B        |L1.54|
                  |L1.26|
;;;58     	}
;;;59     	else if(sn == MotorRight)
00001a  2801              CMP      r0,#1
00001c  d10b              BNE      |L1.54|
;;;60     	{
;;;61     		/*给定KP KI参数*/
;;;62     		pid[1].kp = 5;
00001e  4906              LDR      r1,|L1.56|
000020  4a06              LDR      r2,|L1.60|
000022  61d1              STR      r1,[r2,#0x1c]  ; pid
;;;63     		pid[1].ki = 10;
000024  4a06              LDR      r2,|L1.64|
000026  4905              LDR      r1,|L1.60|
000028  620a              STR      r2,[r1,#0x20]
;;;64     		/*清除之前的误差*/
;;;65     		pid[1].bias = 0 ;
00002a  2200              MOVS     r2,#0
00002c  624a              STR      r2,[r1,#0x24]
;;;66     		pid[1].lastBias = 0 ;
00002e  628a              STR      r2,[r1,#0x28]
;;;67     		pid[1].pwm = 0 ;
000030  62ca              STR      r2,[r1,#0x2c]
;;;68     		/*目的速度*/
;;;69     		pid[1].target = 0 ;
000032  630a              STR      r2,[r1,#0x30]
;;;70     		/*上一次速度*/
;;;71     		pid[1].lastTarget = 0 ;
000034  634a              STR      r2,[r1,#0x34]
                  |L1.54|
;;;72     	}
;;;73     }
000036  4770              BX       lr
;;;74     
                          ENDP

                  |L1.56|
                          DCD      0x40a00000
                  |L1.60|
                          DCD      pid
                  |L1.64|
                          DCD      0x41200000

                          AREA ||i.bsp_MotorBrake||, CODE, READONLY, ALIGN=2

                  bsp_MotorBrake PROC
;;;233    */
;;;234    static void bsp_MotorBrake(MotorSN sn)
000000  b510              PUSH     {r4,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236    	if(sn == MotorLeft)
000004  b954              CBNZ     r4,|L2.28|
;;;237    	{
;;;238    		TIM_SetCompare3(TIM1,CONSTANT_HIGH_PWM);
000006  f44f6161          MOV      r1,#0xe10
00000a  480b              LDR      r0,|L2.56|
00000c  f7fffffe          BL       TIM_SetCompare3
;;;239    		TIM_SetCompare4(TIM1,CONSTANT_HIGH_PWM);
000010  f44f6161          MOV      r1,#0xe10
000014  4808              LDR      r0,|L2.56|
000016  f7fffffe          BL       TIM_SetCompare4
00001a  e00b              B        |L2.52|
                  |L2.28|
;;;240    	}
;;;241    	else if(sn == MotorRight)
00001c  2c01              CMP      r4,#1
00001e  d109              BNE      |L2.52|
;;;242    	{
;;;243    		TIM_SetCompare1(TIM1,CONSTANT_HIGH_PWM);
000020  f44f6161          MOV      r1,#0xe10
000024  4804              LDR      r0,|L2.56|
000026  f7fffffe          BL       TIM_SetCompare1
;;;244    		TIM_SetCompare2(TIM1,CONSTANT_HIGH_PWM);
00002a  f44f6161          MOV      r1,#0xe10
00002e  4802              LDR      r0,|L2.56|
000030  f7fffffe          BL       TIM_SetCompare2
                  |L2.52|
;;;245    	}
;;;246    
;;;247    }
000034  bd10              POP      {r4,pc}
;;;248    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      0x40012c00

                          AREA ||i.bsp_MotorGetPulseVector||, CODE, READONLY, ALIGN=2

                  bsp_MotorGetPulseVector PROC
;;;187    */
;;;188    int32_t bsp_MotorGetPulseVector(MotorSN sn)
000000  4601              MOV      r1,r0
;;;189    {
;;;190    	return encoderPulseVector[sn];
000002  4802              LDR      r0,|L3.12|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
;;;191    }
000008  4770              BX       lr
;;;192    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      encoderPulseVector

                          AREA ||i.bsp_MotorGetSpeed||, CODE, READONLY, ALIGN=2

                  bsp_MotorGetSpeed PROC
;;;130    */
;;;131    int32_t bsp_MotorGetSpeed(MotorSN sn)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;132    {
000004  4605              MOV      r5,r0
;;;133    	uint8_t i = 0 ;
000006  2400              MOVS     r4,#0
;;;134    	int32_t sum = 0 ;
000008  2600              MOVS     r6,#0
;;;135    	int32_t ret = 0 ;
00000a  2700              MOVS     r7,#0
;;;136    	
;;;137    	for(i=0; i< SPEED_SAMP_COUNT ; i++)
00000c  bf00              NOP      
00000e  e009              B        |L4.36|
                  |L4.16|
;;;138    	{
;;;139    		sum += speed[sn][i];
000010  eb050085          ADD      r0,r5,r5,LSL #2
000014  490b              LDR      r1,|L4.68|
000016  eb0100c0          ADD      r0,r1,r0,LSL #3
00001a  f8500024          LDR      r0,[r0,r4,LSL #2]
00001e  4406              ADD      r6,r6,r0
000020  1c60              ADDS     r0,r4,#1              ;137
000022  b2c4              UXTB     r4,r0                 ;137
                  |L4.36|
000024  2c0a              CMP      r4,#0xa               ;137
000026  dbf3              BLT      |L4.16|
;;;140    	}
;;;141    	
;;;142    	ret = (float)sum / (float)SPEED_SAMP_COUNT;
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       __aeabi_i2f
00002e  4681              MOV      r9,r0
000030  4905              LDR      r1,|L4.72|
000032  f7fffffe          BL       __aeabi_fdiv
000036  4680              MOV      r8,r0
000038  f7fffffe          BL       __aeabi_f2iz
00003c  4607              MOV      r7,r0
;;;143    	
;;;144    	return ret;
00003e  4638              MOV      r0,r7
;;;145    }
000040  e8bd87f0          POP      {r4-r10,pc}
;;;146    
                          ENDP

                  |L4.68|
                          DCD      speed
                  |L4.72|
                          DCD      0x41200000

                          AREA ||i.bsp_MotorGetTargetSpeed||, CODE, READONLY, ALIGN=2

                  bsp_MotorGetTargetSpeed PROC
;;;102    */
;;;103    int32_t bsp_MotorGetTargetSpeed(MotorSN sn)
000000  4601              MOV      r1,r0
;;;104    {
;;;105    	return pid[sn].target;
000002  ebc100c1          RSB      r0,r1,r1,LSL #3
000006  4a02              LDR      r2,|L5.16|
000008  eb020080          ADD      r0,r2,r0,LSL #2
00000c  6940              LDR      r0,[r0,#0x14]
;;;106    }
00000e  4770              BX       lr
;;;107    
                          ENDP

                  |L5.16|
                          DCD      pid

                          AREA ||i.bsp_MotorSpeedMM2Pulse||, CODE, READONLY, ALIGN=2

                  bsp_MotorSpeedMM2Pulse PROC
;;;155    */
;;;156    int32_t bsp_MotorSpeedMM2Pulse(int16_t mm)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
000004  4604              MOV      r4,r0
;;;158    	int32_t ret = 0 ;
000006  2500              MOVS     r5,#0
;;;159    	float pulse = 0 ;
000008  2600              MOVS     r6,#0
;;;160    
;;;161    	if(mm == 0)
00000a  b914              CBNZ     r4,|L6.18|
;;;162    	{
;;;163    		return 0;
00000c  2000              MOVS     r0,#0
                  |L6.14|
;;;164    	}
;;;165    
;;;166    	pulse = mm / 250.0F * 12.0F ;
;;;167    	
;;;168    	if(pulse <= 1.0F)
;;;169    	{
;;;170    		ret = 1 ;
;;;171    	}
;;;172    	else
;;;173    	{
;;;174    		ret = pulse;
;;;175    	}
;;;176    	
;;;177    	return ret;
;;;178    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L6.18|
000012  4620              MOV      r0,r4                 ;166
000014  f7fffffe          BL       __aeabi_i2f
000018  4680              MOV      r8,r0                 ;166
00001a  490b              LDR      r1,|L6.72|
00001c  f7fffffe          BL       __aeabi_fdiv
000020  4607              MOV      r7,r0                 ;166
000022  490a              LDR      r1,|L6.76|
000024  f7fffffe          BL       __aeabi_fmul
000028  4606              MOV      r6,r0                 ;166
00002a  f04f517e          MOV      r1,#0x3f800000        ;168
00002e  4630              MOV      r0,r6                 ;168
000030  f7fffffe          BL       __aeabi_cfcmple
000034  d801              BHI      |L6.58|
000036  2501              MOVS     r5,#1                 ;170
000038  e003              B        |L6.66|
                  |L6.58|
00003a  4630              MOV      r0,r6                 ;174
00003c  f7fffffe          BL       __aeabi_f2iz
000040  4605              MOV      r5,r0                 ;174
                  |L6.66|
000042  4628              MOV      r0,r5                 ;177
000044  e7e3              B        |L6.14|
;;;179    
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      0x437a0000
                  |L6.76|
                          DCD      0x41400000

                          AREA ||i.bsp_PidClear||, CODE, READONLY, ALIGN=2

                  bsp_PidClear PROC
;;;201    */
;;;202    static void bsp_PidClear(MotorSN sn)
000000  b930              CBNZ     r0,|L7.16|
;;;203    {
;;;204    	if(sn == MotorLeft)
;;;205    	{
;;;206    		/*清除之前的误差*/
;;;207    		pid[0].bias = 0 ;
000002  2100              MOVS     r1,#0
000004  4a07              LDR      r2,|L7.36|
000006  6091              STR      r1,[r2,#8]  ; pid
;;;208    		pid[0].lastBias = 0 ;
000008  60d1              STR      r1,[r2,#0xc]  ; pid
;;;209    		pid[0].pwm = 0 ;
00000a  6111              STR      r1,[r2,#0x10]  ; pid
;;;210    
;;;211    		/*上一次目的速度*/
;;;212    		pid[0].lastTarget = 0 ;
00000c  6191              STR      r1,[r2,#0x18]  ; pid
00000e  e007              B        |L7.32|
                  |L7.16|
;;;213    	}
;;;214    	else if(sn == MotorRight)
000010  2801              CMP      r0,#1
000012  d105              BNE      |L7.32|
;;;215    	{
;;;216    		/*清除之前的误差*/
;;;217    		pid[1].bias = 0 ;
000014  2200              MOVS     r2,#0
000016  4903              LDR      r1,|L7.36|
000018  624a              STR      r2,[r1,#0x24]
;;;218    		pid[1].lastBias = 0 ;
00001a  628a              STR      r2,[r1,#0x28]
;;;219    		pid[1].pwm = 0 ;
00001c  62ca              STR      r2,[r1,#0x2c]
;;;220    
;;;221    		/*上一次目的速度*/
;;;222    		pid[1].lastTarget = 0 ;
00001e  634a              STR      r2,[r1,#0x34]
                  |L7.32|
;;;223    	}
;;;224    }
000020  4770              BX       lr
;;;225    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      pid

                          AREA ||i.bsp_PidExec||, CODE, READONLY, ALIGN=2

                  bsp_PidExec PROC
;;;256    */
;;;257    static void bsp_PidExec(MotorSN sn , int32_t Encoder, int32_t Target)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;258    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;259    	/*如果目标速度为0*/
;;;260    	if(Target == 0)
00000a  b92d              CBNZ     r5,|L8.24|
;;;261    	{
;;;262    		bsp_MotorBrake(sn);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       bsp_MotorBrake
;;;263    		bsp_PidClear(sn);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       bsp_PidClear
                  |L8.24|
;;;264    	}
;;;265    	
;;;266    	
;;;267    	/*如果目标速度小于0，那么编码器的反馈速度也应该为负，单个霍尔只能计数，没有正负*/
;;;268    	if(Target < 0 ) 
000018  2d00              CMP      r5,#0
00001a  da00              BGE      |L8.30|
;;;269    	{
;;;270    		Encoder = -Encoder;
00001c  4276              RSBS     r6,r6,#0
                  |L8.30|
;;;271    	}
;;;272    	
;;;273    	/*统计左右轮机转动的脉冲数，带方向的*/
;;;274    	encoderPulseVector[sn] += Encoder;
00001e  487d              LDR      r0,|L8.532|
000020  f8500024          LDR      r0,[r0,r4,LSL #2]
000024  4430              ADD      r0,r0,r6
000026  497b              LDR      r1,|L8.532|
000028  f8410024          STR      r0,[r1,r4,LSL #2]
;;;275    	
;;;276    	/*计算速度，250MM/S时，10MS有12个脉冲*/
;;;277    	speed[sn][sampleIndex[sn]++] = Encoder / 12.0F * 250;
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_i2f
000032  4681              MOV      r9,r0
000034  4978              LDR      r1,|L8.536|
000036  f7fffffe          BL       __aeabi_fdiv
00003a  4680              MOV      r8,r0
00003c  4977              LDR      r1,|L8.540|
00003e  f7fffffe          BL       __aeabi_fmul
000042  4607              MOV      r7,r0
000044  f7fffffe          BL       __aeabi_f2iz
000048  4975              LDR      r1,|L8.544|
00004a  5d0a              LDRB     r2,[r1,r4]
00004c  5d09              LDRB     r1,[r1,r4]
00004e  1c49              ADDS     r1,r1,#1
000050  4b73              LDR      r3,|L8.544|
000052  5519              STRB     r1,[r3,r4]
000054  eb040184          ADD      r1,r4,r4,LSL #2
000058  4b72              LDR      r3,|L8.548|
00005a  eb0301c1          ADD      r1,r3,r1,LSL #3
00005e  f8410022          STR      r0,[r1,r2,LSL #2]
;;;278    	if(sampleIndex[sn] >= SPEED_SAMP_COUNT)
000062  486f              LDR      r0,|L8.544|
000064  5d00              LDRB     r0,[r0,r4]
000066  280a              CMP      r0,#0xa
000068  db02              BLT      |L8.112|
;;;279    	{
;;;280    		sampleIndex[sn] = 0 ;
00006a  2000              MOVS     r0,#0
00006c  496c              LDR      r1,|L8.544|
00006e  5508              STRB     r0,[r1,r4]
                  |L8.112|
;;;281    	}
;;;282    		
;;;283    	/*计算PWM值，增量式PID*/
;;;284    	if(sn == MotorLeft)
000070  2c00              CMP      r4,#0
000072  d165              BNE      |L8.320|
;;;285    	{
;;;286    		if(pid[0].lastTarget == 0) /*从0速启动*/
000074  486c              LDR      r0,|L8.552|
000076  6980              LDR      r0,[r0,#0x18]  ; pid
000078  b910              CBNZ     r0,|L8.128|
;;;287    		{
;;;288    			pid[0].lastTarget = Target;
00007a  486b              LDR      r0,|L8.552|
00007c  6185              STR      r5,[r0,#0x18]  ; pid
00007e  e018              B        |L8.178|
                  |L8.128|
;;;289    		}
;;;290    		else if(pid[0].lastTarget / (float)Target < 0) /*2次目标速度方向相反*/
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       __aeabi_i2f
000086  4680              MOV      r8,r0
000088  4967              LDR      r1,|L8.552|
00008a  6988              LDR      r0,[r1,#0x18]  ; pid
00008c  f7fffffe          BL       __aeabi_i2f
000090  4681              MOV      r9,r0
000092  4641              MOV      r1,r8
000094  f7fffffe          BL       __aeabi_fdiv
000098  4607              MOV      r7,r0
00009a  2100              MOVS     r1,#0
00009c  f7fffffe          BL       __aeabi_cfcmple
0000a0  d207              BCS      |L8.178|
;;;291    		{
;;;292    			bsp_MotorBrake(sn);
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       bsp_MotorBrake
;;;293    			bsp_PidClear(sn);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       bsp_PidClear
                  |L8.174|
;;;294    			return ;
;;;295    		}
;;;296    		
;;;297    		pid[0].bias = Encoder-Target;                                  
;;;298    		pid[0].pwm += pid[0].kp*(pid[0].bias-pid[0].lastBias)+pid[0].ki*pid[0].bias;
;;;299    		pid[0].lastBias=pid[0].bias;
;;;300    		/*限幅*/
;;;301    		pid[0].pwm = bsp_PwmLimit(pid[0].pwm);	
;;;302    		/*设置PWM*/
;;;303    		bsp_MotorSetPWM(MotorLeft,pid[0].pwm >0 ? Backward : Forward ,myabs(pid[0].pwm));
;;;304    	}
;;;305    	else if(sn == MotorRight)
;;;306    	{
;;;307    		if(pid[1].lastTarget == 0) /*从0速启动*/
;;;308    		{
;;;309    			pid[1].lastTarget = Target;
;;;310    		}
;;;311    		else if(pid[1].lastTarget / (float)Target < 0) /*2次目标速度方向相反*/
;;;312    		{
;;;313    			bsp_MotorBrake(sn);
;;;314    			bsp_PidClear(sn);
;;;315    			return ;
;;;316    		}
;;;317    		
;;;318    		pid[1].bias = Encoder-Target;                                
;;;319    		pid[1].pwm += pid[1].kp*(pid[1].bias-pid[1].lastBias)+pid[1].ki*pid[1].bias;
;;;320    		pid[1].lastBias=pid[1].bias;
;;;321    		/*限幅*/
;;;322    		pid[1].pwm = bsp_PwmLimit(pid[1].pwm);
;;;323    		/*设置PWM*/
;;;324    		bsp_MotorSetPWM(MotorRight,pid[1].pwm >0 ? Backward : Forward ,myabs(pid[1].pwm));
;;;325    	}
;;;326    	
;;;327    }
0000ae  e8bd87f0          POP      {r4-r10,pc}
                  |L8.178|
0000b2  1b70              SUBS     r0,r6,r5              ;297
0000b4  f7fffffe          BL       __aeabi_i2f
0000b8  495b              LDR      r1,|L8.552|
0000ba  6088              STR      r0,[r1,#8]            ;297  ; pid
0000bc  460a              MOV      r2,r1                 ;298
0000be  6891              LDR      r1,[r2,#8]            ;298  ; pid
0000c0  6850              LDR      r0,[r2,#4]            ;298  ; pid
0000c2  f7fffffe          BL       __aeabi_fmul
0000c6  4681              MOV      r9,r0                 ;298
0000c8  4a57              LDR      r2,|L8.552|
0000ca  68d1              LDR      r1,[r2,#0xc]          ;298  ; pid
0000cc  6890              LDR      r0,[r2,#8]            ;298  ; pid
0000ce  f7fffffe          BL       __aeabi_fsub
0000d2  4682              MOV      r10,r0                ;298
0000d4  4854              LDR      r0,|L8.552|
0000d6  6801              LDR      r1,[r0,#0]            ;298  ; pid
0000d8  4650              MOV      r0,r10                ;298
0000da  f7fffffe          BL       __aeabi_fmul
0000de  4680              MOV      r8,r0                 ;298
0000e0  4649              MOV      r1,r9                 ;298
0000e2  f7fffffe          BL       __aeabi_fadd
0000e6  4607              MOV      r7,r0                 ;298
0000e8  484f              LDR      r0,|L8.552|
0000ea  6901              LDR      r1,[r0,#0x10]         ;298  ; pid
0000ec  4638              MOV      r0,r7                 ;298
0000ee  f7fffffe          BL       __aeabi_fadd
0000f2  494d              LDR      r1,|L8.552|
0000f4  6108              STR      r0,[r1,#0x10]         ;298  ; pid
0000f6  4608              MOV      r0,r1                 ;299
0000f8  6880              LDR      r0,[r0,#8]            ;299  ; pid
0000fa  60c8              STR      r0,[r1,#0xc]          ;299  ; pid
0000fc  6908              LDR      r0,[r1,#0x10]         ;301  ; pid
0000fe  f7fffffe          BL       __aeabi_f2iz
000102  4680              MOV      r8,r0                 ;301
000104  f7fffffe          BL       bsp_PwmLimit
000108  4607              MOV      r7,r0                 ;301
00010a  f7fffffe          BL       __aeabi_i2f
00010e  4946              LDR      r1,|L8.552|
000110  6108              STR      r0,[r1,#0x10]         ;301  ; pid
000112  6908              LDR      r0,[r1,#0x10]         ;303  ; pid
000114  f7fffffe          BL       __aeabi_f2iz
000118  4681              MOV      r9,r0                 ;303
00011a  f7fffffe          BL       myabs
00011e  b287              UXTH     r7,r0                 ;303
000120  4941              LDR      r1,|L8.552|
000122  6908              LDR      r0,[r1,#0x10]         ;303  ; pid
000124  2100              MOVS     r1,#0                 ;303
000126  f7fffffe          BL       __aeabi_cfrcmple
00012a  d201              BCS      |L8.304|
00012c  2001              MOVS     r0,#1                 ;303
00012e  e000              B        |L8.306|
                  |L8.304|
000130  2000              MOVS     r0,#0                 ;303
                  |L8.306|
000132  4680              MOV      r8,r0                 ;303
000134  463a              MOV      r2,r7                 ;303
000136  4641              MOV      r1,r8                 ;303
000138  2000              MOVS     r0,#0                 ;303
00013a  f7fffffe          BL       bsp_MotorSetPWM
00013e  e066              B        |L8.526|
                  |L8.320|
000140  2c01              CMP      r4,#1                 ;305
000142  d164              BNE      |L8.526|
000144  4838              LDR      r0,|L8.552|
000146  6b40              LDR      r0,[r0,#0x34]         ;307
000148  b910              CBNZ     r0,|L8.336|
00014a  4837              LDR      r0,|L8.552|
00014c  6345              STR      r5,[r0,#0x34]         ;309
00014e  e017              B        |L8.384|
                  |L8.336|
000150  4628              MOV      r0,r5                 ;311
000152  f7fffffe          BL       __aeabi_i2f
000156  4680              MOV      r8,r0                 ;311
000158  4933              LDR      r1,|L8.552|
00015a  6b48              LDR      r0,[r1,#0x34]         ;311
00015c  f7fffffe          BL       __aeabi_i2f
000160  4681              MOV      r9,r0                 ;311
000162  4641              MOV      r1,r8                 ;311
000164  f7fffffe          BL       __aeabi_fdiv
000168  4607              MOV      r7,r0                 ;311
00016a  2100              MOVS     r1,#0                 ;311
00016c  f7fffffe          BL       __aeabi_cfcmple
000170  d206              BCS      |L8.384|
000172  4620              MOV      r0,r4                 ;313
000174  f7fffffe          BL       bsp_MotorBrake
000178  4620              MOV      r0,r4                 ;314
00017a  f7fffffe          BL       bsp_PidClear
00017e  e796              B        |L8.174|
                  |L8.384|
000180  1b70              SUBS     r0,r6,r5              ;318
000182  f7fffffe          BL       __aeabi_i2f
000186  4928              LDR      r1,|L8.552|
000188  6248              STR      r0,[r1,#0x24]         ;318
00018a  460a              MOV      r2,r1                 ;319
00018c  6a51              LDR      r1,[r2,#0x24]         ;319
00018e  6a10              LDR      r0,[r2,#0x20]         ;319
000190  f7fffffe          BL       __aeabi_fmul
000194  4681              MOV      r9,r0                 ;319
000196  4a24              LDR      r2,|L8.552|
000198  6a91              LDR      r1,[r2,#0x28]         ;319
00019a  6a50              LDR      r0,[r2,#0x24]         ;319
00019c  f7fffffe          BL       __aeabi_fsub
0001a0  4682              MOV      r10,r0                ;319
0001a2  4821              LDR      r0,|L8.552|
0001a4  69c1              LDR      r1,[r0,#0x1c]         ;319  ; pid
0001a6  4650              MOV      r0,r10                ;319
0001a8  f7fffffe          BL       __aeabi_fmul
0001ac  4680              MOV      r8,r0                 ;319
0001ae  4649              MOV      r1,r9                 ;319
0001b0  f7fffffe          BL       __aeabi_fadd
0001b4  4607              MOV      r7,r0                 ;319
0001b6  481c              LDR      r0,|L8.552|
0001b8  6ac1              LDR      r1,[r0,#0x2c]         ;319
0001ba  4638              MOV      r0,r7                 ;319
0001bc  f7fffffe          BL       __aeabi_fadd
0001c0  4919              LDR      r1,|L8.552|
0001c2  62c8              STR      r0,[r1,#0x2c]         ;319
0001c4  4608              MOV      r0,r1                 ;320
0001c6  6a41              LDR      r1,[r0,#0x24]         ;320
0001c8  6281              STR      r1,[r0,#0x28]         ;320
0001ca  4601              MOV      r1,r0                 ;322
0001cc  6ac8              LDR      r0,[r1,#0x2c]         ;322
0001ce  f7fffffe          BL       __aeabi_f2iz
0001d2  4680              MOV      r8,r0                 ;322
0001d4  f7fffffe          BL       bsp_PwmLimit
0001d8  4607              MOV      r7,r0                 ;322
0001da  f7fffffe          BL       __aeabi_i2f
0001de  4912              LDR      r1,|L8.552|
0001e0  62c8              STR      r0,[r1,#0x2c]         ;322
0001e2  6ac8              LDR      r0,[r1,#0x2c]         ;324
0001e4  f7fffffe          BL       __aeabi_f2iz
0001e8  4681              MOV      r9,r0                 ;324
0001ea  f7fffffe          BL       myabs
0001ee  b287              UXTH     r7,r0                 ;324
0001f0  490d              LDR      r1,|L8.552|
0001f2  6ac8              LDR      r0,[r1,#0x2c]         ;324
0001f4  2100              MOVS     r1,#0                 ;324
0001f6  f7fffffe          BL       __aeabi_cfrcmple
0001fa  d201              BCS      |L8.512|
0001fc  2001              MOVS     r0,#1                 ;324
0001fe  e000              B        |L8.514|
                  |L8.512|
000200  2000              MOVS     r0,#0                 ;324
                  |L8.514|
000202  4680              MOV      r8,r0                 ;324
000204  463a              MOV      r2,r7                 ;324
000206  4641              MOV      r1,r8                 ;324
000208  2001              MOVS     r0,#1                 ;324
00020a  f7fffffe          BL       bsp_MotorSetPWM
                  |L8.526|
00020e  bf00              NOP      
000210  e74d              B        |L8.174|
;;;328    
                          ENDP

000212  0000              DCW      0x0000
                  |L8.532|
                          DCD      encoderPulseVector
                  |L8.536|
                          DCD      0x41400000
                  |L8.540|
                          DCD      0x437a0000
                  |L8.544|
                          DCD      sampleIndex
                  |L8.548|
                          DCD      speed
                  |L8.552|
                          DCD      pid

                          AREA ||i.bsp_PidSched||, CODE, READONLY, ALIGN=2

                  bsp_PidSched PROC
;;;115    */
;;;116    void bsp_PidSched(void)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	bsp_PidExec(MotorLeft, bsp_EncoderGetPulseT(EncoderLeft), pid[0].target);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_EncoderGetPulseT
000008  4604              MOV      r4,r0
00000a  4808              LDR      r0,|L9.44|
00000c  6942              LDR      r2,[r0,#0x14]  ; pid
00000e  4621              MOV      r1,r4
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       bsp_PidExec
;;;119    	bsp_PidExec(MotorRight,bsp_EncoderGetPulseT(EncoderRight),pid[1].target);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       bsp_EncoderGetPulseT
00001c  4604              MOV      r4,r0
00001e  4803              LDR      r0,|L9.44|
000020  6b02              LDR      r2,[r0,#0x30]
000022  4621              MOV      r1,r4
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       bsp_PidExec
;;;120    }
00002a  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  |L9.44|
                          DCD      pid

                          AREA ||i.bsp_PwmLimit||, CODE, READONLY, ALIGN=2

                  bsp_PwmLimit PROC
;;;337    */
;;;338    static int32_t bsp_PwmLimit(int32_t pwm)
000000  4601              MOV      r1,r0
;;;339    {
;;;340    	int32_t ret = 0 ;
000002  2000              MOVS     r0,#0
;;;341    	
;;;342    	if(pwm >= MAX_PWM)
000004  f5b16f61          CMP      r1,#0xe10
000008  db02              BLT      |L10.16|
;;;343    	{
;;;344    		ret = MAX_PWM;
00000a  f44f6061          MOV      r0,#0xe10
00000e  e005              B        |L10.28|
                  |L10.16|
;;;345    	}
;;;346    	else if(pwm <= -MAX_PWM)
000010  f5116f61          CMN      r1,#0xe10
000014  dc01              BGT      |L10.26|
;;;347    	{
;;;348    		ret = -MAX_PWM;
000016  4802              LDR      r0,|L10.32|
000018  e000              B        |L10.28|
                  |L10.26|
;;;349    	}
;;;350    	else
;;;351    	{
;;;352    		ret = pwm;
00001a  4608              MOV      r0,r1
                  |L10.28|
;;;353    	}
;;;354    	
;;;355    	return ret;
;;;356    }	
00001c  4770              BX       lr
;;;357    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0xfffff1f0

                          AREA ||i.bsp_SetMotorSpeed||, CODE, READONLY, ALIGN=2

                  bsp_SetMotorSpeed PROC
;;;82     */
;;;83     void bsp_SetMotorSpeed(MotorSN sn , int32_t speed)
000000  b910              CBNZ     r0,|L11.8|
;;;84     {
;;;85     	if(sn == MotorLeft)
;;;86     	{
;;;87     		pid[0].target = speed;
000002  4a04              LDR      r2,|L11.20|
000004  6151              STR      r1,[r2,#0x14]  ; pid
000006  e003              B        |L11.16|
                  |L11.8|
;;;88     	}
;;;89     	else if(sn == MotorRight)
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
;;;90     	{
;;;91     		pid[1].target = speed;
00000c  4a01              LDR      r2,|L11.20|
00000e  6311              STR      r1,[r2,#0x30]
                  |L11.16|
;;;92     	}
;;;93     }
000010  4770              BX       lr
;;;94     
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      pid

                          AREA ||i.myabs||, CODE, READONLY, ALIGN=1

                  myabs PROC
;;;366    */
;;;367    static int32_t myabs(int32_t val)
000000  4601              MOV      r1,r0
;;;368    { 		   
;;;369        int32_t temp;
;;;370    	
;;;371        if(val < 0)  
000002  2900              CMP      r1,#0
000004  da01              BGE      |L12.10|
;;;372    		temp = -val;  
000006  4248              RSBS     r0,r1,#0
000008  e000              B        |L12.12|
                  |L12.10|
;;;373        else 
;;;374    		temp = val;
00000a  4608              MOV      r0,r1
                  |L12.12|
;;;375    	
;;;376        return temp;
;;;377    }
00000c  4770              BX       lr
;;;378    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pid
                          %        56
                  speed
                          %        80

                          AREA ||.data||, DATA, ALIGN=2

                  encoderPulseVector
                          %        8
                  sampleIndex
000008  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_Control_c_03aaa559____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_Control_c_03aaa559____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_Control_c_03aaa559____REVSH|
#line 128
|__asm___13_bsp_Control_c_03aaa559____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
