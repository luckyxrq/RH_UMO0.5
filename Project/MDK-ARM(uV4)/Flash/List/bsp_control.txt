; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_control.crf ..\..\User\app\src\bsp_Control.c]
                          THUMB

                          AREA ||i.bsp_InitPid||, CODE, READONLY, ALIGN=2

                  bsp_InitPid PROC
;;;27     
;;;28     void bsp_InitPid(MotorSN sn)
000000  b958              CBNZ     r0,|L1.26|
;;;29     {
;;;30     	if(sn == MotorLeft)
;;;31     	{
;;;32     		/*给定KP KI参数*/
;;;33     		pid[0].kp = 5;
000002  490d              LDR      r1,|L1.56|
000004  4a0d              LDR      r2,|L1.60|
000006  6011              STR      r1,[r2,#0]  ; pid
;;;34     		pid[0].ki = 10;
000008  490d              LDR      r1,|L1.64|
00000a  6051              STR      r1,[r2,#4]  ; pid
;;;35     		/*清除之前的误差*/
;;;36     		pid[0].bias = 0 ;
00000c  2100              MOVS     r1,#0
00000e  6091              STR      r1,[r2,#8]  ; pid
;;;37     		pid[0].lastBias = 0 ;
000010  60d1              STR      r1,[r2,#0xc]  ; pid
;;;38     		pid[0].pwm = 0 ;
000012  6111              STR      r1,[r2,#0x10]  ; pid
;;;39     		/*目的速度*/
;;;40     		pid[0].target = 0 ;
000014  6151              STR      r1,[r2,#0x14]  ; pid
;;;41     		/*上一次目的速度*/
;;;42     		pid[0].lastTarget = 0 ;
000016  6191              STR      r1,[r2,#0x18]  ; pid
000018  e00d              B        |L1.54|
                  |L1.26|
;;;43     	}
;;;44     	else if(sn == MotorRight)
00001a  2801              CMP      r0,#1
00001c  d10b              BNE      |L1.54|
;;;45     	{
;;;46     		/*给定KP KI参数*/
;;;47     		pid[1].kp = 5;
00001e  4906              LDR      r1,|L1.56|
000020  4a06              LDR      r2,|L1.60|
000022  61d1              STR      r1,[r2,#0x1c]  ; pid
;;;48     		pid[1].ki = 10;
000024  4a06              LDR      r2,|L1.64|
000026  4905              LDR      r1,|L1.60|
000028  620a              STR      r2,[r1,#0x20]
;;;49     		/*清除之前的误差*/
;;;50     		pid[1].bias = 0 ;
00002a  2200              MOVS     r2,#0
00002c  624a              STR      r2,[r1,#0x24]
;;;51     		pid[1].lastBias = 0 ;
00002e  628a              STR      r2,[r1,#0x28]
;;;52     		pid[1].pwm = 0 ;
000030  62ca              STR      r2,[r1,#0x2c]
;;;53     		/*目的速度*/
;;;54     		pid[1].target = 0 ;
000032  630a              STR      r2,[r1,#0x30]
;;;55     		/*上一次速度*/
;;;56     		pid[1].lastTarget = 0 ;
000034  634a              STR      r2,[r1,#0x34]
                  |L1.54|
;;;57     	}
;;;58     }
000036  4770              BX       lr
;;;59     
                          ENDP

                  |L1.56|
                          DCD      0x40a00000
                  |L1.60|
                          DCD      pid
                  |L1.64|
                          DCD      0x41200000

                          AREA ||i.bsp_MotorBrake||, CODE, READONLY, ALIGN=2

                  bsp_MotorBrake PROC
;;;105    
;;;106    static void bsp_MotorBrake(MotorSN sn)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	if(sn == MotorLeft)
000004  b954              CBNZ     r4,|L2.28|
;;;109    	{
;;;110    		TIM_SetCompare3(TIM1,CONSTANT_HIGH_PWM);
000006  f44f6161          MOV      r1,#0xe10
00000a  480b              LDR      r0,|L2.56|
00000c  f7fffffe          BL       TIM_SetCompare3
;;;111    		TIM_SetCompare4(TIM1,CONSTANT_HIGH_PWM);
000010  f44f6161          MOV      r1,#0xe10
000014  4808              LDR      r0,|L2.56|
000016  f7fffffe          BL       TIM_SetCompare4
00001a  e00b              B        |L2.52|
                  |L2.28|
;;;112    	}
;;;113    	else if(sn == MotorRight)
00001c  2c01              CMP      r4,#1
00001e  d109              BNE      |L2.52|
;;;114    	{
;;;115    		TIM_SetCompare1(TIM1,CONSTANT_HIGH_PWM);
000020  f44f6161          MOV      r1,#0xe10
000024  4804              LDR      r0,|L2.56|
000026  f7fffffe          BL       TIM_SetCompare1
;;;116    		TIM_SetCompare2(TIM1,CONSTANT_HIGH_PWM);
00002a  f44f6161          MOV      r1,#0xe10
00002e  4802              LDR      r0,|L2.56|
000030  f7fffffe          BL       TIM_SetCompare2
                  |L2.52|
;;;117    	}
;;;118    
;;;119    }
000034  bd10              POP      {r4,pc}
;;;120    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      0x40012c00

                          AREA ||i.bsp_PidClear||, CODE, READONLY, ALIGN=2

                  bsp_PidClear PROC
;;;80     
;;;81     static void bsp_PidClear(MotorSN sn)
000000  b930              CBNZ     r0,|L3.16|
;;;82     {
;;;83     	if(sn == MotorLeft)
;;;84     	{
;;;85     		/*清除之前的误差*/
;;;86     		pid[0].bias = 0 ;
000002  2100              MOVS     r1,#0
000004  4a07              LDR      r2,|L3.36|
000006  6091              STR      r1,[r2,#8]  ; pid
;;;87     		pid[0].lastBias = 0 ;
000008  60d1              STR      r1,[r2,#0xc]  ; pid
;;;88     		pid[0].pwm = 0 ;
00000a  6111              STR      r1,[r2,#0x10]  ; pid
;;;89     
;;;90     		/*上一次目的速度*/
;;;91     		pid[0].lastTarget = 0 ;
00000c  6191              STR      r1,[r2,#0x18]  ; pid
00000e  e007              B        |L3.32|
                  |L3.16|
;;;92     	}
;;;93     	else if(sn == MotorRight)
000010  2801              CMP      r0,#1
000012  d105              BNE      |L3.32|
;;;94     	{
;;;95     		/*清除之前的误差*/
;;;96     		pid[1].bias = 0 ;
000014  2200              MOVS     r2,#0
000016  4903              LDR      r1,|L3.36|
000018  624a              STR      r2,[r1,#0x24]
;;;97     		pid[1].lastBias = 0 ;
00001a  628a              STR      r2,[r1,#0x28]
;;;98     		pid[1].pwm = 0 ;
00001c  62ca              STR      r2,[r1,#0x2c]
;;;99     
;;;100    		/*上一次目的速度*/
;;;101    		pid[1].lastTarget = 0 ;
00001e  634a              STR      r2,[r1,#0x34]
                  |L3.32|
;;;102    	}
;;;103    }
000020  4770              BX       lr
;;;104    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      pid

                          AREA ||i.bsp_PidExec||, CODE, READONLY, ALIGN=2

                  bsp_PidExec PROC
;;;124    
;;;125    static void bsp_PidExec(MotorSN sn , int32_t Encoder, int32_t Target)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;126    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;127    	/*如果目标速度为0*/
;;;128    	if(Target == 0)
00000a  b92c              CBNZ     r4,|L4.24|
;;;129    	{
;;;130    		bsp_MotorBrake(sn);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_MotorBrake
;;;131    		bsp_PidClear(sn);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       bsp_PidClear
                  |L4.24|
;;;132    	}
;;;133    	
;;;134    	/*如果目标速度小于0，那么编码器的反馈速度也应该为负，单个霍尔只能计数，没有正负*/
;;;135    	if(Target < 0 ) 
000018  2c00              CMP      r4,#0
00001a  da00              BGE      |L4.30|
;;;136    	{
;;;137    		Encoder = -Encoder;
00001c  426d              RSBS     r5,r5,#0
                  |L4.30|
;;;138    	}
;;;139    	
;;;140    	
;;;141    		
;;;142    	/*计算PWM值，增量式PID*/
;;;143    	if(sn == MotorLeft)
00001e  2e00              CMP      r6,#0
000020  d165              BNE      |L4.238|
;;;144    	{
;;;145    		if(pid[0].lastTarget == 0) /*从0速启动*/
000022  4867              LDR      r0,|L4.448|
000024  6980              LDR      r0,[r0,#0x18]  ; pid
000026  b910              CBNZ     r0,|L4.46|
;;;146    		{
;;;147    			pid[0].lastTarget = Target;
000028  4865              LDR      r0,|L4.448|
00002a  6184              STR      r4,[r0,#0x18]  ; pid
00002c  e018              B        |L4.96|
                  |L4.46|
;;;148    		}
;;;149    		else if(pid[0].lastTarget / (float)Target < 0) /*2次目标速度方向相反*/
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       __aeabi_i2f
000034  4680              MOV      r8,r0
000036  4962              LDR      r1,|L4.448|
000038  6988              LDR      r0,[r1,#0x18]  ; pid
00003a  f7fffffe          BL       __aeabi_i2f
00003e  4681              MOV      r9,r0
000040  4641              MOV      r1,r8
000042  f7fffffe          BL       __aeabi_fdiv
000046  4607              MOV      r7,r0
000048  2100              MOVS     r1,#0
00004a  f7fffffe          BL       __aeabi_cfcmple
00004e  d207              BCS      |L4.96|
;;;150    		{
;;;151    			bsp_MotorBrake(sn);
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       bsp_MotorBrake
;;;152    			bsp_PidClear(sn);
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       bsp_PidClear
                  |L4.92|
;;;153    			return ;
;;;154    		}
;;;155    		
;;;156    		pid[0].bias = Encoder-Target;                                  
;;;157    		pid[0].pwm += pid[0].kp*(pid[0].bias-pid[0].lastBias)+pid[0].ki*pid[0].bias;
;;;158    		pid[0].lastBias=pid[0].bias;
;;;159    		/*限幅*/
;;;160    		pid[0].pwm = bsp_PwmLimit(pid[0].pwm);	
;;;161    		/*设置PWM*/
;;;162    		bsp_MotorSetPWM(MotorLeft,pid[0].pwm >0 ? Backward : Forward ,myabs(pid[0].pwm));
;;;163    	}
;;;164    	else if(sn == MotorRight)
;;;165    	{
;;;166    		if(pid[1].lastTarget == 0) /*从0速启动*/
;;;167    		{
;;;168    			pid[1].lastTarget = Target;
;;;169    		}
;;;170    		else if(pid[1].lastTarget / (float)Target < 0) /*2次目标速度方向相反*/
;;;171    		{
;;;172    			bsp_MotorBrake(sn);
;;;173    			bsp_PidClear(sn);
;;;174    			return ;
;;;175    		}
;;;176    		
;;;177    		pid[1].bias = Encoder-Target;                                
;;;178    		pid[1].pwm += pid[1].kp*(pid[1].bias-pid[1].lastBias)+pid[1].ki*pid[1].bias;
;;;179    		pid[1].lastBias=pid[1].bias;
;;;180    		/*限幅*/
;;;181    		pid[1].pwm = bsp_PwmLimit(pid[1].pwm);
;;;182    		/*设置PWM*/
;;;183    		bsp_MotorSetPWM(MotorRight,pid[1].pwm >0 ? Backward : Forward ,myabs(pid[1].pwm));
;;;184    	}
;;;185    	
;;;186    }
00005c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.96|
000060  1b28              SUBS     r0,r5,r4              ;156
000062  f7fffffe          BL       __aeabi_i2f
000066  4956              LDR      r1,|L4.448|
000068  6088              STR      r0,[r1,#8]            ;156  ; pid
00006a  460a              MOV      r2,r1                 ;157
00006c  6891              LDR      r1,[r2,#8]            ;157  ; pid
00006e  6850              LDR      r0,[r2,#4]            ;157  ; pid
000070  f7fffffe          BL       __aeabi_fmul
000074  4681              MOV      r9,r0                 ;157
000076  4a52              LDR      r2,|L4.448|
000078  68d1              LDR      r1,[r2,#0xc]          ;157  ; pid
00007a  6890              LDR      r0,[r2,#8]            ;157  ; pid
00007c  f7fffffe          BL       __aeabi_fsub
000080  4682              MOV      r10,r0                ;157
000082  484f              LDR      r0,|L4.448|
000084  6801              LDR      r1,[r0,#0]            ;157  ; pid
000086  4650              MOV      r0,r10                ;157
000088  f7fffffe          BL       __aeabi_fmul
00008c  4680              MOV      r8,r0                 ;157
00008e  4649              MOV      r1,r9                 ;157
000090  f7fffffe          BL       __aeabi_fadd
000094  4607              MOV      r7,r0                 ;157
000096  484a              LDR      r0,|L4.448|
000098  6901              LDR      r1,[r0,#0x10]         ;157  ; pid
00009a  4638              MOV      r0,r7                 ;157
00009c  f7fffffe          BL       __aeabi_fadd
0000a0  4947              LDR      r1,|L4.448|
0000a2  6108              STR      r0,[r1,#0x10]         ;157  ; pid
0000a4  4608              MOV      r0,r1                 ;158
0000a6  6880              LDR      r0,[r0,#8]            ;158  ; pid
0000a8  60c8              STR      r0,[r1,#0xc]          ;158  ; pid
0000aa  6908              LDR      r0,[r1,#0x10]         ;160  ; pid
0000ac  f7fffffe          BL       __aeabi_f2iz
0000b0  4680              MOV      r8,r0                 ;160
0000b2  f7fffffe          BL       bsp_PwmLimit
0000b6  4607              MOV      r7,r0                 ;160
0000b8  f7fffffe          BL       __aeabi_i2f
0000bc  4940              LDR      r1,|L4.448|
0000be  6108              STR      r0,[r1,#0x10]         ;160  ; pid
0000c0  6908              LDR      r0,[r1,#0x10]         ;162  ; pid
0000c2  f7fffffe          BL       __aeabi_f2iz
0000c6  4681              MOV      r9,r0                 ;162
0000c8  f7fffffe          BL       myabs
0000cc  b287              UXTH     r7,r0                 ;162
0000ce  493c              LDR      r1,|L4.448|
0000d0  6908              LDR      r0,[r1,#0x10]         ;162  ; pid
0000d2  2100              MOVS     r1,#0                 ;162
0000d4  f7fffffe          BL       __aeabi_cfrcmple
0000d8  d201              BCS      |L4.222|
0000da  2001              MOVS     r0,#1                 ;162
0000dc  e000              B        |L4.224|
                  |L4.222|
0000de  2000              MOVS     r0,#0                 ;162
                  |L4.224|
0000e0  4680              MOV      r8,r0                 ;162
0000e2  463a              MOV      r2,r7                 ;162
0000e4  4641              MOV      r1,r8                 ;162
0000e6  2000              MOVS     r0,#0                 ;162
0000e8  f7fffffe          BL       bsp_MotorSetPWM
0000ec  e066              B        |L4.444|
                  |L4.238|
0000ee  2e01              CMP      r6,#1                 ;164
0000f0  d164              BNE      |L4.444|
0000f2  4833              LDR      r0,|L4.448|
0000f4  6b40              LDR      r0,[r0,#0x34]         ;166
0000f6  b910              CBNZ     r0,|L4.254|
0000f8  4831              LDR      r0,|L4.448|
0000fa  6344              STR      r4,[r0,#0x34]         ;168
0000fc  e017              B        |L4.302|
                  |L4.254|
0000fe  4620              MOV      r0,r4                 ;170
000100  f7fffffe          BL       __aeabi_i2f
000104  4680              MOV      r8,r0                 ;170
000106  492e              LDR      r1,|L4.448|
000108  6b48              LDR      r0,[r1,#0x34]         ;170
00010a  f7fffffe          BL       __aeabi_i2f
00010e  4681              MOV      r9,r0                 ;170
000110  4641              MOV      r1,r8                 ;170
000112  f7fffffe          BL       __aeabi_fdiv
000116  4607              MOV      r7,r0                 ;170
000118  2100              MOVS     r1,#0                 ;170
00011a  f7fffffe          BL       __aeabi_cfcmple
00011e  d206              BCS      |L4.302|
000120  4630              MOV      r0,r6                 ;172
000122  f7fffffe          BL       bsp_MotorBrake
000126  4630              MOV      r0,r6                 ;173
000128  f7fffffe          BL       bsp_PidClear
00012c  e796              B        |L4.92|
                  |L4.302|
00012e  1b28              SUBS     r0,r5,r4              ;177
000130  f7fffffe          BL       __aeabi_i2f
000134  4922              LDR      r1,|L4.448|
000136  6248              STR      r0,[r1,#0x24]         ;177
000138  460a              MOV      r2,r1                 ;178
00013a  6a51              LDR      r1,[r2,#0x24]         ;178
00013c  6a10              LDR      r0,[r2,#0x20]         ;178
00013e  f7fffffe          BL       __aeabi_fmul
000142  4681              MOV      r9,r0                 ;178
000144  4a1e              LDR      r2,|L4.448|
000146  6a91              LDR      r1,[r2,#0x28]         ;178
000148  6a50              LDR      r0,[r2,#0x24]         ;178
00014a  f7fffffe          BL       __aeabi_fsub
00014e  4682              MOV      r10,r0                ;178
000150  481b              LDR      r0,|L4.448|
000152  69c1              LDR      r1,[r0,#0x1c]         ;178  ; pid
000154  4650              MOV      r0,r10                ;178
000156  f7fffffe          BL       __aeabi_fmul
00015a  4680              MOV      r8,r0                 ;178
00015c  4649              MOV      r1,r9                 ;178
00015e  f7fffffe          BL       __aeabi_fadd
000162  4607              MOV      r7,r0                 ;178
000164  4816              LDR      r0,|L4.448|
000166  6ac1              LDR      r1,[r0,#0x2c]         ;178
000168  4638              MOV      r0,r7                 ;178
00016a  f7fffffe          BL       __aeabi_fadd
00016e  4914              LDR      r1,|L4.448|
000170  62c8              STR      r0,[r1,#0x2c]         ;178
000172  4608              MOV      r0,r1                 ;179
000174  6a41              LDR      r1,[r0,#0x24]         ;179
000176  6281              STR      r1,[r0,#0x28]         ;179
000178  4601              MOV      r1,r0                 ;181
00017a  6ac8              LDR      r0,[r1,#0x2c]         ;181
00017c  f7fffffe          BL       __aeabi_f2iz
000180  4680              MOV      r8,r0                 ;181
000182  f7fffffe          BL       bsp_PwmLimit
000186  4607              MOV      r7,r0                 ;181
000188  f7fffffe          BL       __aeabi_i2f
00018c  490c              LDR      r1,|L4.448|
00018e  62c8              STR      r0,[r1,#0x2c]         ;181
000190  6ac8              LDR      r0,[r1,#0x2c]         ;183
000192  f7fffffe          BL       __aeabi_f2iz
000196  4681              MOV      r9,r0                 ;183
000198  f7fffffe          BL       myabs
00019c  b287              UXTH     r7,r0                 ;183
00019e  4908              LDR      r1,|L4.448|
0001a0  6ac8              LDR      r0,[r1,#0x2c]         ;183
0001a2  2100              MOVS     r1,#0                 ;183
0001a4  f7fffffe          BL       __aeabi_cfrcmple
0001a8  d201              BCS      |L4.430|
0001aa  2001              MOVS     r0,#1                 ;183
0001ac  e000              B        |L4.432|
                  |L4.430|
0001ae  2000              MOVS     r0,#0                 ;183
                  |L4.432|
0001b0  4680              MOV      r8,r0                 ;183
0001b2  463a              MOV      r2,r7                 ;183
0001b4  4641              MOV      r1,r8                 ;183
0001b6  2001              MOVS     r0,#1                 ;183
0001b8  f7fffffe          BL       bsp_MotorSetPWM
                  |L4.444|
0001bc  bf00              NOP      
0001be  e74d              B        |L4.92|
;;;187    
                          ENDP

                  |L4.448|
                          DCD      pid

                          AREA ||i.bsp_PidSched||, CODE, READONLY, ALIGN=2

                  bsp_PidSched PROC
;;;73     
;;;74     void bsp_PidSched(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	bsp_PidExec(MotorLeft, bsp_EncoderGetPulseT(EncoderLeft), pid[0].target);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_EncoderGetPulseT
000008  4604              MOV      r4,r0
00000a  4808              LDR      r0,|L5.44|
00000c  4621              MOV      r1,r4
00000e  6942              LDR      r2,[r0,#0x14]  ; pid
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       bsp_PidExec
;;;77     	bsp_PidExec(MotorRight,bsp_EncoderGetPulseT(EncoderRight),pid[1].target);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       bsp_EncoderGetPulseT
00001c  4604              MOV      r4,r0
00001e  4803              LDR      r0,|L5.44|
000020  4621              MOV      r1,r4
000022  6b02              LDR      r2,[r0,#0x30]
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       bsp_PidExec
;;;78     }
00002a  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  |L5.44|
                          DCD      pid

                          AREA ||i.bsp_PwmLimit||, CODE, READONLY, ALIGN=2

                  bsp_PwmLimit PROC
;;;189    
;;;190    static int32_t bsp_PwmLimit(int32_t pwm)
000000  4601              MOV      r1,r0
;;;191    {
;;;192    	int32_t ret = 0 ;
000002  2000              MOVS     r0,#0
;;;193    	
;;;194    	if(pwm >= MAX_PWM)
000004  f5b16f61          CMP      r1,#0xe10
000008  db02              BLT      |L6.16|
;;;195    	{
;;;196    		ret = MAX_PWM;
00000a  f44f6061          MOV      r0,#0xe10
00000e  e005              B        |L6.28|
                  |L6.16|
;;;197    	}
;;;198    	else if(pwm <= -MAX_PWM)
000010  f5116f61          CMN      r1,#0xe10
000014  dc01              BGT      |L6.26|
;;;199    	{
;;;200    		ret = -MAX_PWM;
000016  4802              LDR      r0,|L6.32|
000018  e000              B        |L6.28|
                  |L6.26|
;;;201    	}
;;;202    	else
;;;203    	{
;;;204    		ret = pwm;
00001a  4608              MOV      r0,r1
                  |L6.28|
;;;205    	}
;;;206    	
;;;207    	return ret;
;;;208    }	
00001c  4770              BX       lr
;;;209    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0xfffff1f0

                          AREA ||i.bsp_SetMotorSpeed||, CODE, READONLY, ALIGN=2

                  bsp_SetMotorSpeed PROC
;;;60     
;;;61     void bsp_SetMotorSpeed(MotorSN sn , int32_t speed)
000000  b910              CBNZ     r0,|L7.8|
;;;62     {
;;;63     	if(sn == MotorLeft)
;;;64     	{
;;;65     		pid[0].target = speed;
000002  4a04              LDR      r2,|L7.20|
000004  6151              STR      r1,[r2,#0x14]  ; pid
000006  e003              B        |L7.16|
                  |L7.8|
;;;66     	}
;;;67     	else if(sn == MotorRight)
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L7.16|
;;;68     	{
;;;69     		pid[1].target = speed;
00000c  4a01              LDR      r2,|L7.20|
00000e  6311              STR      r1,[r2,#0x30]
                  |L7.16|
;;;70     	}
;;;71     }
000010  4770              BX       lr
;;;72     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      pid

                          AREA ||i.myabs||, CODE, READONLY, ALIGN=1

                  myabs PROC
;;;218    */
;;;219    static int32_t myabs(int32_t val)
000000  4601              MOV      r1,r0
;;;220    { 		   
;;;221        int32_t temp;
;;;222    	
;;;223        if(val < 0)  
000002  2900              CMP      r1,#0
000004  da01              BGE      |L8.10|
;;;224    		temp = -val;  
000006  4248              RSBS     r0,r1,#0
000008  e000              B        |L8.12|
                  |L8.10|
;;;225        else 
;;;226    		temp = val;
00000a  4608              MOV      r0,r1
                  |L8.12|
;;;227    	
;;;228        return temp;
;;;229    }
00000c  4770              BX       lr
;;;230    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pid
                          %        56

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_Control_c_03aaa559____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_Control_c_03aaa559____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_Control_c_03aaa559____REVSH|
#line 128
|__asm___13_bsp_Control_c_03aaa559____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
