; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_offsitesw.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_offsitesw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_offsitesw.crf ..\..\User\app\src\bsp_OffSiteSW.c]
                          THUMB

                          AREA ||i.bsp_InitOffSiteSW||, CODE, READONLY, ALIGN=2

                  bsp_InitOffSiteSW PROC
;;;20     */
;;;21     void bsp_InitOffSiteSW(void)
000000  b508              PUSH     {r3,lr}
;;;22     {
;;;23     
;;;24     	GPIO_InitTypeDef GPIO_InitStructure;
;;;25     
;;;26     	/* 打开GPIO时钟 */
;;;27     	RCC_APB2PeriphClockCmd(RCC_ALL_OFFSITE_SW, ENABLE);
000002  2101              MOVS     r1,#1
000004  2050              MOVS     r0,#0x50
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;28     
;;;29     	/*
;;;30     		初始状态先关闭
;;;31     	*/
;;;32     	bsp_SwOff(SW_5V_EN_CTRL);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       bsp_SwOff
;;;33     	bsp_SwOff(SW_IR_POWER);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       bsp_SwOff
;;;34     
;;;35     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;36     	
;;;37     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* 浮空输入 */
00001c  2004              MOVS     r0,#4
00001e  f88d0003          STRB     r0,[sp,#3]
;;;38     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_OFFSITE_SW_L;
000022  01c0              LSLS     r0,r0,#7
000024  f8ad0000          STRH     r0,[sp,#0]
;;;39     	GPIO_Init(GPIO_PORT_OFFSITE_SW_L, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4807              LDR      r0,|L1.72|
00002c  f7fffffe          BL       GPIO_Init
;;;40     	
;;;41     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* 浮空输入 */
000030  2004              MOVS     r0,#4
000032  f88d0003          STRB     r0,[sp,#3]
;;;42     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_OFFSITE_SW_R;
000036  0280              LSLS     r0,r0,#10
000038  f8ad0000          STRH     r0,[sp,#0]
;;;43     	GPIO_Init(GPIO_PORT_OFFSITE_SW_R, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4803              LDR      r0,|L1.76|
000040  f7fffffe          BL       GPIO_Init
;;;44     
;;;45     }
000044  bd08              POP      {r3,pc}
;;;46     
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x40011000
                  |L1.76|
                          DCD      0x40011800

                          AREA ||i.bsp_OffSiteGetState||, CODE, READONLY, ALIGN=2

                  bsp_OffSiteGetState PROC
;;;55     */
;;;56     OffSiteState bsp_OffSiteGetState(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	OffSiteState ret ;
;;;59     	
;;;60     	if(!GPIO_ReadInputDataBit(GPIO_PORT_OFFSITE_SW_L,GPIO_PIN_OFFSITE_SW_L)&&
000002  f44f7100          MOV      r1,#0x200
000006  480f              LDR      r0,|L2.68|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b938              CBNZ     r0,|L2.30|
;;;61     		!GPIO_ReadInputDataBit(GPIO_PORT_OFFSITE_SW_R,GPIO_PIN_OFFSITE_SW_R))
00000e  f44f5180          MOV      r1,#0x1000
000012  480d              LDR      r0,|L2.72|
000014  f7fffffe          BL       GPIO_ReadInputDataBit
000018  b908              CBNZ     r0,|L2.30|
;;;62     	{
;;;63     		ret = OffSiteBoth;
00001a  2403              MOVS     r4,#3
00001c  e010              B        |L2.64|
                  |L2.30|
;;;64     	}
;;;65     	else if(!GPIO_ReadInputDataBit(GPIO_PORT_OFFSITE_SW_L,GPIO_PIN_OFFSITE_SW_L))
00001e  f44f7100          MOV      r1,#0x200
000022  4808              LDR      r0,|L2.68|
000024  f7fffffe          BL       GPIO_ReadInputDataBit
000028  b908              CBNZ     r0,|L2.46|
;;;66     	{
;;;67     		ret = OffSiteLeft;
00002a  2401              MOVS     r4,#1
00002c  e008              B        |L2.64|
                  |L2.46|
;;;68     	}
;;;69     	else if(!GPIO_ReadInputDataBit(GPIO_PORT_OFFSITE_SW_R,GPIO_PIN_OFFSITE_SW_R))
00002e  f44f5180          MOV      r1,#0x1000
000032  4805              LDR      r0,|L2.72|
000034  f7fffffe          BL       GPIO_ReadInputDataBit
000038  b908              CBNZ     r0,|L2.62|
;;;70     	{
;;;71     		ret = OffSiteRight;
00003a  2402              MOVS     r4,#2
00003c  e000              B        |L2.64|
                  |L2.62|
;;;72     	}
;;;73     	else
;;;74     	{
;;;75     		ret = OffSiteNone;
00003e  2400              MOVS     r4,#0
                  |L2.64|
;;;76     	}
;;;77     	
;;;78     	return ret;
000040  4620              MOV      r0,r4
;;;79     }
000042  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  |L2.68|
                          DCD      0x40011000
                  |L2.72|
                          DCD      0x40011800

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_OffSiteSW.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_OffSiteSW_c_ef32bac2____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_OffSiteSW_c_ef32bac2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_OffSiteSW_c_ef32bac2____REVSH|
#line 128
|__asm___15_bsp_OffSiteSW_c_ef32bac2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
