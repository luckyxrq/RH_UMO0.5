; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_action.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_action.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_action.crf ..\..\User\app\src\bsp_Action.c]
                          THUMB

                          AREA ||i.bsp_RunStableAct||, CODE, READONLY, ALIGN=2

                  bsp_RunStableAct PROC
;;;59     */
;;;60     void bsp_RunStableAct(void)
000000  b510              PUSH     {r4,lr}
;;;61     {
;;;62     	if(!runStableAct.isRunning)
000002  482a              LDR      r0,|L1.172|
000004  7800              LDRB     r0,[r0,#0]  ; runStableAct
000006  b900              CBNZ     r0,|L1.10|
                  |L1.8|
;;;63     	{
;;;64     		return ;
;;;65     	}
;;;66     	
;;;67     	switch(runStableAct.action)
;;;68     	{
;;;69     		case 0:
;;;70     		{
;;;71     			bsp_SetMotorPWM(MotorLeft,Forward,6000);
;;;72     			bsp_SetMotorPWM(MotorRight,Forward,6000);
;;;73     			runStableAct.delay = xTaskGetTickCount();
;;;74     			runStableAct.action++;
;;;75     		}break;
;;;76     		
;;;77     		case 1:
;;;78     		{
;;;79     			if(xTaskGetTickCount() - runStableAct.delay >= 1000)
;;;80     			{
;;;81     				bsp_SetMotorPWM(MotorLeft,Forward,7000);
;;;82     				bsp_SetMotorPWM(MotorRight,Forward,7000);
;;;83     				runStableAct.delay = xTaskGetTickCount();
;;;84     				runStableAct.action++;
;;;85     			}
;;;86     		}break;
;;;87     		
;;;88     		case 2:
;;;89     		{
;;;90     			if(xTaskGetTickCount() - runStableAct.delay >= 1000)
;;;91     			{
;;;92     				bsp_MotorBrake(MotorLeft);
;;;93     				bsp_MotorBrake(MotorRight);
;;;94     				
;;;95     				runStableAct.isRunning = false;
;;;96     				runStableAct.action = 0 ;
;;;97     			}
;;;98     		}break;
;;;99     	}
;;;100    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  4828              LDR      r0,|L1.172|
00000c  7840              LDRB     r0,[r0,#1]            ;67  ; runStableAct
00000e  b120              CBZ      r0,|L1.26|
000010  2801              CMP      r0,#1                 ;67
000012  d017              BEQ      |L1.68|
000014  2802              CMP      r0,#2                 ;67
000016  d145              BNE      |L1.164|
000018  e031              B        |L1.126|
                  |L1.26|
00001a  f2417270          MOV      r2,#0x1770            ;71
00001e  2100              MOVS     r1,#0                 ;71
000020  4608              MOV      r0,r1                 ;71
000022  f7fffffe          BL       bsp_SetMotorPWM
000026  f2417270          MOV      r2,#0x1770            ;72
00002a  2100              MOVS     r1,#0                 ;72
00002c  2001              MOVS     r0,#1                 ;72
00002e  f7fffffe          BL       bsp_SetMotorPWM
000032  f7fffffe          BL       xTaskGetTickCount
000036  491d              LDR      r1,|L1.172|
000038  6048              STR      r0,[r1,#4]            ;73  ; runStableAct
00003a  4608              MOV      r0,r1                 ;74
00003c  7840              LDRB     r0,[r0,#1]            ;74  ; runStableAct
00003e  1c40              ADDS     r0,r0,#1              ;74
000040  7048              STRB     r0,[r1,#1]            ;74
000042  e02f              B        |L1.164|
                  |L1.68|
000044  f7fffffe          BL       xTaskGetTickCount
000048  4918              LDR      r1,|L1.172|
00004a  6849              LDR      r1,[r1,#4]            ;79  ; runStableAct
00004c  1a40              SUBS     r0,r0,r1              ;79
00004e  f5b07f7a          CMP      r0,#0x3e8             ;79
000052  d313              BCC      |L1.124|
000054  f6413258          MOV      r2,#0x1b58            ;81
000058  2100              MOVS     r1,#0                 ;81
00005a  4608              MOV      r0,r1                 ;81
00005c  f7fffffe          BL       bsp_SetMotorPWM
000060  f6413258          MOV      r2,#0x1b58            ;82
000064  2100              MOVS     r1,#0                 ;82
000066  2001              MOVS     r0,#1                 ;82
000068  f7fffffe          BL       bsp_SetMotorPWM
00006c  f7fffffe          BL       xTaskGetTickCount
000070  490e              LDR      r1,|L1.172|
000072  6048              STR      r0,[r1,#4]            ;83  ; runStableAct
000074  4608              MOV      r0,r1                 ;84
000076  7840              LDRB     r0,[r0,#1]            ;84  ; runStableAct
000078  1c40              ADDS     r0,r0,#1              ;84
00007a  7048              STRB     r0,[r1,#1]            ;84
                  |L1.124|
00007c  e012              B        |L1.164|
                  |L1.126|
00007e  f7fffffe          BL       xTaskGetTickCount
000082  490a              LDR      r1,|L1.172|
000084  6849              LDR      r1,[r1,#4]            ;90  ; runStableAct
000086  1a40              SUBS     r0,r0,r1              ;90
000088  f5b07f7a          CMP      r0,#0x3e8             ;90
00008c  d309              BCC      |L1.162|
00008e  2000              MOVS     r0,#0                 ;92
000090  f7fffffe          BL       bsp_MotorBrake
000094  2001              MOVS     r0,#1                 ;93
000096  f7fffffe          BL       bsp_MotorBrake
00009a  2000              MOVS     r0,#0                 ;95
00009c  4903              LDR      r1,|L1.172|
00009e  7008              STRB     r0,[r1,#0]            ;95
0000a0  7048              STRB     r0,[r1,#1]            ;96
                  |L1.162|
0000a2  bf00              NOP                            ;98
                  |L1.164|
0000a4  bf00              NOP                            ;75
0000a6  bf00              NOP      
0000a8  e7ae              B        |L1.8|
;;;101    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      runStableAct

                          AREA ||i.bsp_StartRunStable||, CODE, READONLY, ALIGN=2

                  bsp_StartRunStable PROC
;;;30     */
;;;31     void bsp_StartRunStable(void)
000000  2000              MOVS     r0,#0
;;;32     {
;;;33     	runStableAct.action = 0 ;
000002  4902              LDR      r1,|L2.12|
000004  7048              STRB     r0,[r1,#1]
;;;34     	runStableAct.isRunning = true;
000006  2001              MOVS     r0,#1
000008  7008              STRB     r0,[r1,#0]
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L2.12|
                          DCD      runStableAct

                          AREA ||i.bsp_StopRunStable||, CODE, READONLY, ALIGN=2

                  bsp_StopRunStable PROC
;;;44     */
;;;45     void bsp_StopRunStable(void)
000000  2000              MOVS     r0,#0
;;;46     {
;;;47     	runStableAct.isRunning = false;
000002  4902              LDR      r1,|L3.12|
000004  7008              STRB     r0,[r1,#0]
;;;48     	runStableAct.action = 0 ;
000006  7048              STRB     r0,[r1,#1]
;;;49     }
000008  4770              BX       lr
;;;50     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      runStableAct

                          AREA ||i.bsp_TurnAngleAct||, CODE, READONLY, ALIGN=2

                  bsp_TurnAngleAct PROC
;;;103    
;;;104    void bsp_TurnAngleAct(int16_t angle)
000000  4907              LDR      r1,|L4.32|
;;;105    {
;;;106    	if(!turnAngleAct.isRunning)
000002  7809              LDRB     r1,[r1,#0]  ; turnAngleAct
000004  b901              CBNZ     r1,|L4.8|
                  |L4.6|
;;;107    	{
;;;108    		return;
;;;109    	}
;;;110    	
;;;111    	switch(turnAngleAct.action)
;;;112    	{
;;;113    		case 0:
;;;114    		{
;;;115    			
;;;116    		}break;
;;;117    		
;;;118    		case 1:
;;;119    		{
;;;120    			
;;;121    		}break;
;;;122    	}
;;;123    	
;;;124    }
000006  4770              BX       lr
                  |L4.8|
000008  4905              LDR      r1,|L4.32|
00000a  7849              LDRB     r1,[r1,#1]            ;111  ; turnAngleAct
00000c  b111              CBZ      r1,|L4.20|
00000e  2901              CMP      r1,#1                 ;111
000010  d102              BNE      |L4.24|
000012  e000              B        |L4.22|
                  |L4.20|
000014  e000              B        |L4.24|
                  |L4.22|
000016  bf00              NOP                            ;121
                  |L4.24|
000018  bf00              NOP                            ;116
00001a  bf00              NOP      
00001c  e7f3              B        |L4.6|
;;;125    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      turnAngleAct

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  turnAngleAct
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  runStableAct
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Action.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_Action_c_a5edb882____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_bsp_Action_c_a5edb882____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_bsp_Action_c_a5edb882____REVSH|
#line 128
|__asm___12_bsp_Action_c_a5edb882____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
