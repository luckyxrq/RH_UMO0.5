; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_scope.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_scope.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\BAK\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_scope.crf ..\..\User\app\src\bsp_Scope.c]
                          THUMB

                          AREA ||i.DataScope_Data_Generate||, CODE, READONLY, ALIGN=2

                  DataScope_Data_Generate PROC
;;;74     */
;;;75     static uint8_t DataScope_Data_Generate(uint8_t Channel_Number)
000000  4601              MOV      r1,r0
;;;76     {
;;;77         if ( (Channel_Number > 10) || (Channel_Number == 0) ) { return 0; }  //通道个数大于10或等于0，直接跳出，不执行函数
000002  290a              CMP      r1,#0xa
000004  dc00              BGT      |L1.8|
000006  b909              CBNZ     r1,|L1.12|
                  |L1.8|
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;78         else
;;;79         {	
;;;80             DataScope_OutPut_Buffer[0] = '$';  //帧头
;;;81             
;;;82             switch(Channel_Number)   
;;;83             { 
;;;84             case 1:   DataScope_OutPut_Buffer[5]  =  5; return  6;  
;;;85             case 2:   DataScope_OutPut_Buffer[9]  =  9; return 10;
;;;86             case 3:   DataScope_OutPut_Buffer[13] = 13; return 14; 
;;;87             case 4:   DataScope_OutPut_Buffer[17] = 17; return 18;
;;;88             case 5:   DataScope_OutPut_Buffer[21] = 21; return 22;  
;;;89             case 6:   DataScope_OutPut_Buffer[25] = 25; return 26;
;;;90             case 7:   DataScope_OutPut_Buffer[29] = 29; return 30; 
;;;91             case 8:   DataScope_OutPut_Buffer[33] = 33; return 34; 
;;;92             case 9:   DataScope_OutPut_Buffer[37] = 37; return 38;
;;;93             case 10:  DataScope_OutPut_Buffer[41] = 41; return 42; 
;;;94             }	 
;;;95         }
;;;96         return 0;
;;;97     }
00000a  4770              BX       lr
                  |L1.12|
00000c  2024              MOVS     r0,#0x24              ;80
00000e  4a21              LDR      r2,|L1.148|
000010  7010              STRB     r0,[r2,#0]            ;80
000012  290b              CMP      r1,#0xb               ;82
000014  d23c              BCS      |L1.144|
000016  e8dff001          TBB      [pc,r1]               ;82
00001a  3b06              DCB      0x3b,0x06
00001c  0b10151a          DCB      0x0b,0x10,0x15,0x1a
000020  1f24292f          DCB      0x1f,0x24,0x29,0x2f
000024  3500              DCB      0x35,0x00
000026  2005              MOVS     r0,#5                 ;84
000028  4a1a              LDR      r2,|L1.148|
00002a  7150              STRB     r0,[r2,#5]            ;84
00002c  2006              MOVS     r0,#6                 ;84
00002e  e7ec              B        |L1.10|
000030  2009              MOVS     r0,#9                 ;85
000032  4a18              LDR      r2,|L1.148|
000034  7250              STRB     r0,[r2,#9]            ;85
000036  200a              MOVS     r0,#0xa               ;85
000038  e7e7              B        |L1.10|
00003a  200d              MOVS     r0,#0xd               ;86
00003c  4a15              LDR      r2,|L1.148|
00003e  7350              STRB     r0,[r2,#0xd]          ;86
000040  200e              MOVS     r0,#0xe               ;86
000042  e7e2              B        |L1.10|
000044  2011              MOVS     r0,#0x11              ;87
000046  4a13              LDR      r2,|L1.148|
000048  7450              STRB     r0,[r2,#0x11]         ;87
00004a  2012              MOVS     r0,#0x12              ;87
00004c  e7dd              B        |L1.10|
00004e  2015              MOVS     r0,#0x15              ;88
000050  4a10              LDR      r2,|L1.148|
000052  7550              STRB     r0,[r2,#0x15]         ;88
000054  2016              MOVS     r0,#0x16              ;88
000056  e7d8              B        |L1.10|
000058  2019              MOVS     r0,#0x19              ;89
00005a  4a0e              LDR      r2,|L1.148|
00005c  7650              STRB     r0,[r2,#0x19]         ;89
00005e  201a              MOVS     r0,#0x1a              ;89
000060  e7d3              B        |L1.10|
000062  201d              MOVS     r0,#0x1d              ;90
000064  4a0b              LDR      r2,|L1.148|
000066  7750              STRB     r0,[r2,#0x1d]         ;90
000068  201e              MOVS     r0,#0x1e              ;90
00006a  e7ce              B        |L1.10|
00006c  2021              MOVS     r0,#0x21              ;91
00006e  4a09              LDR      r2,|L1.148|
000070  f8820021          STRB     r0,[r2,#0x21]         ;91
000074  2022              MOVS     r0,#0x22              ;91
000076  e7c8              B        |L1.10|
000078  2025              MOVS     r0,#0x25              ;92
00007a  4a06              LDR      r2,|L1.148|
00007c  f8820025          STRB     r0,[r2,#0x25]         ;92
000080  2026              MOVS     r0,#0x26              ;92
000082  e7c2              B        |L1.10|
000084  2029              MOVS     r0,#0x29              ;93
000086  4a03              LDR      r2,|L1.148|
000088  f8820029          STRB     r0,[r2,#0x29]         ;93
00008c  202a              MOVS     r0,#0x2a              ;93
00008e  e7bc              B        |L1.10|
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;96
000092  e7ba              B        |L1.10|
;;;98     
                          ENDP

                  |L1.148|
                          DCD      DataScope_OutPut_Buffer

                          AREA ||i.DataScope_Get_Channel_Data||, CODE, READONLY, ALIGN=2

                  DataScope_Get_Channel_Data PROC
;;;42     */
;;;43     static void DataScope_Get_Channel_Data(float Data,uint8_t Channel)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;44     {
000002  460c              MOV      r4,r1
;;;45     	/*通道个数大于10或等于0，直接跳出，不执行函数*/
;;;46         if ( (Channel > 10) || (Channel == 0) ) 
000004  2c0a              CMP      r4,#0xa
000006  dc00              BGT      |L2.10|
000008  b904              CBNZ     r4,|L2.12|
                  |L2.10|
;;;47     		return;  
;;;48         else
;;;49         {
;;;50             switch (Channel)
;;;51             {
;;;52             case 1:  Float2Byte(&Data,DataScope_OutPut_Buffer,1); break;
;;;53             case 2:  Float2Byte(&Data,DataScope_OutPut_Buffer,5); break;
;;;54             case 3:  Float2Byte(&Data,DataScope_OutPut_Buffer,9); break;
;;;55             case 4:  Float2Byte(&Data,DataScope_OutPut_Buffer,13); break;
;;;56             case 5:  Float2Byte(&Data,DataScope_OutPut_Buffer,17); break;
;;;57             case 6:  Float2Byte(&Data,DataScope_OutPut_Buffer,21); break;
;;;58             case 7:  Float2Byte(&Data,DataScope_OutPut_Buffer,25); break;
;;;59             case 8:  Float2Byte(&Data,DataScope_OutPut_Buffer,29); break;
;;;60             case 9:  Float2Byte(&Data,DataScope_OutPut_Buffer,33); break;
;;;61             case 10: Float2Byte(&Data,DataScope_OutPut_Buffer,37); break;
;;;62             }
;;;63         }	 
;;;64     }
00000a  bd1c              POP      {r2-r4,pc}
                  |L2.12|
00000c  2c0b              CMP      r4,#0xb               ;50
00000e  d243              BCS      |L2.152|
000010  e8dff004          TBB      [pc,r4]               ;50
000014  42060c12          DCB      0x42,0x06,0x0c,0x12
000018  181e242a          DCB      0x18,0x1e,0x24,0x2a
00001c  30363c00          DCB      0x30,0x36,0x3c,0x00
000020  2201              MOVS     r2,#1                 ;52
000022  491f              LDR      r1,|L2.160|
000024  4668              MOV      r0,sp                 ;52
000026  f7fffffe          BL       Float2Byte
00002a  e035              B        |L2.152|
00002c  2205              MOVS     r2,#5                 ;53
00002e  491c              LDR      r1,|L2.160|
000030  4668              MOV      r0,sp                 ;53
000032  f7fffffe          BL       Float2Byte
000036  e02f              B        |L2.152|
000038  2209              MOVS     r2,#9                 ;54
00003a  4919              LDR      r1,|L2.160|
00003c  4668              MOV      r0,sp                 ;54
00003e  f7fffffe          BL       Float2Byte
000042  e029              B        |L2.152|
000044  220d              MOVS     r2,#0xd               ;55
000046  4916              LDR      r1,|L2.160|
000048  4668              MOV      r0,sp                 ;55
00004a  f7fffffe          BL       Float2Byte
00004e  e023              B        |L2.152|
000050  2211              MOVS     r2,#0x11              ;56
000052  4913              LDR      r1,|L2.160|
000054  4668              MOV      r0,sp                 ;56
000056  f7fffffe          BL       Float2Byte
00005a  e01d              B        |L2.152|
00005c  2215              MOVS     r2,#0x15              ;57
00005e  4910              LDR      r1,|L2.160|
000060  4668              MOV      r0,sp                 ;57
000062  f7fffffe          BL       Float2Byte
000066  e017              B        |L2.152|
000068  2219              MOVS     r2,#0x19              ;58
00006a  490d              LDR      r1,|L2.160|
00006c  4668              MOV      r0,sp                 ;58
00006e  f7fffffe          BL       Float2Byte
000072  e011              B        |L2.152|
000074  221d              MOVS     r2,#0x1d              ;59
000076  490a              LDR      r1,|L2.160|
000078  4668              MOV      r0,sp                 ;59
00007a  f7fffffe          BL       Float2Byte
00007e  e00b              B        |L2.152|
000080  2221              MOVS     r2,#0x21              ;60
000082  4907              LDR      r1,|L2.160|
000084  4668              MOV      r0,sp                 ;60
000086  f7fffffe          BL       Float2Byte
00008a  e005              B        |L2.152|
00008c  2225              MOVS     r2,#0x25              ;61
00008e  4904              LDR      r1,|L2.160|
000090  4668              MOV      r0,sp                 ;61
000092  f7fffffe          BL       Float2Byte
000096  bf00              NOP                            ;61
                  |L2.152|
000098  bf00              NOP                            ;52
00009a  bf00              NOP      
00009c  e7b5              B        |L2.10|
;;;65     
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      DataScope_OutPut_Buffer

                          AREA ||i.Float2Byte||, CODE, READONLY, ALIGN=1

                  Float2Byte PROC
;;;23     */
;;;24     static void Float2Byte(float *target,uint8_t *buf,uint8_t beg)
000000  b530              PUSH     {r4,r5,lr}
;;;25     {
;;;26         uint8_t *point;
;;;27         point = (uint8_t*)target;	  //得到float的地址
000002  4603              MOV      r3,r0
;;;28         buf[beg]   = point[0];
000004  781c              LDRB     r4,[r3,#0]
000006  548c              STRB     r4,[r1,r2]
;;;29         buf[beg+1] = point[1];
000008  785d              LDRB     r5,[r3,#1]
00000a  1c54              ADDS     r4,r2,#1
00000c  550d              STRB     r5,[r1,r4]
;;;30         buf[beg+2] = point[2];
00000e  789d              LDRB     r5,[r3,#2]
000010  1c94              ADDS     r4,r2,#2
000012  550d              STRB     r5,[r1,r4]
;;;31         buf[beg+3] = point[3];
000014  78dd              LDRB     r5,[r3,#3]
000016  1cd4              ADDS     r4,r2,#3
000018  550d              STRB     r5,[r1,r4]
;;;32     }
00001a  bd30              POP      {r4,r5,pc}
;;;33     
                          ENDP


                          AREA ||i.bsp_ScopeSend||, CODE, READONLY, ALIGN=2

                  bsp_ScopeSend PROC
;;;99     
;;;100    void bsp_ScopeSend(float data[10] , uint8_t chCount)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;101    {   
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;102    		uint8_t Send_Count; //串口需要发送的数据个数
;;;103    		uint8_t i; 
;;;104    	
;;;105    		DataScope_Get_Channel_Data(data[0], 1 ); 
000008  2101              MOVS     r1,#1
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       DataScope_Get_Channel_Data
;;;106    		DataScope_Get_Channel_Data(data[1], 2 ); 
000010  2102              MOVS     r1,#2
000012  6860              LDR      r0,[r4,#4]
000014  f7fffffe          BL       DataScope_Get_Channel_Data
;;;107    		DataScope_Get_Channel_Data(data[2], 3 );                
000018  2103              MOVS     r1,#3
00001a  68a0              LDR      r0,[r4,#8]
00001c  f7fffffe          BL       DataScope_Get_Channel_Data
;;;108    		DataScope_Get_Channel_Data(data[3], 4 );   
000020  2104              MOVS     r1,#4
000022  68e0              LDR      r0,[r4,#0xc]
000024  f7fffffe          BL       DataScope_Get_Channel_Data
;;;109    		DataScope_Get_Channel_Data(data[4], 5 ); 
000028  2105              MOVS     r1,#5
00002a  6920              LDR      r0,[r4,#0x10]
00002c  f7fffffe          BL       DataScope_Get_Channel_Data
;;;110    		DataScope_Get_Channel_Data(data[5], 6 );
000030  2106              MOVS     r1,#6
000032  6960              LDR      r0,[r4,#0x14]
000034  f7fffffe          BL       DataScope_Get_Channel_Data
;;;111    		DataScope_Get_Channel_Data(data[6], 7 );
000038  2107              MOVS     r1,#7
00003a  69a0              LDR      r0,[r4,#0x18]
00003c  f7fffffe          BL       DataScope_Get_Channel_Data
;;;112    		DataScope_Get_Channel_Data(data[7], 8 ); 
000040  2108              MOVS     r1,#8
000042  69e0              LDR      r0,[r4,#0x1c]
000044  f7fffffe          BL       DataScope_Get_Channel_Data
;;;113    		DataScope_Get_Channel_Data(data[8], 9 );  
000048  2109              MOVS     r1,#9
00004a  6a20              LDR      r0,[r4,#0x20]
00004c  f7fffffe          BL       DataScope_Get_Channel_Data
;;;114    		DataScope_Get_Channel_Data(data[9], 10);
000050  210a              MOVS     r1,#0xa
000052  6a60              LDR      r0,[r4,#0x24]
000054  f7fffffe          BL       DataScope_Get_Channel_Data
;;;115    	
;;;116    		Send_Count = DataScope_Data_Generate(chCount);
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       DataScope_Data_Generate
00005e  4607              MOV      r7,r0
;;;117    	
;;;118    		for( i = 0 ; i < Send_Count; i++) 
000060  2500              MOVS     r5,#0
000062  e006              B        |L4.114|
                  |L4.100|
;;;119    		{
;;;120    			#if 1
;;;121    			comSendChar(COM2,DataScope_OutPut_Buffer[i]);
000064  4805              LDR      r0,|L4.124|
000066  5d41              LDRB     r1,[r0,r5]
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       comSendChar
00006e  1c68              ADDS     r0,r5,#1              ;118
000070  b2c5              UXTB     r5,r0                 ;118
                  |L4.114|
000072  42bd              CMP      r5,r7                 ;118
000074  dbf6              BLT      |L4.100|
;;;122    			#else
;;;123    			while((USART1->SR&0X40)==0);  
;;;124    			USART1->DR = DataScope_OutPut_Buffer[i]; 
;;;125    			#endif
;;;126    		}
;;;127    }
000076  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

00007a  0000              DCW      0x0000
                  |L4.124|
                          DCD      DataScope_OutPut_Buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  DataScope_OutPut_Buffer
                          %        42

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_Scope.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Scope_c_9082ac51____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_Scope_c_9082ac51____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_Scope_c_9082ac51____REVSH|
#line 128
|__asm___11_bsp_Scope_c_9082ac51____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
