; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_dc_motor.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_dc_motor.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_dc_motor.crf ..\..\User\app\src\bsp_DC_Motor.c]
                          THUMB

                          AREA ||i.bspInitPWM||, CODE, READONLY, ALIGN=2

                  bspInitPWM PROC
;;;44     */
;;;45     static void bspInitPWM(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;46     {
;;;47     	GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);           //Timer1重映射     
000002  2101              MOVS     r1,#1
000004  4817              LDR      r0,|L1.100|
000006  f7fffffe          BL       GPIO_PinRemapConfig
;;;48     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
00000a  f2427010          MOV      r0,#0x2710
00000e  2100              MOVS     r1,#0
000010  2301              MOVS     r3,#1
000012  4a15              LDR      r2,|L1.104|
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  1551              ASRS     r1,r2,#21
00001a  4814              LDR      r0,|L1.108|
00001c  f7fffffe          BL       bsp_SetTIMOutPWM
;;;49     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
000020  f2427010          MOV      r0,#0x2710
000024  2100              MOVS     r1,#0
000026  2302              MOVS     r3,#2
000028  4a0f              LDR      r2,|L1.104|
00002a  e9cd1000          STRD     r1,r0,[sp,#0]
00002e  14d1              ASRS     r1,r2,#19
000030  480e              LDR      r0,|L1.108|
000032  f7fffffe          BL       bsp_SetTIMOutPWM
;;;50     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
000036  f2427010          MOV      r0,#0x2710
00003a  2100              MOVS     r1,#0
00003c  2303              MOVS     r3,#3
00003e  4a0a              LDR      r2,|L1.104|
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  1451              ASRS     r1,r2,#17
000046  4809              LDR      r0,|L1.108|
000048  f7fffffe          BL       bsp_SetTIMOutPWM
;;;51     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
00004c  f2427010          MOV      r0,#0x2710
000050  2100              MOVS     r1,#0
000052  2304              MOVS     r3,#4
000054  4a04              LDR      r2,|L1.104|
000056  e9cd1000          STRD     r1,r0,[sp,#0]
00005a  0319              LSLS     r1,r3,#12
00005c  4803              LDR      r0,|L1.108|
00005e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;52     	
;;;53     }
000062  bd1c              POP      {r2-r4,pc}
;;;54     
                          ENDP

                  |L1.100|
                          DCD      0x001600c0
                  |L1.104|
                          DCD      0x40012c00
                  |L1.108|
                          DCD      0x40011800

                          AREA ||i.bsp_InitDC_Motor||, CODE, READONLY, ALIGN=1

                  bsp_InitDC_Motor PROC
;;;28     */
;;;29     void bsp_InitDC_Motor(void)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	bspInitPWM();
000002  f7fffffe          BL       bspInitPWM
;;;32     	bsp_InitMotorPid(MotorLeft);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       bsp_InitMotorPid
;;;33     	bsp_InitMotorPid(MotorRight);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       bsp_InitMotorPid
;;;34     }
000012  bd10              POP      {r4,pc}
;;;35     
                          ENDP


                          AREA ||i.bsp_InitMotorPid||, CODE, READONLY, ALIGN=2

                  bsp_InitMotorPid PROC
;;;224    */
;;;225    void bsp_InitMotorPid(MotorSN sn)
000000  b110              CBZ      r0,|L3.8|
;;;226    {
;;;227    	switch(sn)
000002  2801              CMP      r0,#1
000004  d12d              BNE      |L3.98|
000006  e015              B        |L3.52|
                  |L3.8|
;;;228    	{
;;;229    		case MotorLeft:
;;;230    		{
;;;231    			/************************PID 左轮机**********12 0.5 1 0.8 5500*******/
;;;232    			pid[MotorLeft].target = 250;
000008  4917              LDR      r1,|L3.104|
00000a  4a18              LDR      r2,|L3.108|
00000c  6011              STR      r1,[r2,#0]  ; pid
;;;233    			
;;;234    			pid[MotorLeft].kp = 12;
00000e  4918              LDR      r1,|L3.112|
000010  6051              STR      r1,[r2,#4]  ; pid
;;;235    			pid[MotorLeft].ki = 0.1;
000012  4918              LDR      r1,|L3.116|
000014  6091              STR      r1,[r2,#8]  ; pid
;;;236    			pid[MotorLeft].kd = 0;
000016  2100              MOVS     r1,#0
000018  60d1              STR      r1,[r2,#0xc]  ; pid
;;;237    			
;;;238    			pid[MotorLeft].bias = 0 ;
00001a  6111              STR      r1,[r2,#0x10]  ; pid
;;;239    			pid[MotorLeft].lastBias = 0 ;
00001c  6151              STR      r1,[r2,#0x14]  ; pid
;;;240    			pid[MotorLeft].biasSum = 0 ;
00001e  6191              STR      r1,[r2,#0x18]  ; pid
;;;241    			
;;;242    			pid[MotorLeft].pwm = 0 ;
000020  61d1              STR      r1,[r2,#0x1c]  ; pid
;;;243    			pid[MotorLeft].pwmMax = MAXPWM ;
000022  4915              LDR      r1,|L3.120|
000024  6211              STR      r1,[r2,#0x20]  ; pid
;;;244    			
;;;245    			pid[MotorLeft].kiLimit = 20000 ;
000026  4915              LDR      r1,|L3.124|
000028  6251              STR      r1,[r2,#0x24]  ; pid
;;;246    			pid[MotorLeft].fitK = 0.8 ;
00002a  4915              LDR      r1,|L3.128|
00002c  6291              STR      r1,[r2,#0x28]  ; pid
;;;247    			pid[MotorLeft].fitD = 4000 ;
00002e  4915              LDR      r1,|L3.132|
000030  62d1              STR      r1,[r2,#0x2c]  ; pid
;;;248    		}break;
000032  e016              B        |L3.98|
                  |L3.52|
;;;249    		
;;;250    		case MotorRight:
;;;251    		{
;;;252    			/************************PID 右轮机************************/
;;;253    			pid[MotorRight].target = 250;
000034  490c              LDR      r1,|L3.104|
000036  4a0d              LDR      r2,|L3.108|
000038  6311              STR      r1,[r2,#0x30]  ; pid
;;;254    			
;;;255    			pid[MotorRight].kp = 12;
00003a  4a0d              LDR      r2,|L3.112|
00003c  490b              LDR      r1,|L3.108|
00003e  634a              STR      r2,[r1,#0x34]
;;;256    			pid[MotorRight].ki = 0.1;
000040  4a0c              LDR      r2,|L3.116|
000042  638a              STR      r2,[r1,#0x38]
;;;257    			pid[MotorRight].kd = 0;
000044  2200              MOVS     r2,#0
000046  63ca              STR      r2,[r1,#0x3c]
;;;258    			
;;;259    			pid[MotorRight].bias = 0 ;
000048  640a              STR      r2,[r1,#0x40]
;;;260    			pid[MotorRight].lastBias = 0 ;
00004a  644a              STR      r2,[r1,#0x44]
;;;261    			pid[MotorRight].biasSum = 0 ;
00004c  648a              STR      r2,[r1,#0x48]
;;;262    			
;;;263    			pid[MotorRight].pwm = 0 ;
00004e  64ca              STR      r2,[r1,#0x4c]
;;;264    			pid[MotorRight].pwmMax = MAXPWM ;
000050  4a09              LDR      r2,|L3.120|
000052  650a              STR      r2,[r1,#0x50]
;;;265    			
;;;266    			pid[MotorRight].kiLimit = 20000 ;
000054  4a09              LDR      r2,|L3.124|
000056  654a              STR      r2,[r1,#0x54]
;;;267    			pid[MotorRight].fitK = 0.8 ;
000058  4a09              LDR      r2,|L3.128|
00005a  658a              STR      r2,[r1,#0x58]
;;;268    			pid[MotorRight].fitD = 4000 ;
00005c  4a09              LDR      r2,|L3.132|
00005e  65ca              STR      r2,[r1,#0x5c]
;;;269    		}break;
000060  bf00              NOP      
                  |L3.98|
000062  bf00              NOP                            ;248
;;;270    	}
;;;271    }
000064  4770              BX       lr
;;;272    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      0x437a0000
                  |L3.108|
                          DCD      pid
                  |L3.112|
                          DCD      0x41400000
                  |L3.116|
                          DCD      0x3dcccccd
                  |L3.120|
                          DCD      0x461c4000
                  |L3.124|
                          DCD      0x469c4000
                  |L3.128|
                          DCD      0x3f4ccccd
                  |L3.132|
                          DCD      0x457a0000

                          AREA ||i.bsp_MotorBrake||, CODE, READONLY, ALIGN=2

                  bsp_MotorBrake PROC
;;;62     */
;;;63     void bsp_MotorBrake(MotorSN sn)
000000  b51c              PUSH     {r2-r4,lr}
;;;64     {
000002  4604              MOV      r4,r0
;;;65     	switch(sn)
000004  b114              CBZ      r4,|L4.12|
000006  2c01              CMP      r4,#1
000008  d13a              BNE      |L4.128|
00000a  e01c              B        |L4.70|
                  |L4.12|
;;;66     	{
;;;67     		case MotorLeft:
;;;68     		{
;;;69     			motor[MotorLeft].isRunning = false ;
00000c  2000              MOVS     r0,#0
00000e  491d              LDR      r1,|L4.132|
000010  7008              STRB     r0,[r1,#0]
;;;70     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0,MAXPWM); 
000012  f2427010          MOV      r0,#0x2710
000016  2100              MOVS     r1,#0
000018  2303              MOVS     r3,#3
00001a  4a1b              LDR      r2,|L4.136|
00001c  e9cd1000          STRD     r1,r0,[sp,#0]
000020  1451              ASRS     r1,r2,#17
000022  481a              LDR      r0,|L4.140|
000024  f7fffffe          BL       bsp_SetTIMOutPWM
;;;71     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0,MAXPWM);
000028  f2427010          MOV      r0,#0x2710
00002c  2100              MOVS     r1,#0
00002e  2304              MOVS     r3,#4
000030  4a15              LDR      r2,|L4.136|
000032  e9cd1000          STRD     r1,r0,[sp,#0]
000036  0319              LSLS     r1,r3,#12
000038  4814              LDR      r0,|L4.140|
00003a  f7fffffe          BL       bsp_SetTIMOutPWM
;;;72     			bsp_InitMotorPid(MotorLeft);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       bsp_InitMotorPid
;;;73     			
;;;74     		}break;
000044  e01c              B        |L4.128|
                  |L4.70|
;;;75     		
;;;76     		case MotorRight:
;;;77     		{
;;;78     			motor[MotorRight].isRunning = false ;
000046  2000              MOVS     r0,#0
000048  490e              LDR      r1,|L4.132|
00004a  7308              STRB     r0,[r1,#0xc]
;;;79     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0,MAXPWM);
00004c  f2427010          MOV      r0,#0x2710
000050  2100              MOVS     r1,#0
000052  2301              MOVS     r3,#1
000054  4a0c              LDR      r2,|L4.136|
000056  e9cd1000          STRD     r1,r0,[sp,#0]
00005a  1551              ASRS     r1,r2,#21
00005c  480b              LDR      r0,|L4.140|
00005e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;80     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0,MAXPWM);
000062  f2427010          MOV      r0,#0x2710
000066  2100              MOVS     r1,#0
000068  2302              MOVS     r3,#2
00006a  4a07              LDR      r2,|L4.136|
00006c  e9cd1000          STRD     r1,r0,[sp,#0]
000070  14d1              ASRS     r1,r2,#19
000072  4806              LDR      r0,|L4.140|
000074  f7fffffe          BL       bsp_SetTIMOutPWM
;;;81     			bsp_InitMotorPid(MotorRight);
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       bsp_InitMotorPid
;;;82     			
;;;83     		}break;
00007e  bf00              NOP      
                  |L4.128|
000080  bf00              NOP                            ;74
;;;84     	}
;;;85     	
;;;86     }
000082  bd1c              POP      {r2-r4,pc}
;;;87     
                          ENDP

                  |L4.132|
                          DCD      motor
                  |L4.136|
                          DCD      0x40012c00
                  |L4.140|
                          DCD      0x40011800

                          AREA ||i.bsp_MotorCoast||, CODE, READONLY, ALIGN=2

                  bsp_MotorCoast PROC
;;;95     */
;;;96     void bsp_MotorCoast(MotorSN sn)
000000  b51c              PUSH     {r2-r4,lr}
;;;97     {
000002  4604              MOV      r4,r0
;;;98     	switch(sn)
000004  b114              CBZ      r4,|L5.12|
000006  2c01              CMP      r4,#1
000008  d12a              BNE      |L5.96|
00000a  e014              B        |L5.54|
                  |L5.12|
;;;99     	{
;;;100    		case MotorLeft:
;;;101    		{
;;;102    			motor[MotorLeft].isRunning = false ;
00000c  2000              MOVS     r0,#0
00000e  4915              LDR      r1,|L5.100|
000010  7008              STRB     r0,[r1,#0]
;;;103    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0,0); 
000012  9000              STR      r0,[sp,#0]
000014  2303              MOVS     r3,#3
000016  4a14              LDR      r2,|L5.104|
000018  1451              ASRS     r1,r2,#17
00001a  9001              STR      r0,[sp,#4]
00001c  4813              LDR      r0,|L5.108|
00001e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;104    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0,0);
000022  2000              MOVS     r0,#0
000024  9000              STR      r0,[sp,#0]
000026  2304              MOVS     r3,#4
000028  4a0f              LDR      r2,|L5.104|
00002a  0319              LSLS     r1,r3,#12
00002c  9001              STR      r0,[sp,#4]
00002e  480f              LDR      r0,|L5.108|
000030  f7fffffe          BL       bsp_SetTIMOutPWM
;;;105    		}break;
000034  e014              B        |L5.96|
                  |L5.54|
;;;106    		
;;;107    		case MotorRight:
;;;108    		{
;;;109    			motor[MotorRight].isRunning = false ;
000036  2000              MOVS     r0,#0
000038  490a              LDR      r1,|L5.100|
00003a  7308              STRB     r0,[r1,#0xc]
;;;110    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0,0);
00003c  9000              STR      r0,[sp,#0]
00003e  2301              MOVS     r3,#1
000040  4a09              LDR      r2,|L5.104|
000042  1551              ASRS     r1,r2,#21
000044  9001              STR      r0,[sp,#4]
000046  4809              LDR      r0,|L5.108|
000048  f7fffffe          BL       bsp_SetTIMOutPWM
;;;111    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0,0);
00004c  2000              MOVS     r0,#0
00004e  9000              STR      r0,[sp,#0]
000050  2302              MOVS     r3,#2
000052  4a05              LDR      r2,|L5.104|
000054  14d1              ASRS     r1,r2,#19
000056  9001              STR      r0,[sp,#4]
000058  4804              LDR      r0,|L5.108|
00005a  f7fffffe          BL       bsp_SetTIMOutPWM
;;;112    		}break;
00005e  bf00              NOP      
                  |L5.96|
000060  bf00              NOP                            ;105
;;;113    	}
;;;114    	
;;;115    }
000062  bd1c              POP      {r2-r4,pc}
;;;116    
                          ENDP

                  |L5.100|
                          DCD      motor
                  |L5.104|
                          DCD      0x40012c00
                  |L5.108|
                          DCD      0x40011800

                          AREA ||i.bsp_MotorGetDir||, CODE, READONLY, ALIGN=2

                  bsp_MotorGetDir PROC
;;;178    */
;;;179    MotorDir bsp_MotorGetDir(MotorSN sn)
000000  4601              MOV      r1,r0
;;;180    {
;;;181    	return motor[sn].dir;
000002  eb010041          ADD      r0,r1,r1,LSL #1
000006  4a02              LDR      r2,|L6.16|
000008  eb020080          ADD      r0,r2,r0,LSL #2
00000c  7a00              LDRB     r0,[r0,#8]
;;;182    }
00000e  4770              BX       lr
;;;183    
                          ENDP

                  |L6.16|
                          DCD      motor

                          AREA ||i.bsp_MotorRun||, CODE, READONLY, ALIGN=1

                  bsp_MotorRun PROC
;;;394    
;;;395    void bsp_MotorRun(void)
000000  b510              PUSH     {r4,lr}
;;;396    {
;;;397    	bsp_SetMotorPWM(MotorLeft, Forward,Speed);
000002  f44f5296          MOV      r2,#0x12c0
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       bsp_SetMotorPWM
;;;398    	bsp_SetMotorPWM(MotorRight,Forward,Speed);
00000e  f44f5296          MOV      r2,#0x12c0
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       bsp_SetMotorPWM
;;;399    }
00001a  bd10              POP      {r4,pc}
;;;400    
                          ENDP


                          AREA ||i.bsp_MotorRunL||, CODE, READONLY, ALIGN=1

                  bsp_MotorRunL PROC
;;;388    
;;;389    void bsp_MotorRunL(void)
000000  b510              PUSH     {r4,lr}
;;;390    {
;;;391    	bsp_SetMotorPWM(MotorLeft, Forward,Speed);
000002  f44f5296          MOV      r2,#0x12c0
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       bsp_SetMotorPWM
;;;392    	bsp_SetMotorPWM(MotorRight,Forward,Speed+VAL);
00000e  f2413288          MOV      r2,#0x1388
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       bsp_SetMotorPWM
;;;393    }
00001a  bd10              POP      {r4,pc}
;;;394    
                          ENDP


                          AREA ||i.bsp_MotorRunR||, CODE, READONLY, ALIGN=1

                  bsp_MotorRunR PROC
;;;382    
;;;383    void bsp_MotorRunR(void)
000000  b510              PUSH     {r4,lr}
;;;384    {
;;;385    	bsp_SetMotorPWM(MotorLeft, Forward,Speed+VAL);
000002  f2413288          MOV      r2,#0x1388
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       bsp_SetMotorPWM
;;;386    	bsp_SetMotorPWM(MotorRight,Forward,Speed);
00000e  f44f5296          MOV      r2,#0x12c0
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       bsp_SetMotorPWM
;;;387    }
00001a  bd10              POP      {r4,pc}
;;;388    
                          ENDP


                          AREA ||i.bsp_PidControlAct||, CODE, READONLY, ALIGN=2

                  bsp_PidControlAct PROC
;;;282    */
;;;283    void bsp_PidControlAct(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;284    {
000004  b085              SUB      sp,sp,#0x14
;;;285    	int32_t speed = 0 ;
000006  2400              MOVS     r4,#0
;;;286    	float S_Out[4] = {0};
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
;;;287    	
;;;288    	UNUSED(S_Out);
;;;289    	
;;;290    	/************************显示速度波形************************/
;;;291    	#if 0 
;;;292    	S_Out[0] = bsp_EncoderGetSpeed(EncoderLeft);
;;;293    	S_Out[1] = bsp_EncoderGetSpeed(EncoderRight);
;;;294    	SDS_OutPut_Data(S_Out);
;;;295    	#endif
;;;296    	
;;;297    	/************************PID  左轮************************/
;;;298    	if(motor[MotorLeft].isRunning)
000012  488d              LDR      r0,|L10.584|
000014  7800              LDRB     r0,[r0,#0]  ; motor
000016  2800              CMP      r0,#0
000018  d07e              BEQ      |L10.280|
;;;299    	{
;;;300    		speed = bsp_EncoderGetSpeed(EncoderLeft);//当前速度毫米/秒
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       bsp_EncoderGetSpeed
000020  4605              MOV      r5,r0
000022  f7fffffe          BL       __aeabi_f2iz
000026  4604              MOV      r4,r0
;;;301    		pid[MotorLeft].bias = pidabs(pid[MotorLeft].target) - speed;//当前误差值
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       __aeabi_i2f
00002e  4605              MOV      r5,r0
000030  4986              LDR      r1,|L10.588|
000032  6808              LDR      r0,[r1,#0]  ; pid
000034  f7fffffe          BL       pidabs
000038  4606              MOV      r6,r0
00003a  4629              MOV      r1,r5
00003c  f7fffffe          BL       __aeabi_fsub
000040  4982              LDR      r1,|L10.588|
000042  6108              STR      r0,[r1,#0x10]  ; pid
;;;302    		pid[MotorLeft].biasSum += pid[MotorLeft].bias;//误差累积
000044  460a              MOV      r2,r1
000046  6911              LDR      r1,[r2,#0x10]  ; pid
000048  6990              LDR      r0,[r2,#0x18]  ; pid
00004a  f7fffffe          BL       __aeabi_fadd
00004e  497f              LDR      r1,|L10.588|
000050  6188              STR      r0,[r1,#0x18]  ; pid
;;;303    		
;;;304    		//积分限制
;;;305    		if(pid[MotorLeft].biasSum >= pid[MotorLeft].kiLimit)
000052  460a              MOV      r2,r1
000054  6a51              LDR      r1,[r2,#0x24]  ; pid
000056  6990              LDR      r0,[r2,#0x18]  ; pid
000058  f7fffffe          BL       __aeabi_cfrcmple
00005c  d803              BHI      |L10.102|
;;;306    		{
;;;307    			pid[MotorLeft].biasSum = pid[MotorLeft].kiLimit;
00005e  487b              LDR      r0,|L10.588|
000060  6a40              LDR      r0,[r0,#0x24]  ; pid
000062  497a              LDR      r1,|L10.588|
000064  6188              STR      r0,[r1,#0x18]  ; pid
                  |L10.102|
;;;308    		}
;;;309    			
;;;310    		pid[MotorLeft].pwm = (pid[MotorLeft].fitK*pidabs(pid[MotorLeft].target) + pid[MotorLeft].fitD) + pid[MotorLeft].kp*pid[MotorLeft].bias + pid[MotorLeft].ki*pid[MotorLeft].biasSum + pid[MotorLeft].kd*(pid[MotorLeft].bias-pid[MotorLeft].lastBias); 
000066  4a79              LDR      r2,|L10.588|
000068  6951              LDR      r1,[r2,#0x14]  ; pid
00006a  6910              LDR      r0,[r2,#0x10]  ; pid
00006c  f7fffffe          BL       __aeabi_fsub
000070  4607              MOV      r7,r0
000072  4876              LDR      r0,|L10.588|
000074  68c1              LDR      r1,[r0,#0xc]  ; pid
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       __aeabi_fmul
00007c  4605              MOV      r5,r0
00007e  4a73              LDR      r2,|L10.588|
000080  6991              LDR      r1,[r2,#0x18]  ; pid
000082  6890              LDR      r0,[r2,#8]  ; pid
000084  f7fffffe          BL       __aeabi_fmul
000088  4682              MOV      r10,r0
00008a  4a70              LDR      r2,|L10.588|
00008c  6911              LDR      r1,[r2,#0x10]  ; pid
00008e  6850              LDR      r0,[r2,#4]  ; pid
000090  f7fffffe          BL       __aeabi_fmul
000094  4683              MOV      r11,r0
000096  496d              LDR      r1,|L10.588|
000098  6808              LDR      r0,[r1,#0]  ; pid
00009a  f7fffffe          BL       pidabs
00009e  9000              STR      r0,[sp,#0]
0000a0  486a              LDR      r0,|L10.588|
0000a2  6a81              LDR      r1,[r0,#0x28]  ; pid
0000a4  9800              LDR      r0,[sp,#0]
0000a6  f7fffffe          BL       __aeabi_fmul
0000aa  4681              MOV      r9,r0
0000ac  4867              LDR      r0,|L10.588|
0000ae  6ac1              LDR      r1,[r0,#0x2c]  ; pid
0000b0  4648              MOV      r0,r9
0000b2  f7fffffe          BL       __aeabi_fadd
0000b6  4680              MOV      r8,r0
0000b8  4659              MOV      r1,r11
0000ba  f7fffffe          BL       __aeabi_fadd
0000be  4607              MOV      r7,r0
0000c0  4651              MOV      r1,r10
0000c2  f7fffffe          BL       __aeabi_fadd
0000c6  4606              MOV      r6,r0
0000c8  4629              MOV      r1,r5
0000ca  f7fffffe          BL       __aeabi_fadd
0000ce  495f              LDR      r1,|L10.588|
0000d0  61c8              STR      r0,[r1,#0x1c]  ; pid
;;;311    		pid[MotorLeft].lastBias = pid[MotorLeft].bias;//上次误差
0000d2  4608              MOV      r0,r1
0000d4  6900              LDR      r0,[r0,#0x10]  ; pid
0000d6  6148              STR      r0,[r1,#0x14]  ; pid
;;;312    		
;;;313    		//PWM限制
;;;314    		if(pid[MotorLeft].pwm >= pid[MotorLeft].pwmMax)
0000d8  460a              MOV      r2,r1
0000da  6a11              LDR      r1,[r2,#0x20]  ; pid
0000dc  69d0              LDR      r0,[r2,#0x1c]  ; pid
0000de  f7fffffe          BL       __aeabi_cfrcmple
0000e2  d804              BHI      |L10.238|
;;;315    		{
;;;316    			pid[MotorLeft].pwm = pid[MotorLeft].pwmMax;
0000e4  4859              LDR      r0,|L10.588|
0000e6  6a00              LDR      r0,[r0,#0x20]  ; pid
0000e8  4958              LDR      r1,|L10.588|
0000ea  61c8              STR      r0,[r1,#0x1c]  ; pid
0000ec  e008              B        |L10.256|
                  |L10.238|
;;;317    		}
;;;318    		else if(pid[MotorLeft].pwm <= 0)
0000ee  4957              LDR      r1,|L10.588|
0000f0  69c8              LDR      r0,[r1,#0x1c]  ; pid
0000f2  2100              MOVS     r1,#0
0000f4  f7fffffe          BL       __aeabi_cfcmple
0000f8  d802              BHI      |L10.256|
;;;319    		{
;;;320    			pid[MotorLeft].pwm = 0 ;
0000fa  2000              MOVS     r0,#0
0000fc  4953              LDR      r1,|L10.588|
0000fe  61c8              STR      r0,[r1,#0x1c]  ; pid
                  |L10.256|
;;;321    		}
;;;322    		#if 0
;;;323    		printf("left:%dmm/s  ",bsp_EncoderGetSpeed(EncoderLeft));
;;;324    		printf("pid[MotorLeft].bias:%f  ",pid[MotorLeft].bias);
;;;325    		printf("pid[MotorLeft].biasSum:%f  ",pid[MotorLeft].biasSum);
;;;326    		printf("pid[MotorLeft].lastBias:%f  ",pid[MotorLeft].lastBias);
;;;327    		printf("pid[MotorLeft].pwm:%f  ",pid[MotorLeft].pwm);
;;;328    		#endif
;;;329    		bsp_SetMotorPWM(MotorLeft, pid[MotorLeft].target>0 ? Forward:Backward, pid[MotorLeft].pwm);
000100  4952              LDR      r1,|L10.588|
000102  69c8              LDR      r0,[r1,#0x1c]  ; pid
000104  f7fffffe          BL       __aeabi_f2uiz
000108  b285              UXTH     r5,r0
00010a  4950              LDR      r1,|L10.588|
00010c  6808              LDR      r0,[r1,#0]  ; pid
00010e  2100              MOVS     r1,#0
000110  f7fffffe          BL       __aeabi_cfrcmple
000114  d303              BCC      |L10.286|
000116  e000              B        |L10.282|
                  |L10.280|
000118  e008              B        |L10.300|
                  |L10.282|
00011a  2001              MOVS     r0,#1
00011c  e000              B        |L10.288|
                  |L10.286|
00011e  2000              MOVS     r0,#0
                  |L10.288|
000120  4606              MOV      r6,r0
000122  462a              MOV      r2,r5
000124  4631              MOV      r1,r6
000126  2000              MOVS     r0,#0
000128  f7fffffe          BL       bsp_SetMotorPWM
                  |L10.300|
;;;330    	}
;;;331    	
;;;332    	
;;;333    	/************************PID  右轮************************/
;;;334    	if(motor[MotorRight].isRunning)
00012c  4846              LDR      r0,|L10.584|
00012e  7b00              LDRB     r0,[r0,#0xc]  ; motor
000130  2800              CMP      r0,#0
000132  d07d              BEQ      |L10.560|
;;;335    	{
;;;336    		speed = bsp_EncoderGetSpeed(EncoderRight);//当前速度毫米/秒
000134  2001              MOVS     r0,#1
000136  f7fffffe          BL       bsp_EncoderGetSpeed
00013a  4605              MOV      r5,r0
00013c  f7fffffe          BL       __aeabi_f2iz
000140  4604              MOV      r4,r0
;;;337    		pid[MotorRight].bias = pidabs(pid[MotorRight].target) - speed;//当前误差值
000142  4620              MOV      r0,r4
000144  f7fffffe          BL       __aeabi_i2f
000148  4605              MOV      r5,r0
00014a  4940              LDR      r1,|L10.588|
00014c  6b08              LDR      r0,[r1,#0x30]  ; pid
00014e  f7fffffe          BL       pidabs
000152  4606              MOV      r6,r0
000154  4629              MOV      r1,r5
000156  f7fffffe          BL       __aeabi_fsub
00015a  493c              LDR      r1,|L10.588|
00015c  6408              STR      r0,[r1,#0x40]
;;;338    		pid[MotorRight].biasSum += pid[MotorRight].bias;//误差累积
00015e  460a              MOV      r2,r1
000160  6c11              LDR      r1,[r2,#0x40]
000162  6c90              LDR      r0,[r2,#0x48]
000164  f7fffffe          BL       __aeabi_fadd
000168  4938              LDR      r1,|L10.588|
00016a  6488              STR      r0,[r1,#0x48]
;;;339    		
;;;340    		//积分限制
;;;341    		if(pid[MotorRight].biasSum >= pid[MotorRight].kiLimit)
00016c  460a              MOV      r2,r1
00016e  6d51              LDR      r1,[r2,#0x54]
000170  6c90              LDR      r0,[r2,#0x48]
000172  f7fffffe          BL       __aeabi_cfrcmple
000176  d802              BHI      |L10.382|
;;;342    		{
;;;343    			pid[MotorRight].biasSum = pid[MotorRight].kiLimit;
000178  4834              LDR      r0,|L10.588|
00017a  6d41              LDR      r1,[r0,#0x54]
00017c  6481              STR      r1,[r0,#0x48]
                  |L10.382|
;;;344    		}
;;;345    			
;;;346    		pid[MotorRight].pwm = (pid[MotorRight].fitK*pidabs(pid[MotorRight].target) + pid[MotorRight].fitD) + pid[MotorRight].kp*pid[MotorRight].bias + pid[MotorRight].ki*pid[MotorRight].biasSum + pid[MotorRight].kd*(pid[MotorRight].bias-pid[MotorRight].lastBias); 
00017e  4a33              LDR      r2,|L10.588|
000180  6c51              LDR      r1,[r2,#0x44]
000182  6c10              LDR      r0,[r2,#0x40]
000184  f7fffffe          BL       __aeabi_fsub
000188  4607              MOV      r7,r0
00018a  4830              LDR      r0,|L10.588|
00018c  6bc1              LDR      r1,[r0,#0x3c]
00018e  4638              MOV      r0,r7
000190  f7fffffe          BL       __aeabi_fmul
000194  4605              MOV      r5,r0
000196  4a2d              LDR      r2,|L10.588|
000198  6c91              LDR      r1,[r2,#0x48]
00019a  6b90              LDR      r0,[r2,#0x38]
00019c  f7fffffe          BL       __aeabi_fmul
0001a0  4a2a              LDR      r2,|L10.588|
0001a2  9000              STR      r0,[sp,#0]
0001a4  6c11              LDR      r1,[r2,#0x40]
0001a6  6b50              LDR      r0,[r2,#0x34]
0001a8  f7fffffe          BL       __aeabi_fmul
0001ac  4682              MOV      r10,r0
0001ae  4927              LDR      r1,|L10.588|
0001b0  6b08              LDR      r0,[r1,#0x30]  ; pid
0001b2  f7fffffe          BL       pidabs
0001b6  4683              MOV      r11,r0
0001b8  4824              LDR      r0,|L10.588|
0001ba  6d81              LDR      r1,[r0,#0x58]
0001bc  4658              MOV      r0,r11
0001be  f7fffffe          BL       __aeabi_fmul
0001c2  4681              MOV      r9,r0
0001c4  4821              LDR      r0,|L10.588|
0001c6  6dc1              LDR      r1,[r0,#0x5c]
0001c8  4648              MOV      r0,r9
0001ca  f7fffffe          BL       __aeabi_fadd
0001ce  4680              MOV      r8,r0
0001d0  4651              MOV      r1,r10
0001d2  f7fffffe          BL       __aeabi_fadd
0001d6  4607              MOV      r7,r0
0001d8  9900              LDR      r1,[sp,#0]
0001da  f7fffffe          BL       __aeabi_fadd
0001de  4606              MOV      r6,r0
0001e0  4629              MOV      r1,r5
0001e2  f7fffffe          BL       __aeabi_fadd
0001e6  4919              LDR      r1,|L10.588|
0001e8  64c8              STR      r0,[r1,#0x4c]
;;;347    		pid[MotorRight].lastBias = pid[MotorRight].bias;//上次误差
0001ea  4608              MOV      r0,r1
0001ec  6c01              LDR      r1,[r0,#0x40]
0001ee  6441              STR      r1,[r0,#0x44]
;;;348    		
;;;349    		//PWM限制
;;;350    		if(pid[MotorRight].pwm >= pid[MotorRight].pwmMax)
0001f0  4602              MOV      r2,r0
0001f2  6d11              LDR      r1,[r2,#0x50]
0001f4  6cd0              LDR      r0,[r2,#0x4c]
0001f6  f7fffffe          BL       __aeabi_cfrcmple
0001fa  d803              BHI      |L10.516|
;;;351    		{
;;;352    			pid[MotorRight].pwm = pid[MotorRight].pwmMax;
0001fc  4813              LDR      r0,|L10.588|
0001fe  6d01              LDR      r1,[r0,#0x50]
000200  64c1              STR      r1,[r0,#0x4c]
000202  e008              B        |L10.534|
                  |L10.516|
;;;353    		}
;;;354    		else if(pid[MotorRight].pwm <= 0)
000204  4911              LDR      r1,|L10.588|
000206  6cc8              LDR      r0,[r1,#0x4c]
000208  2100              MOVS     r1,#0
00020a  f7fffffe          BL       __aeabi_cfcmple
00020e  d802              BHI      |L10.534|
;;;355    		{
;;;356    			pid[MotorRight].pwm = 0 ;
000210  2100              MOVS     r1,#0
000212  480e              LDR      r0,|L10.588|
000214  64c1              STR      r1,[r0,#0x4c]
                  |L10.534|
;;;357    		}
;;;358    		#if 0
;;;359    		printf("right:%dmm/s  ",bsp_EncoderGetSpeed(EncoderRight));
;;;360    		printf("pid[MotorRight].bias:%f  ",pid[MotorRight].bias);
;;;361    		printf("pid[MotorRight].biasSum:%f  ",pid[MotorRight].biasSum);
;;;362    		printf("pid[MotorRight].lastBias:%f  ",pid[MotorRight].lastBias);
;;;363    		printf("pid[MotorRight].pwm:%f\r\n",pid[MotorRight].pwm);
;;;364    		#endif
;;;365    		bsp_SetMotorPWM(MotorRight, pid[MotorRight].target>0 ? Forward:Backward, pid[MotorRight].pwm);
000216  490d              LDR      r1,|L10.588|
000218  6cc8              LDR      r0,[r1,#0x4c]
00021a  f7fffffe          BL       __aeabi_f2uiz
00021e  b285              UXTH     r5,r0
000220  490a              LDR      r1,|L10.588|
000222  6b08              LDR      r0,[r1,#0x30]  ; pid
000224  2100              MOVS     r1,#0
000226  f7fffffe          BL       __aeabi_cfrcmple
00022a  d302              BCC      |L10.562|
00022c  2001              MOVS     r0,#1
00022e  e001              B        |L10.564|
                  |L10.560|
000230  e006              B        |L10.576|
                  |L10.562|
000232  2000              MOVS     r0,#0
                  |L10.564|
000234  4606              MOV      r6,r0
000236  462a              MOV      r2,r5
000238  4631              MOV      r1,r6
00023a  2001              MOVS     r0,#1
00023c  f7fffffe          BL       bsp_SetMotorPWM
                  |L10.576|
;;;366    	}
;;;367    	
;;;368    }
000240  b005              ADD      sp,sp,#0x14
000242  e8bd8ff0          POP      {r4-r11,pc}
;;;369    
                          ENDP

000246  0000              DCW      0x0000
                  |L10.584|
                          DCD      motor
                  |L10.588|
                          DCD      pid

                          AREA ||i.bsp_SetMotorPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetMotorPWM PROC
;;;124    */
;;;125    void bsp_SetMotorPWM(MotorSN sn, MotorDir dir, uint16_t pwm)
000000  b57c              PUSH     {r2-r6,lr}
;;;126    {	
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;127    	//如果给出的PWM已经大于最大值，则直接退出函数
;;;128    	if(pwm > MAXPWM)
000008  f2427010          MOV      r0,#0x2710
00000c  4284              CMP      r4,r0
00000e  dd03              BLE      |L11.24|
;;;129    	{
;;;130    		WARNING("PWM值超过了MAXPWM\r\n");
000010  a034              ADR      r0,|L11.228|
000012  f7fffffe          BL       __2printf
                  |L11.22|
;;;131    		return ;
;;;132    	}
;;;133    	
;;;134    	switch(sn)
;;;135    	{
;;;136    		case MotorLeft:
;;;137    		{
;;;138    			if(dir == Forward)
;;;139    			{
;;;140    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0, 0); 
;;;141    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,DC_PWM_T, pwm);
;;;142    				motor[MotorLeft].dir = Forward;/*用于编码器标记正负*/
;;;143    			}
;;;144    			else
;;;145    			{
;;;146    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0, 0);
;;;147    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3, DC_PWM_T,pwm); 
;;;148    				motor[MotorLeft].dir = Backward;/*用于编码器标记正负*/
;;;149    			}
;;;150    		}break;
;;;151    		
;;;152    		case MotorRight:
;;;153    		{
;;;154    			if(dir == Backward)
;;;155    			{
;;;156    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0, 0);
;;;157    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,DC_PWM_T, pwm);
;;;158    				motor[MotorRight].dir = Forward;/*用于编码器标记正负*/
;;;159    			}
;;;160    			else
;;;161    			{
;;;162    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0, 0);
;;;163    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,DC_PWM_T, pwm);
;;;164    				motor[MotorRight].dir = Backward;/*用于编码器标记正负*/
;;;165    			}
;;;166    		}break;
;;;167    	}
;;;168    }
000016  bd7c              POP      {r2-r6,pc}
                  |L11.24|
000018  b116              CBZ      r6,|L11.32|
00001a  2e01              CMP      r6,#1                 ;134
00001c  d15f              BNE      |L11.222|
00001e  e02e              B        |L11.126|
                  |L11.32|
000020  b9b5              CBNZ     r5,|L11.80|
000022  2000              MOVS     r0,#0                 ;140
000024  9000              STR      r0,[sp,#0]            ;140
000026  2303              MOVS     r3,#3                 ;140
000028  4a33              LDR      r2,|L11.248|
00002a  1451              ASRS     r1,r2,#17             ;140
00002c  9001              STR      r0,[sp,#4]            ;140
00002e  4833              LDR      r0,|L11.252|
000030  f7fffffe          BL       bsp_SetTIMOutPWM
000034  f2475030          MOV      r0,#0x7530            ;141
000038  2304              MOVS     r3,#4                 ;141
00003a  4a2f              LDR      r2,|L11.248|
00003c  0319              LSLS     r1,r3,#12             ;141
00003e  e9cd0400          STRD     r0,r4,[sp,#0]         ;141
000042  482e              LDR      r0,|L11.252|
000044  f7fffffe          BL       bsp_SetTIMOutPWM
000048  2000              MOVS     r0,#0                 ;142
00004a  492d              LDR      r1,|L11.256|
00004c  7208              STRB     r0,[r1,#8]            ;142
00004e  e015              B        |L11.124|
                  |L11.80|
000050  2000              MOVS     r0,#0                 ;146
000052  9000              STR      r0,[sp,#0]            ;146
000054  2304              MOVS     r3,#4                 ;146
000056  4a28              LDR      r2,|L11.248|
000058  0319              LSLS     r1,r3,#12             ;146
00005a  9001              STR      r0,[sp,#4]            ;146
00005c  4827              LDR      r0,|L11.252|
00005e  f7fffffe          BL       bsp_SetTIMOutPWM
000062  f2475030          MOV      r0,#0x7530            ;147
000066  2303              MOVS     r3,#3                 ;147
000068  4a23              LDR      r2,|L11.248|
00006a  1451              ASRS     r1,r2,#17             ;147
00006c  e9cd0400          STRD     r0,r4,[sp,#0]         ;147
000070  4822              LDR      r0,|L11.252|
000072  f7fffffe          BL       bsp_SetTIMOutPWM
000076  2001              MOVS     r0,#1                 ;148
000078  4921              LDR      r1,|L11.256|
00007a  7208              STRB     r0,[r1,#8]            ;148
                  |L11.124|
00007c  e02f              B        |L11.222|
                  |L11.126|
00007e  2d01              CMP      r5,#1                 ;154
000080  d116              BNE      |L11.176|
000082  2000              MOVS     r0,#0                 ;156
000084  9000              STR      r0,[sp,#0]            ;156
000086  2301              MOVS     r3,#1                 ;156
000088  4a1b              LDR      r2,|L11.248|
00008a  1551              ASRS     r1,r2,#21             ;156
00008c  9001              STR      r0,[sp,#4]            ;156
00008e  481b              LDR      r0,|L11.252|
000090  f7fffffe          BL       bsp_SetTIMOutPWM
000094  f2475030          MOV      r0,#0x7530            ;157
000098  2302              MOVS     r3,#2                 ;157
00009a  4a17              LDR      r2,|L11.248|
00009c  14d1              ASRS     r1,r2,#19             ;157
00009e  e9cd0400          STRD     r0,r4,[sp,#0]         ;157
0000a2  4816              LDR      r0,|L11.252|
0000a4  f7fffffe          BL       bsp_SetTIMOutPWM
0000a8  2100              MOVS     r1,#0                 ;158
0000aa  4815              LDR      r0,|L11.256|
0000ac  7501              STRB     r1,[r0,#0x14]         ;158
0000ae  e015              B        |L11.220|
                  |L11.176|
0000b0  2000              MOVS     r0,#0                 ;162
0000b2  9000              STR      r0,[sp,#0]            ;162
0000b4  2302              MOVS     r3,#2                 ;162
0000b6  4a10              LDR      r2,|L11.248|
0000b8  14d1              ASRS     r1,r2,#19             ;162
0000ba  9001              STR      r0,[sp,#4]            ;162
0000bc  480f              LDR      r0,|L11.252|
0000be  f7fffffe          BL       bsp_SetTIMOutPWM
0000c2  f2475030          MOV      r0,#0x7530            ;163
0000c6  2301              MOVS     r3,#1                 ;163
0000c8  4a0b              LDR      r2,|L11.248|
0000ca  1551              ASRS     r1,r2,#21             ;163
0000cc  e9cd0400          STRD     r0,r4,[sp,#0]         ;163
0000d0  480a              LDR      r0,|L11.252|
0000d2  f7fffffe          BL       bsp_SetTIMOutPWM
0000d6  2101              MOVS     r1,#1                 ;164
0000d8  4809              LDR      r0,|L11.256|
0000da  7501              STRB     r1,[r0,#0x14]         ;164
                  |L11.220|
0000dc  bf00              NOP                            ;166
                  |L11.222|
0000de  bf00              NOP                            ;150
0000e0  bf00              NOP      
0000e2  e798              B        |L11.22|
;;;169    
                          ENDP

                  |L11.228|
0000e4  50574dd6          DCB      "PWM",214,181,179,172,185,253,193,203,"MAXPWM\r\n",0
0000e8  b5b3acb9
0000ec  fdc1cb4d
0000f0  41585057
0000f4  4d0d0a00
                  |L11.248|
                          DCD      0x40012c00
                  |L11.252|
                          DCD      0x40011800
                  |L11.256|
                          DCD      motor

                          AREA ||i.bsp_SetMotorTargetSpeed||, CODE, READONLY, ALIGN=2

                  bsp_SetMotorTargetSpeed PROC
;;;185    
;;;186    void bsp_SetMotorTargetSpeed(MotorSN sn, float targetSpeed)
000000  b570              PUSH     {r4-r6,lr}
;;;187    {	
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;188    	//如果给出的PWM已经大于最大值，则直接退出函数
;;;189    	if(sn!=MotorLeft && sn!=MotorRight)
000006  b12c              CBZ      r4,|L12.20|
000008  2c01              CMP      r4,#1
00000a  d003              BEQ      |L12.20|
;;;190    	{
;;;191    		WARNING("错误的电机\r\n");
00000c  a00b              ADR      r0,|L12.60|
00000e  f7fffffe          BL       __2printf
                  |L12.18|
;;;192    		return ;
;;;193    	}
;;;194    	
;;;195    	
;;;196    	//bsp_MotorBrake(sn);
;;;197    	
;;;198    	
;;;199    	
;;;200    	switch(sn)
;;;201    	{
;;;202    		case MotorLeft:
;;;203    		{
;;;204    			pid[MotorLeft].target = targetSpeed;
;;;205    			motor[MotorLeft].isRunning = true ;
;;;206    		}break;
;;;207    		
;;;208    		case MotorRight:
;;;209    		{
;;;210    			pid[MotorRight].target = targetSpeed;
;;;211    			motor[MotorRight].isRunning = true ;
;;;212    		}break;
;;;213    	}
;;;214    }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  b114              CBZ      r4,|L12.28|
000016  2c01              CMP      r4,#1                 ;200
000018  d10c              BNE      |L12.52|
00001a  e005              B        |L12.40|
                  |L12.28|
00001c  480b              LDR      r0,|L12.76|
00001e  6005              STR      r5,[r0,#0]            ;204  ; pid
000020  2001              MOVS     r0,#1                 ;205
000022  490b              LDR      r1,|L12.80|
000024  7008              STRB     r0,[r1,#0]            ;205
000026  e005              B        |L12.52|
                  |L12.40|
000028  4808              LDR      r0,|L12.76|
00002a  6305              STR      r5,[r0,#0x30]         ;210  ; pid
00002c  2001              MOVS     r0,#1                 ;211
00002e  4908              LDR      r1,|L12.80|
000030  7308              STRB     r0,[r1,#0xc]          ;211
000032  bf00              NOP                            ;212
                  |L12.52|
000034  bf00              NOP                            ;206
000036  bf00              NOP      
000038  e7eb              B        |L12.18|
;;;215    
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
00003c  b4edcef3          DCB      180,237,206,243,181,196,181,231,187,250,"\r\n",0
000040  b5c4b5e7
000044  bbfa0d0a
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L12.76|
                          DCD      pid
                  |L12.80|
                          DCD      motor

                          AREA ||i.pidabs||, CODE, READONLY, ALIGN=1

                  pidabs PROC
;;;369    
;;;370    static float pidabs(float val)
000000  b510              PUSH     {r4,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372    	return val>0 ? val : -val;
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_cfrcmple
00000c  d201              BCS      |L13.18|
00000e  4620              MOV      r0,r4
                  |L13.16|
;;;373    }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  f0844000          EOR      r0,r4,#0x80000000     ;372
000016  e7fb              B        |L13.16|
;;;374    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  motor
                          %        24
                  pid
                          %        96

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_DC_Motor.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_DC_Motor_c_47674ad1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_DC_Motor_c_47674ad1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_DC_Motor_c_47674ad1____REVSH|
#line 128
|__asm___14_bsp_DC_Motor_c_47674ad1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
