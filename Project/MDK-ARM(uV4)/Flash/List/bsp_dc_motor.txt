; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_dc_motor.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_dc_motor.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_dc_motor.crf ..\..\User\app\src\bsp_DC_Motor.c]
                          THUMB

                          AREA ||i.bspInitPWM||, CODE, READONLY, ALIGN=2

                  bspInitPWM PROC
;;;44     */
;;;45     static void bspInitPWM(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;46     {
;;;47     	GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);           //Timer1重映射     
000002  2101              MOVS     r1,#1
000004  4817              LDR      r0,|L1.100|
000006  f7fffffe          BL       GPIO_PinRemapConfig
;;;48     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
00000a  f2427010          MOV      r0,#0x2710
00000e  2100              MOVS     r1,#0
000010  2301              MOVS     r3,#1
000012  4a15              LDR      r2,|L1.104|
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  1551              ASRS     r1,r2,#21
00001a  4814              LDR      r0,|L1.108|
00001c  f7fffffe          BL       bsp_SetTIMOutPWM
;;;49     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
000020  f2427010          MOV      r0,#0x2710
000024  2100              MOVS     r1,#0
000026  2302              MOVS     r3,#2
000028  4a0f              LDR      r2,|L1.104|
00002a  e9cd1000          STRD     r1,r0,[sp,#0]
00002e  14d1              ASRS     r1,r2,#19
000030  480e              LDR      r0,|L1.108|
000032  f7fffffe          BL       bsp_SetTIMOutPWM
;;;50     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
000036  f2427010          MOV      r0,#0x2710
00003a  2100              MOVS     r1,#0
00003c  2303              MOVS     r3,#3
00003e  4a0a              LDR      r2,|L1.104|
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  1451              ASRS     r1,r2,#17
000046  4809              LDR      r0,|L1.108|
000048  f7fffffe          BL       bsp_SetTIMOutPWM
;;;51     	bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0, MAXPWM);     //当频率为0，占空比为100%时，GPIO输出1
00004c  f2427010          MOV      r0,#0x2710
000050  2100              MOVS     r1,#0
000052  2304              MOVS     r3,#4
000054  4a04              LDR      r2,|L1.104|
000056  e9cd1000          STRD     r1,r0,[sp,#0]
00005a  0319              LSLS     r1,r3,#12
00005c  4803              LDR      r0,|L1.108|
00005e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;52     }
000062  bd1c              POP      {r2-r4,pc}
;;;53     
                          ENDP

                  |L1.100|
                          DCD      0x001600c0
                  |L1.104|
                          DCD      0x40012c00
                  |L1.108|
                          DCD      0x40011800

                          AREA ||i.bsp_InitDC_Motor||, CODE, READONLY, ALIGN=1

                  bsp_InitDC_Motor PROC
;;;28     */
;;;29     void bsp_InitDC_Motor(void)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	bspInitPWM();
000002  f7fffffe          BL       bspInitPWM
;;;32     	bsp_InitMotorPid(MotorLeft);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       bsp_InitMotorPid
;;;33     	bsp_InitMotorPid(MotorRight);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       bsp_InitMotorPid
;;;34     }
000012  bd10              POP      {r4,pc}
;;;35     
                          ENDP


                          AREA ||i.bsp_InitMotorPid||, CODE, READONLY, ALIGN=2

                  bsp_InitMotorPid PROC
;;;171    */
;;;172    void bsp_InitMotorPid(MotorSN sn)
000000  b110              CBZ      r0,|L3.8|
;;;173    {
;;;174    	switch(sn)
000002  2801              CMP      r0,#1
000004  d133              BNE      |L3.110|
000006  e018              B        |L3.58|
                  |L3.8|
;;;175    	{
;;;176    		case MotorLeft:
;;;177    		{
;;;178    			/************************PID 左轮机**********12 0.5 1 0.8 5500*******/
;;;179    			pid[MotorLeft].target = 200;
000008  491a              LDR      r1,|L3.116|
00000a  4a1b              LDR      r2,|L3.120|
00000c  6011              STR      r1,[r2,#0]  ; pid
;;;180    			
;;;181    			pid[MotorLeft].kp = 6;
00000e  491b              LDR      r1,|L3.124|
000010  6051              STR      r1,[r2,#4]  ; pid
;;;182    			pid[MotorLeft].ki = 0.5;
000012  f04f517c          MOV      r1,#0x3f000000
000016  6091              STR      r1,[r2,#8]  ; pid
;;;183    			pid[MotorLeft].kd = 1;
000018  f04f517e          MOV      r1,#0x3f800000
00001c  60d1              STR      r1,[r2,#0xc]  ; pid
;;;184    			
;;;185    			pid[MotorLeft].bias = 0 ;
00001e  2100              MOVS     r1,#0
000020  6111              STR      r1,[r2,#0x10]  ; pid
;;;186    			pid[MotorLeft].lastBias = 0 ;
000022  6151              STR      r1,[r2,#0x14]  ; pid
;;;187    			pid[MotorLeft].biasSum = 0 ;
000024  6191              STR      r1,[r2,#0x18]  ; pid
;;;188    			
;;;189    			pid[MotorLeft].pwm = 0 ;
000026  61d1              STR      r1,[r2,#0x1c]  ; pid
;;;190    			pid[MotorLeft].pwmMax = MAXPWM ;
000028  4915              LDR      r1,|L3.128|
00002a  6211              STR      r1,[r2,#0x20]  ; pid
;;;191    			
;;;192    			pid[MotorLeft].kiLimit = 20000 ;
00002c  4915              LDR      r1,|L3.132|
00002e  6251              STR      r1,[r2,#0x24]  ; pid
;;;193    			pid[MotorLeft].fitK = 0.8 ;
000030  4915              LDR      r1,|L3.136|
000032  6291              STR      r1,[r2,#0x28]  ; pid
;;;194    			pid[MotorLeft].fitD = 2000 ;
000034  4915              LDR      r1,|L3.140|
000036  62d1              STR      r1,[r2,#0x2c]  ; pid
;;;195    		}break;
000038  e019              B        |L3.110|
                  |L3.58|
;;;196    		
;;;197    		case MotorRight:
;;;198    		{
;;;199    			/************************PID 右轮机************************/
;;;200    			pid[MotorRight].target = 200;
00003a  490e              LDR      r1,|L3.116|
00003c  4a0e              LDR      r2,|L3.120|
00003e  6311              STR      r1,[r2,#0x30]  ; pid
;;;201    			
;;;202    			pid[MotorRight].kp = 6;
000040  4a0e              LDR      r2,|L3.124|
000042  490d              LDR      r1,|L3.120|
000044  634a              STR      r2,[r1,#0x34]
;;;203    			pid[MotorRight].ki = 0.5;
000046  f04f527c          MOV      r2,#0x3f000000
00004a  638a              STR      r2,[r1,#0x38]
;;;204    			pid[MotorRight].kd = 1;
00004c  f04f527e          MOV      r2,#0x3f800000
000050  63ca              STR      r2,[r1,#0x3c]
;;;205    			
;;;206    			pid[MotorRight].bias = 0 ;
000052  2200              MOVS     r2,#0
000054  640a              STR      r2,[r1,#0x40]
;;;207    			pid[MotorRight].lastBias = 0 ;
000056  644a              STR      r2,[r1,#0x44]
;;;208    			pid[MotorRight].biasSum = 0 ;
000058  648a              STR      r2,[r1,#0x48]
;;;209    			
;;;210    			pid[MotorRight].pwm = 0 ;
00005a  64ca              STR      r2,[r1,#0x4c]
;;;211    			pid[MotorRight].pwmMax = MAXPWM ;
00005c  4a08              LDR      r2,|L3.128|
00005e  650a              STR      r2,[r1,#0x50]
;;;212    			
;;;213    			pid[MotorRight].kiLimit = 20000 ;
000060  4a08              LDR      r2,|L3.132|
000062  654a              STR      r2,[r1,#0x54]
;;;214    			pid[MotorRight].fitK = 0.8 ;
000064  4a08              LDR      r2,|L3.136|
000066  658a              STR      r2,[r1,#0x58]
;;;215    			pid[MotorRight].fitD = 2000 ;
000068  4a08              LDR      r2,|L3.140|
00006a  65ca              STR      r2,[r1,#0x5c]
;;;216    		}break;
00006c  bf00              NOP      
                  |L3.110|
00006e  bf00              NOP                            ;195
;;;217    	}
;;;218    }
000070  4770              BX       lr
;;;219    
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      0x43480000
                  |L3.120|
                          DCD      pid
                  |L3.124|
                          DCD      0x40c00000
                  |L3.128|
                          DCD      0x461c4000
                  |L3.132|
                          DCD      0x469c4000
                  |L3.136|
                          DCD      0x3f4ccccd
                  |L3.140|
                          DCD      0x44fa0000

                          AREA ||i.bsp_MotorBrake||, CODE, READONLY, ALIGN=2

                  bsp_MotorBrake PROC
;;;61     */
;;;62     void bsp_MotorBrake(MotorSN sn)
000000  b51c              PUSH     {r2-r4,lr}
;;;63     {
000002  4604              MOV      r4,r0
;;;64     	switch(sn)
000004  b114              CBZ      r4,|L4.12|
000006  2c01              CMP      r4,#1
000008  d134              BNE      |L4.116|
00000a  e019              B        |L4.64|
                  |L4.12|
;;;65     	{
;;;66     		case MotorLeft:
;;;67     		{
;;;68     			motor[MotorLeft].isRunning = false ;
00000c  2000              MOVS     r0,#0
00000e  491a              LDR      r1,|L4.120|
000010  7008              STRB     r0,[r1,#0]
;;;69     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0,MAXPWM); 
000012  f2427010          MOV      r0,#0x2710
000016  2100              MOVS     r1,#0
000018  2303              MOVS     r3,#3
00001a  4a18              LDR      r2,|L4.124|
00001c  e9cd1000          STRD     r1,r0,[sp,#0]
000020  1451              ASRS     r1,r2,#17
000022  4817              LDR      r0,|L4.128|
000024  f7fffffe          BL       bsp_SetTIMOutPWM
;;;70     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0,MAXPWM);
000028  f2427010          MOV      r0,#0x2710
00002c  2100              MOVS     r1,#0
00002e  2304              MOVS     r3,#4
000030  4a12              LDR      r2,|L4.124|
000032  e9cd1000          STRD     r1,r0,[sp,#0]
000036  0319              LSLS     r1,r3,#12
000038  4811              LDR      r0,|L4.128|
00003a  f7fffffe          BL       bsp_SetTIMOutPWM
;;;71     		}break;
00003e  e019              B        |L4.116|
                  |L4.64|
;;;72     		
;;;73     		case MotorRight:
;;;74     		{
;;;75     			motor[MotorRight].isRunning = false ;
000040  2000              MOVS     r0,#0
000042  490d              LDR      r1,|L4.120|
000044  7208              STRB     r0,[r1,#8]
;;;76     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0,MAXPWM);
000046  f2427010          MOV      r0,#0x2710
00004a  2100              MOVS     r1,#0
00004c  2301              MOVS     r3,#1
00004e  4a0b              LDR      r2,|L4.124|
000050  e9cd1000          STRD     r1,r0,[sp,#0]
000054  1551              ASRS     r1,r2,#21
000056  480a              LDR      r0,|L4.128|
000058  f7fffffe          BL       bsp_SetTIMOutPWM
;;;77     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0,MAXPWM);
00005c  f2427010          MOV      r0,#0x2710
000060  2100              MOVS     r1,#0
000062  2302              MOVS     r3,#2
000064  4a05              LDR      r2,|L4.124|
000066  e9cd1000          STRD     r1,r0,[sp,#0]
00006a  14d1              ASRS     r1,r2,#19
00006c  4804              LDR      r0,|L4.128|
00006e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;78     		}break;
000072  bf00              NOP      
                  |L4.116|
000074  bf00              NOP                            ;71
;;;79     	}
;;;80     	
;;;81     }
000076  bd1c              POP      {r2-r4,pc}
;;;82     
                          ENDP

                  |L4.120|
                          DCD      motor
                  |L4.124|
                          DCD      0x40012c00
                  |L4.128|
                          DCD      0x40011800

                          AREA ||i.bsp_MotorCoast||, CODE, READONLY, ALIGN=2

                  bsp_MotorCoast PROC
;;;90     */
;;;91     void bsp_MotorCoast(MotorSN sn)
000000  b51c              PUSH     {r2-r4,lr}
;;;92     {
000002  4604              MOV      r4,r0
;;;93     	switch(sn)
000004  b114              CBZ      r4,|L5.12|
000006  2c01              CMP      r4,#1
000008  d12a              BNE      |L5.96|
00000a  e014              B        |L5.54|
                  |L5.12|
;;;94     	{
;;;95     		case MotorLeft:
;;;96     		{
;;;97     			motor[MotorLeft].isRunning = false ;
00000c  2000              MOVS     r0,#0
00000e  4915              LDR      r1,|L5.100|
000010  7008              STRB     r0,[r1,#0]
;;;98     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0,0); 
000012  9000              STR      r0,[sp,#0]
000014  2303              MOVS     r3,#3
000016  4a14              LDR      r2,|L5.104|
000018  1451              ASRS     r1,r2,#17
00001a  9001              STR      r0,[sp,#4]
00001c  4813              LDR      r0,|L5.108|
00001e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;99     			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0,0);
000022  2000              MOVS     r0,#0
000024  9000              STR      r0,[sp,#0]
000026  2304              MOVS     r3,#4
000028  4a0f              LDR      r2,|L5.104|
00002a  0319              LSLS     r1,r3,#12
00002c  9001              STR      r0,[sp,#4]
00002e  480f              LDR      r0,|L5.108|
000030  f7fffffe          BL       bsp_SetTIMOutPWM
;;;100    		}break;
000034  e014              B        |L5.96|
                  |L5.54|
;;;101    		
;;;102    		case MotorRight:
;;;103    		{
;;;104    			motor[MotorRight].isRunning = false ;
000036  2000              MOVS     r0,#0
000038  490a              LDR      r1,|L5.100|
00003a  7208              STRB     r0,[r1,#8]
;;;105    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0,0);
00003c  9000              STR      r0,[sp,#0]
00003e  2301              MOVS     r3,#1
000040  4a09              LDR      r2,|L5.104|
000042  1551              ASRS     r1,r2,#21
000044  9001              STR      r0,[sp,#4]
000046  4809              LDR      r0,|L5.108|
000048  f7fffffe          BL       bsp_SetTIMOutPWM
;;;106    			bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0,0);
00004c  2000              MOVS     r0,#0
00004e  9000              STR      r0,[sp,#0]
000050  2302              MOVS     r3,#2
000052  4a05              LDR      r2,|L5.104|
000054  14d1              ASRS     r1,r2,#19
000056  9001              STR      r0,[sp,#4]
000058  4804              LDR      r0,|L5.108|
00005a  f7fffffe          BL       bsp_SetTIMOutPWM
;;;107    		}break;
00005e  bf00              NOP      
                  |L5.96|
000060  bf00              NOP                            ;100
;;;108    	}
;;;109    	
;;;110    }
000062  bd1c              POP      {r2-r4,pc}
;;;111    
                          ENDP

                  |L5.100|
                          DCD      motor
                  |L5.104|
                          DCD      0x40012c00
                  |L5.108|
                          DCD      0x40011800

                          AREA ||i.bsp_PidControlAct||, CODE, READONLY, ALIGN=2

                  bsp_PidControlAct PROC
;;;229    */
;;;230    void bsp_PidControlAct(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;231    {
000004  b085              SUB      sp,sp,#0x14
;;;232    	int32_t speed = 0 ;
000006  2400              MOVS     r4,#0
;;;233    	float S_Out[4] = {0};
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
;;;234    	
;;;235    	UNUSED(S_Out);
;;;236    	
;;;237    	/************************显示速度波形************************/
;;;238    	#if 0 
;;;239    	S_Out[0] = bsp_EncoderGetSpeed(EncoderLeft);
;;;240    	S_Out[1] = bsp_EncoderGetSpeed(EncoderRight);
;;;241    	SDS_OutPut_Data(S_Out);
;;;242    	#endif
;;;243    	
;;;244    	/************************PID  左轮************************/
;;;245    	//if(motor[MotorLeft].isRunning)
;;;246    	{
;;;247    		speed = bsp_EncoderGetSpeed(EncoderLeft);//当前速度毫米/秒
000012  f7fffffe          BL       bsp_EncoderGetSpeed
000016  4605              MOV      r5,r0
000018  f7fffffe          BL       __aeabi_f2iz
00001c  4604              MOV      r4,r0
;;;248    		pid[MotorLeft].bias = pidabs(pid[MotorLeft].target) - speed;//当前误差值
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       __aeabi_i2f
000024  4605              MOV      r5,r0
000026  4982              LDR      r1,|L6.560|
000028  6808              LDR      r0,[r1,#0]  ; pid
00002a  f7fffffe          BL       pidabs
00002e  4606              MOV      r6,r0
000030  4629              MOV      r1,r5
000032  f7fffffe          BL       __aeabi_fsub
000036  497e              LDR      r1,|L6.560|
000038  6108              STR      r0,[r1,#0x10]  ; pid
;;;249    		pid[MotorLeft].biasSum += pid[MotorLeft].bias;//误差累积
00003a  460a              MOV      r2,r1
00003c  6911              LDR      r1,[r2,#0x10]  ; pid
00003e  6990              LDR      r0,[r2,#0x18]  ; pid
000040  f7fffffe          BL       __aeabi_fadd
000044  497a              LDR      r1,|L6.560|
000046  6188              STR      r0,[r1,#0x18]  ; pid
;;;250    		
;;;251    		//积分限制
;;;252    		if(pid[MotorLeft].biasSum >= pid[MotorLeft].kiLimit)
000048  460a              MOV      r2,r1
00004a  6a51              LDR      r1,[r2,#0x24]  ; pid
00004c  6990              LDR      r0,[r2,#0x18]  ; pid
00004e  f7fffffe          BL       __aeabi_cfrcmple
000052  d803              BHI      |L6.92|
;;;253    		{
;;;254    			pid[MotorLeft].biasSum = pid[MotorLeft].kiLimit;
000054  4876              LDR      r0,|L6.560|
000056  6a40              LDR      r0,[r0,#0x24]  ; pid
000058  4975              LDR      r1,|L6.560|
00005a  6188              STR      r0,[r1,#0x18]  ; pid
                  |L6.92|
;;;255    		}
;;;256    			
;;;257    		pid[MotorLeft].pwm = (pid[MotorLeft].fitK*pidabs(pid[MotorLeft].target) + pid[MotorLeft].fitD) + pid[MotorLeft].kp*pid[MotorLeft].bias + pid[MotorLeft].ki*pid[MotorLeft].biasSum + pid[MotorLeft].kd*(pid[MotorLeft].bias-pid[MotorLeft].lastBias); 
00005c  4a74              LDR      r2,|L6.560|
00005e  6951              LDR      r1,[r2,#0x14]  ; pid
000060  6910              LDR      r0,[r2,#0x10]  ; pid
000062  f7fffffe          BL       __aeabi_fsub
000066  4607              MOV      r7,r0
000068  4871              LDR      r0,|L6.560|
00006a  68c1              LDR      r1,[r0,#0xc]  ; pid
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       __aeabi_fmul
000072  4605              MOV      r5,r0
000074  4a6e              LDR      r2,|L6.560|
000076  6991              LDR      r1,[r2,#0x18]  ; pid
000078  6890              LDR      r0,[r2,#8]  ; pid
00007a  f7fffffe          BL       __aeabi_fmul
00007e  4682              MOV      r10,r0
000080  4a6b              LDR      r2,|L6.560|
000082  6911              LDR      r1,[r2,#0x10]  ; pid
000084  6850              LDR      r0,[r2,#4]  ; pid
000086  f7fffffe          BL       __aeabi_fmul
00008a  4683              MOV      r11,r0
00008c  4968              LDR      r1,|L6.560|
00008e  6808              LDR      r0,[r1,#0]  ; pid
000090  f7fffffe          BL       pidabs
000094  9000              STR      r0,[sp,#0]
000096  4866              LDR      r0,|L6.560|
000098  6a81              LDR      r1,[r0,#0x28]  ; pid
00009a  9800              LDR      r0,[sp,#0]
00009c  f7fffffe          BL       __aeabi_fmul
0000a0  4681              MOV      r9,r0
0000a2  4863              LDR      r0,|L6.560|
0000a4  6ac1              LDR      r1,[r0,#0x2c]  ; pid
0000a6  4648              MOV      r0,r9
0000a8  f7fffffe          BL       __aeabi_fadd
0000ac  4680              MOV      r8,r0
0000ae  4659              MOV      r1,r11
0000b0  f7fffffe          BL       __aeabi_fadd
0000b4  4607              MOV      r7,r0
0000b6  4651              MOV      r1,r10
0000b8  f7fffffe          BL       __aeabi_fadd
0000bc  4606              MOV      r6,r0
0000be  4629              MOV      r1,r5
0000c0  f7fffffe          BL       __aeabi_fadd
0000c4  495a              LDR      r1,|L6.560|
0000c6  61c8              STR      r0,[r1,#0x1c]  ; pid
;;;258    		pid[MotorLeft].lastBias = pid[MotorLeft].bias;//上次误差
0000c8  4608              MOV      r0,r1
0000ca  6900              LDR      r0,[r0,#0x10]  ; pid
0000cc  6148              STR      r0,[r1,#0x14]  ; pid
;;;259    		
;;;260    		//PWM限制
;;;261    		if(pid[MotorLeft].pwm >= pid[MotorLeft].pwmMax)
0000ce  460a              MOV      r2,r1
0000d0  6a11              LDR      r1,[r2,#0x20]  ; pid
0000d2  69d0              LDR      r0,[r2,#0x1c]  ; pid
0000d4  f7fffffe          BL       __aeabi_cfrcmple
0000d8  d804              BHI      |L6.228|
;;;262    		{
;;;263    			pid[MotorLeft].pwm = pid[MotorLeft].pwmMax;
0000da  4855              LDR      r0,|L6.560|
0000dc  6a00              LDR      r0,[r0,#0x20]  ; pid
0000de  4954              LDR      r1,|L6.560|
0000e0  61c8              STR      r0,[r1,#0x1c]  ; pid
0000e2  e008              B        |L6.246|
                  |L6.228|
;;;264    		}
;;;265    		else if(pid[MotorLeft].pwm <= 0)
0000e4  4952              LDR      r1,|L6.560|
0000e6  69c8              LDR      r0,[r1,#0x1c]  ; pid
0000e8  2100              MOVS     r1,#0
0000ea  f7fffffe          BL       __aeabi_cfcmple
0000ee  d802              BHI      |L6.246|
;;;266    		{
;;;267    			pid[MotorLeft].pwm = 0 ;
0000f0  2000              MOVS     r0,#0
0000f2  494f              LDR      r1,|L6.560|
0000f4  61c8              STR      r0,[r1,#0x1c]  ; pid
                  |L6.246|
;;;268    		}
;;;269    		#if 0
;;;270    		printf("left:%dmm/s  ",bsp_EncoderGetSpeed(EncoderLeft));
;;;271    		printf("pid[MotorLeft].bias:%f  ",pid[MotorLeft].bias);
;;;272    		printf("pid[MotorLeft].biasSum:%f  ",pid[MotorLeft].biasSum);
;;;273    		printf("pid[MotorLeft].lastBias:%f  ",pid[MotorLeft].lastBias);
;;;274    		printf("pid[MotorLeft].pwm:%f  ",pid[MotorLeft].pwm);
;;;275    		#endif
;;;276    		bsp_SetMotorPWM(MotorLeft, pid[MotorLeft].target>0 ? Forward:Backward, pid[MotorLeft].pwm);
0000f6  494e              LDR      r1,|L6.560|
0000f8  69c8              LDR      r0,[r1,#0x1c]  ; pid
0000fa  f7fffffe          BL       __aeabi_f2uiz
0000fe  b285              UXTH     r5,r0
000100  494b              LDR      r1,|L6.560|
000102  6808              LDR      r0,[r1,#0]  ; pid
000104  2100              MOVS     r1,#0
000106  f7fffffe          BL       __aeabi_cfrcmple
00010a  d301              BCC      |L6.272|
00010c  2001              MOVS     r0,#1
00010e  e000              B        |L6.274|
                  |L6.272|
000110  2000              MOVS     r0,#0
                  |L6.274|
000112  4606              MOV      r6,r0
000114  462a              MOV      r2,r5
000116  4631              MOV      r1,r6
000118  2000              MOVS     r0,#0
00011a  f7fffffe          BL       bsp_SetMotorPWM
;;;277    	}
;;;278    	
;;;279    	
;;;280    	/************************PID  右轮************************/
;;;281    	//if(motor[MotorRight].isRunning)
;;;282    	{
;;;283    		speed = bsp_EncoderGetSpeed(EncoderRight);//当前速度毫米/秒
00011e  2001              MOVS     r0,#1
000120  f7fffffe          BL       bsp_EncoderGetSpeed
000124  4605              MOV      r5,r0
000126  f7fffffe          BL       __aeabi_f2iz
00012a  4604              MOV      r4,r0
;;;284    		pid[MotorRight].bias = pidabs(pid[MotorRight].target) - speed;//当前误差值
00012c  4620              MOV      r0,r4
00012e  f7fffffe          BL       __aeabi_i2f
000132  4605              MOV      r5,r0
000134  493e              LDR      r1,|L6.560|
000136  6b08              LDR      r0,[r1,#0x30]  ; pid
000138  f7fffffe          BL       pidabs
00013c  4606              MOV      r6,r0
00013e  4629              MOV      r1,r5
000140  f7fffffe          BL       __aeabi_fsub
000144  493a              LDR      r1,|L6.560|
000146  6408              STR      r0,[r1,#0x40]
;;;285    		pid[MotorRight].biasSum += pid[MotorRight].bias;//误差累积
000148  460a              MOV      r2,r1
00014a  6c11              LDR      r1,[r2,#0x40]
00014c  6c90              LDR      r0,[r2,#0x48]
00014e  f7fffffe          BL       __aeabi_fadd
000152  4937              LDR      r1,|L6.560|
000154  6488              STR      r0,[r1,#0x48]
;;;286    		
;;;287    		//积分限制
;;;288    		if(pid[MotorRight].biasSum >= pid[MotorRight].kiLimit)
000156  460a              MOV      r2,r1
000158  6d51              LDR      r1,[r2,#0x54]
00015a  6c90              LDR      r0,[r2,#0x48]
00015c  f7fffffe          BL       __aeabi_cfrcmple
000160  d802              BHI      |L6.360|
;;;289    		{
;;;290    			pid[MotorRight].biasSum = pid[MotorRight].kiLimit;
000162  4833              LDR      r0,|L6.560|
000164  6d41              LDR      r1,[r0,#0x54]
000166  6481              STR      r1,[r0,#0x48]
                  |L6.360|
;;;291    		}
;;;292    			
;;;293    		pid[MotorRight].pwm = (pid[MotorRight].fitK*pidabs(pid[MotorRight].target) + pid[MotorRight].fitD) + pid[MotorRight].kp*pid[MotorRight].bias + pid[MotorRight].ki*pid[MotorRight].biasSum + pid[MotorRight].kd*(pid[MotorRight].bias-pid[MotorRight].lastBias); 
000168  4a31              LDR      r2,|L6.560|
00016a  6c51              LDR      r1,[r2,#0x44]
00016c  6c10              LDR      r0,[r2,#0x40]
00016e  f7fffffe          BL       __aeabi_fsub
000172  4607              MOV      r7,r0
000174  482e              LDR      r0,|L6.560|
000176  6bc1              LDR      r1,[r0,#0x3c]
000178  4638              MOV      r0,r7
00017a  f7fffffe          BL       __aeabi_fmul
00017e  4605              MOV      r5,r0
000180  4a2b              LDR      r2,|L6.560|
000182  6c91              LDR      r1,[r2,#0x48]
000184  6b90              LDR      r0,[r2,#0x38]
000186  f7fffffe          BL       __aeabi_fmul
00018a  4a29              LDR      r2,|L6.560|
00018c  9000              STR      r0,[sp,#0]
00018e  6c11              LDR      r1,[r2,#0x40]
000190  6b50              LDR      r0,[r2,#0x34]
000192  f7fffffe          BL       __aeabi_fmul
000196  4682              MOV      r10,r0
000198  4925              LDR      r1,|L6.560|
00019a  6b08              LDR      r0,[r1,#0x30]  ; pid
00019c  f7fffffe          BL       pidabs
0001a0  4683              MOV      r11,r0
0001a2  4823              LDR      r0,|L6.560|
0001a4  6d81              LDR      r1,[r0,#0x58]
0001a6  4658              MOV      r0,r11
0001a8  f7fffffe          BL       __aeabi_fmul
0001ac  4681              MOV      r9,r0
0001ae  4820              LDR      r0,|L6.560|
0001b0  6dc1              LDR      r1,[r0,#0x5c]
0001b2  4648              MOV      r0,r9
0001b4  f7fffffe          BL       __aeabi_fadd
0001b8  4680              MOV      r8,r0
0001ba  4651              MOV      r1,r10
0001bc  f7fffffe          BL       __aeabi_fadd
0001c0  4607              MOV      r7,r0
0001c2  9900              LDR      r1,[sp,#0]
0001c4  f7fffffe          BL       __aeabi_fadd
0001c8  4606              MOV      r6,r0
0001ca  4629              MOV      r1,r5
0001cc  f7fffffe          BL       __aeabi_fadd
0001d0  4917              LDR      r1,|L6.560|
0001d2  64c8              STR      r0,[r1,#0x4c]
;;;294    		pid[MotorRight].lastBias = pid[MotorRight].bias;//上次误差
0001d4  4608              MOV      r0,r1
0001d6  6c01              LDR      r1,[r0,#0x40]
0001d8  6441              STR      r1,[r0,#0x44]
;;;295    		
;;;296    		//PWM限制
;;;297    		if(pid[MotorRight].pwm >= pid[MotorRight].pwmMax)
0001da  4602              MOV      r2,r0
0001dc  6d11              LDR      r1,[r2,#0x50]
0001de  6cd0              LDR      r0,[r2,#0x4c]
0001e0  f7fffffe          BL       __aeabi_cfrcmple
0001e4  d803              BHI      |L6.494|
;;;298    		{
;;;299    			pid[MotorRight].pwm = pid[MotorRight].pwmMax;
0001e6  4812              LDR      r0,|L6.560|
0001e8  6d01              LDR      r1,[r0,#0x50]
0001ea  64c1              STR      r1,[r0,#0x4c]
0001ec  e008              B        |L6.512|
                  |L6.494|
;;;300    		}
;;;301    		else if(pid[MotorRight].pwm <= 0)
0001ee  4910              LDR      r1,|L6.560|
0001f0  6cc8              LDR      r0,[r1,#0x4c]
0001f2  2100              MOVS     r1,#0
0001f4  f7fffffe          BL       __aeabi_cfcmple
0001f8  d802              BHI      |L6.512|
;;;302    		{
;;;303    			pid[MotorRight].pwm = 0 ;
0001fa  2100              MOVS     r1,#0
0001fc  480c              LDR      r0,|L6.560|
0001fe  64c1              STR      r1,[r0,#0x4c]
                  |L6.512|
;;;304    		}
;;;305    		#if 0
;;;306    		printf("right:%dmm/s  ",bsp_EncoderGetSpeed(EncoderRight));
;;;307    		printf("pid[MotorRight].bias:%f  ",pid[MotorRight].bias);
;;;308    		printf("pid[MotorRight].biasSum:%f  ",pid[MotorRight].biasSum);
;;;309    		printf("pid[MotorRight].lastBias:%f  ",pid[MotorRight].lastBias);
;;;310    		printf("pid[MotorRight].pwm:%f\r\n",pid[MotorRight].pwm);
;;;311    		#endif
;;;312    		bsp_SetMotorPWM(MotorRight, pid[MotorRight].target>0 ? Forward:Backward, pid[MotorRight].pwm);
000200  490b              LDR      r1,|L6.560|
000202  6cc8              LDR      r0,[r1,#0x4c]
000204  f7fffffe          BL       __aeabi_f2uiz
000208  b285              UXTH     r5,r0
00020a  4909              LDR      r1,|L6.560|
00020c  6b08              LDR      r0,[r1,#0x30]  ; pid
00020e  2100              MOVS     r1,#0
000210  f7fffffe          BL       __aeabi_cfrcmple
000214  d301              BCC      |L6.538|
000216  2001              MOVS     r0,#1
000218  e000              B        |L6.540|
                  |L6.538|
00021a  2000              MOVS     r0,#0
                  |L6.540|
00021c  4606              MOV      r6,r0
00021e  462a              MOV      r2,r5
000220  4631              MOV      r1,r6
000222  2001              MOVS     r0,#1
000224  f7fffffe          BL       bsp_SetMotorPWM
;;;313    	}
;;;314    	
;;;315    }
000228  b005              ADD      sp,sp,#0x14
00022a  e8bd8ff0          POP      {r4-r11,pc}
;;;316    
                          ENDP

00022e  0000              DCW      0x0000
                  |L6.560|
                          DCD      pid

                          AREA ||i.bsp_SetMotorPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetMotorPWM PROC
;;;119    */
;;;120    void bsp_SetMotorPWM(MotorSN sn, MotorDir dir, uint16_t pwm)
000000  b57c              PUSH     {r2-r6,lr}
;;;121    {	
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;122    	//如果给出的PWM已经大于最大值，则直接退出函数
;;;123    	if(pwm > MAXPWM)
000008  f2427010          MOV      r0,#0x2710
00000c  4284              CMP      r4,r0
00000e  dd03              BLE      |L7.24|
;;;124    	{
;;;125    		WARNING("PWM值超过了MAXPWM\r\n");
000010  a031              ADR      r0,|L7.216|
000012  f7fffffe          BL       __2printf
                  |L7.22|
;;;126    		return ;
;;;127    	}
;;;128    	
;;;129    	switch(sn)
;;;130    	{
;;;131    		case MotorLeft:
;;;132    		{
;;;133    			motor[MotorLeft].isRunning = true ;
;;;134    			if(dir == Forward)
;;;135    			{
;;;136    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3,0, 0); 
;;;137    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,DC_PWM_T, pwm);
;;;138    			}
;;;139    			else
;;;140    			{
;;;141    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_14, TIM1, 4,0, 0);
;;;142    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_13, TIM1, 3, DC_PWM_T,pwm); 
;;;143    			}
;;;144    		}break;
;;;145    		
;;;146    		case MotorRight:
;;;147    		{
;;;148    			motor[MotorRight].isRunning = true ;	
;;;149    			if(dir == Backward)
;;;150    			{
;;;151    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,0, 0);
;;;152    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,DC_PWM_T, pwm);
;;;153    			}
;;;154    			else
;;;155    			{
;;;156    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_11, TIM1, 2,0, 0);
;;;157    				bsp_SetTIMOutPWM(GPIOE, GPIO_Pin_9,  TIM1, 1,DC_PWM_T, pwm);
;;;158    			}
;;;159    		}break;
;;;160    	}
;;;161    }
000016  bd7c              POP      {r2-r6,pc}
                  |L7.24|
000018  b116              CBZ      r6,|L7.32|
00001a  2e01              CMP      r6,#1                 ;129
00001c  d159              BNE      |L7.210|
00001e  e02b              B        |L7.120|
                  |L7.32|
000020  2001              MOVS     r0,#1                 ;133
000022  4932              LDR      r1,|L7.236|
000024  7008              STRB     r0,[r1,#0]            ;133
000026  b99d              CBNZ     r5,|L7.80|
000028  2000              MOVS     r0,#0                 ;136
00002a  9000              STR      r0,[sp,#0]            ;136
00002c  2303              MOVS     r3,#3                 ;136
00002e  4a30              LDR      r2,|L7.240|
000030  1451              ASRS     r1,r2,#17             ;136
000032  9001              STR      r0,[sp,#4]            ;136
000034  482f              LDR      r0,|L7.244|
000036  f7fffffe          BL       bsp_SetTIMOutPWM
00003a  f2475030          MOV      r0,#0x7530            ;137
00003e  2304              MOVS     r3,#4                 ;137
000040  4a2b              LDR      r2,|L7.240|
000042  0319              LSLS     r1,r3,#12             ;137
000044  e9cd0400          STRD     r0,r4,[sp,#0]         ;137
000048  482a              LDR      r0,|L7.244|
00004a  f7fffffe          BL       bsp_SetTIMOutPWM
00004e  e012              B        |L7.118|
                  |L7.80|
000050  2000              MOVS     r0,#0                 ;141
000052  9000              STR      r0,[sp,#0]            ;141
000054  2304              MOVS     r3,#4                 ;141
000056  4a26              LDR      r2,|L7.240|
000058  0319              LSLS     r1,r3,#12             ;141
00005a  9001              STR      r0,[sp,#4]            ;141
00005c  4825              LDR      r0,|L7.244|
00005e  f7fffffe          BL       bsp_SetTIMOutPWM
000062  f2475030          MOV      r0,#0x7530            ;142
000066  2303              MOVS     r3,#3                 ;142
000068  4a21              LDR      r2,|L7.240|
00006a  1451              ASRS     r1,r2,#17             ;142
00006c  e9cd0400          STRD     r0,r4,[sp,#0]         ;142
000070  4820              LDR      r0,|L7.244|
000072  f7fffffe          BL       bsp_SetTIMOutPWM
                  |L7.118|
000076  e02c              B        |L7.210|
                  |L7.120|
000078  2001              MOVS     r0,#1                 ;148
00007a  491c              LDR      r1,|L7.236|
00007c  7208              STRB     r0,[r1,#8]            ;148
00007e  2d01              CMP      r5,#1                 ;149
000080  d113              BNE      |L7.170|
000082  2000              MOVS     r0,#0                 ;151
000084  9000              STR      r0,[sp,#0]            ;151
000086  2301              MOVS     r3,#1                 ;151
000088  4a19              LDR      r2,|L7.240|
00008a  1551              ASRS     r1,r2,#21             ;151
00008c  9001              STR      r0,[sp,#4]            ;151
00008e  4819              LDR      r0,|L7.244|
000090  f7fffffe          BL       bsp_SetTIMOutPWM
000094  f2475030          MOV      r0,#0x7530            ;152
000098  2302              MOVS     r3,#2                 ;152
00009a  4a15              LDR      r2,|L7.240|
00009c  14d1              ASRS     r1,r2,#19             ;152
00009e  e9cd0400          STRD     r0,r4,[sp,#0]         ;152
0000a2  4814              LDR      r0,|L7.244|
0000a4  f7fffffe          BL       bsp_SetTIMOutPWM
0000a8  e012              B        |L7.208|
                  |L7.170|
0000aa  2000              MOVS     r0,#0                 ;156
0000ac  9000              STR      r0,[sp,#0]            ;156
0000ae  2302              MOVS     r3,#2                 ;156
0000b0  4a0f              LDR      r2,|L7.240|
0000b2  14d1              ASRS     r1,r2,#19             ;156
0000b4  9001              STR      r0,[sp,#4]            ;156
0000b6  480f              LDR      r0,|L7.244|
0000b8  f7fffffe          BL       bsp_SetTIMOutPWM
0000bc  f2475030          MOV      r0,#0x7530            ;157
0000c0  2301              MOVS     r3,#1                 ;157
0000c2  4a0b              LDR      r2,|L7.240|
0000c4  1551              ASRS     r1,r2,#21             ;157
0000c6  e9cd0400          STRD     r0,r4,[sp,#0]         ;157
0000ca  480a              LDR      r0,|L7.244|
0000cc  f7fffffe          BL       bsp_SetTIMOutPWM
                  |L7.208|
0000d0  bf00              NOP                            ;159
                  |L7.210|
0000d2  bf00              NOP                            ;144
0000d4  bf00              NOP      
0000d6  e79e              B        |L7.22|
;;;162    
                          ENDP

                  |L7.216|
0000d8  50574dd6          DCB      "PWM",214,181,179,172,185,253,193,203,"MAXPWM\r\n",0
0000dc  b5b3acb9
0000e0  fdc1cb4d
0000e4  41585057
0000e8  4d0d0a00
                  |L7.236|
                          DCD      motor
                  |L7.240|
                          DCD      0x40012c00
                  |L7.244|
                          DCD      0x40011800

                          AREA ||i.pidabs||, CODE, READONLY, ALIGN=1

                  pidabs PROC
;;;316    
;;;317    static float pidabs(float val)
000000  b510              PUSH     {r4,lr}
;;;318    {
000002  4604              MOV      r4,r0
;;;319    	return val>0 ? val : -val;
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_cfrcmple
00000c  d201              BCS      |L8.18|
00000e  4620              MOV      r0,r4
                  |L8.16|
;;;320    }
000010  bd10              POP      {r4,pc}
                  |L8.18|
000012  f0844000          EOR      r0,r4,#0x80000000     ;319
000016  e7fb              B        |L8.16|
;;;321    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  motor
                          %        16
                  pid
                          %        96

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_DC_Motor.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_DC_Motor_c_47674ad1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_DC_Motor_c_47674ad1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_DC_Motor_c_47674ad1____REVSH|
#line 128
|__asm___14_bsp_DC_Motor_c_47674ad1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
