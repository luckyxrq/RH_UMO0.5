; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tim_pwm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tim_pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app\inc -IF:\LuckyXRQ\CleanCar\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_tim_pwm.crf ..\..\User\bsp\src\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;234    */
;;;235    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b5f8              PUSH     {r3-r7,lr}
;;;236    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;237    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;238    
;;;239    	/* 使能GPIO时钟 */
;;;240    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  4606              MOV      r6,r0
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;241    
;;;242    	/* 配置GPIO */
;;;243    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000014  f8ad4000          STRH     r4,[sp,#0]
;;;244    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 输出 */
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;245    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0002          STRB     r0,[sp,#2]
;;;246    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_Init
;;;247    }
00002c  bdf8              POP      {r3-r7,pc}
;;;248    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;201    */
;;;202    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;203    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;204    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;205    
;;;206    	/* 使能GPIO时钟 */
;;;207    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_GetRCCofGPIO
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;208    
;;;209      	/* 使能TIM时钟 */
;;;210    	if ((TIMx == TIM1) || (TIMx == TIM8))
00001a  4811              LDR      r0,|L2.96|
00001c  4284              CMP      r4,r0
00001e  d002              BEQ      |L2.38|
000020  4810              LDR      r0,|L2.100|
000022  4284              CMP      r4,r0
000024  d107              BNE      |L2.54|
                  |L2.38|
;;;211    	{
;;;212    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       bsp_GetRCCofTIM
00002c  4607              MOV      r7,r0
00002e  2101              MOVS     r1,#1
000030  f7fffffe          BL       RCC_APB2PeriphClockCmd
000034  e006              B        |L2.68|
                  |L2.54|
;;;213    	}
;;;214    	else
;;;215    	{
;;;216    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       bsp_GetRCCofTIM
00003c  4607              MOV      r7,r0
00003e  2101              MOVS     r1,#1
000040  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.68|
;;;217    	}
;;;218    
;;;219    	/* 配置GPIO */
;;;220    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;
000044  f8ad5000          STRH     r5,[sp,#0]
;;;221    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;		/* 复用功能 */
000048  2018              MOVS     r0,#0x18
00004a  f88d0003          STRB     r0,[sp,#3]
;;;222    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004e  2003              MOVS     r0,#3
000050  f88d0002          STRB     r0,[sp,#2]
;;;223    	GPIO_Init(GPIOx, &GPIO_InitStructure); 
000054  4669              MOV      r1,sp
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       GPIO_Init
;;;224    }
00005c  e8bd83f8          POP      {r3-r9,pc}
;;;225    
                          ENDP

                  |L2.96|
                          DCD      0x40012c00
                  |L2.100|
                          DCD      0x40013400

                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;77     */
;;;78     uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;79     {
;;;80     	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;81     
;;;82     	if (GPIOx == GPIOA)
000004  4a11              LDR      r2,|L3.76|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L3.14|
;;;83     	{
;;;84     		rcc = RCC_APB2Periph_GPIOA;
00000a  2004              MOVS     r0,#4
00000c  e01c              B        |L3.72|
                  |L3.14|
;;;85     	}
;;;86     	else if (GPIOx == GPIOB)
00000e  4a10              LDR      r2,|L3.80|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L3.24|
;;;87     	{
;;;88     		rcc = RCC_APB2Periph_GPIOB;
000014  2008              MOVS     r0,#8
000016  e017              B        |L3.72|
                  |L3.24|
;;;89     	}
;;;90     	else if (GPIOx == GPIOC)
000018  4a0e              LDR      r2,|L3.84|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L3.34|
;;;91     	{
;;;92     		rcc = RCC_APB2Periph_GPIOC;
00001e  2010              MOVS     r0,#0x10
000020  e012              B        |L3.72|
                  |L3.34|
;;;93     	}
;;;94     	else if (GPIOx == GPIOD)
000022  4a0d              LDR      r2,|L3.88|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L3.44|
;;;95     	{
;;;96     		rcc = RCC_APB2Periph_GPIOD;
000028  2020              MOVS     r0,#0x20
00002a  e00d              B        |L3.72|
                  |L3.44|
;;;97     	}
;;;98     	else if (GPIOx == GPIOE)
00002c  4a0b              LDR      r2,|L3.92|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L3.54|
;;;99     	{
;;;100    		rcc = RCC_APB2Periph_GPIOE;
000032  2040              MOVS     r0,#0x40
000034  e008              B        |L3.72|
                  |L3.54|
;;;101    	}
;;;102    	else if (GPIOx == GPIOF)
000036  4a0a              LDR      r2,|L3.96|
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L3.64|
;;;103    	{
;;;104    		rcc = RCC_APB2Periph_GPIOF;
00003c  2080              MOVS     r0,#0x80
00003e  e003              B        |L3.72|
                  |L3.64|
;;;105    	}
;;;106    	else if (GPIOx == GPIOG)
000040  4a08              LDR      r2,|L3.100|
000042  4291              CMP      r1,r2
000044  d100              BNE      |L3.72|
;;;107    	{
;;;108    		rcc = RCC_APB2Periph_GPIOG;
000046  1588              ASRS     r0,r1,#22
                  |L3.72|
;;;109    	}
;;;110    
;;;111    	return rcc;
;;;112    }
000048  4770              BX       lr
;;;113    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40010800
                  |L3.80|
                          DCD      0x40010c00
                  |L3.84|
                          DCD      0x40011000
                  |L3.88|
                          DCD      0x40011400
                  |L3.92|
                          DCD      0x40011800
                  |L3.96|
                          DCD      0x40011c00
                  |L3.100|
                          DCD      0x40012000

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;121    */
;;;122    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;123    {
;;;124    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;125    
;;;126    	/*
;;;127    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;128    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;129    	*/
;;;130    	if (TIMx == TIM1)
000004  4a24              LDR      r2,|L4.152|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L4.14|
;;;131    	{
;;;132    		rcc = RCC_APB2Periph_TIM1;
00000a  14c8              ASRS     r0,r1,#19
00000c  e042              B        |L4.148|
                  |L4.14|
;;;133    	}
;;;134    	else if (TIMx == TIM8)
00000e  4a23              LDR      r2,|L4.156|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L4.24|
;;;135    	{
;;;136    		rcc = RCC_APB2Periph_TIM8;
000014  1448              ASRS     r0,r1,#17
000016  e03d              B        |L4.148|
                  |L4.24|
;;;137    	}
;;;138    	else if (TIMx == TIM9)
000018  4a21              LDR      r2,|L4.160|
00001a  4291              CMP      r1,r2
00001c  d102              BNE      |L4.36|
;;;139    	{
;;;140    		rcc = RCC_APB2Periph_TIM9;
00001e  f44f2000          MOV      r0,#0x80000
000022  e037              B        |L4.148|
                  |L4.36|
;;;141    	}
;;;142    	else if (TIMx == TIM10)
000024  4a1f              LDR      r2,|L4.164|
000026  4291              CMP      r1,r2
000028  d102              BNE      |L4.48|
;;;143    	{
;;;144    		rcc = RCC_APB2Periph_TIM10;
00002a  f44f1080          MOV      r0,#0x100000
00002e  e031              B        |L4.148|
                  |L4.48|
;;;145    	}
;;;146    	else if (TIMx == TIM11)
000030  4a1d              LDR      r2,|L4.168|
000032  4291              CMP      r1,r2
000034  d102              BNE      |L4.60|
;;;147    	{
;;;148    		rcc = RCC_APB2Periph_TIM11;
000036  f44f1000          MOV      r0,#0x200000
00003a  e02b              B        |L4.148|
                  |L4.60|
;;;149    	}
;;;150    	/* 下面是 APB1时钟 */
;;;151    	else if (TIMx == TIM2)
00003c  f1b14f80          CMP      r1,#0x40000000
000040  d101              BNE      |L4.70|
;;;152    	{
;;;153    		rcc = RCC_APB1Periph_TIM2;
000042  2001              MOVS     r0,#1
000044  e026              B        |L4.148|
                  |L4.70|
;;;154    	}
;;;155    	else if (TIMx == TIM3)
000046  4a19              LDR      r2,|L4.172|
000048  4291              CMP      r1,r2
00004a  d101              BNE      |L4.80|
;;;156    	{
;;;157    		rcc = RCC_APB1Periph_TIM3;
00004c  2002              MOVS     r0,#2
00004e  e021              B        |L4.148|
                  |L4.80|
;;;158    	}
;;;159    	else if (TIMx == TIM4)
000050  4a17              LDR      r2,|L4.176|
000052  4291              CMP      r1,r2
000054  d101              BNE      |L4.90|
;;;160    	{
;;;161    		rcc = RCC_APB1Periph_TIM4;
000056  2004              MOVS     r0,#4
000058  e01c              B        |L4.148|
                  |L4.90|
;;;162    	}
;;;163    	else if (TIMx == TIM5)
00005a  4a16              LDR      r2,|L4.180|
00005c  4291              CMP      r1,r2
00005e  d101              BNE      |L4.100|
;;;164    	{
;;;165    		rcc = RCC_APB1Periph_TIM5;
000060  2008              MOVS     r0,#8
000062  e017              B        |L4.148|
                  |L4.100|
;;;166    	}
;;;167    	else if (TIMx == TIM6)
000064  4a14              LDR      r2,|L4.184|
000066  4291              CMP      r1,r2
000068  d101              BNE      |L4.110|
;;;168    	{
;;;169    		rcc = RCC_APB1Periph_TIM6;
00006a  2010              MOVS     r0,#0x10
00006c  e012              B        |L4.148|
                  |L4.110|
;;;170    	}
;;;171    	else if (TIMx == TIM7)
00006e  4a13              LDR      r2,|L4.188|
000070  4291              CMP      r1,r2
000072  d101              BNE      |L4.120|
;;;172    	{
;;;173    		rcc = RCC_APB1Periph_TIM7;
000074  2020              MOVS     r0,#0x20
000076  e00d              B        |L4.148|
                  |L4.120|
;;;174    	}
;;;175    	else if (TIMx == TIM12)
000078  4a11              LDR      r2,|L4.192|
00007a  4291              CMP      r1,r2
00007c  d101              BNE      |L4.130|
;;;176    	{
;;;177    		rcc = RCC_APB1Periph_TIM12;
00007e  2040              MOVS     r0,#0x40
000080  e008              B        |L4.148|
                  |L4.130|
;;;178    	}
;;;179    	else if (TIMx == TIM13)
000082  4a10              LDR      r2,|L4.196|
000084  4291              CMP      r1,r2
000086  d101              BNE      |L4.140|
;;;180    	{
;;;181    		rcc = RCC_APB1Periph_TIM13;
000088  2080              MOVS     r0,#0x80
00008a  e003              B        |L4.148|
                  |L4.140|
;;;182    	}
;;;183    	else if (TIMx == TIM14)
00008c  4a0e              LDR      r2,|L4.200|
00008e  4291              CMP      r1,r2
000090  d100              BNE      |L4.148|
;;;184    	{
;;;185    		rcc = RCC_APB1Periph_TIM14;
000092  1588              ASRS     r0,r1,#22
                  |L4.148|
;;;186    	}
;;;187    
;;;188    	return rcc;
;;;189    }
000094  4770              BX       lr
;;;190    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x40012c00
                  |L4.156|
                          DCD      0x40013400
                  |L4.160|
                          DCD      0x40014c00
                  |L4.164|
                          DCD      0x40015000
                  |L4.168|
                          DCD      0x40015400
                  |L4.172|
                          DCD      0x40000400
                  |L4.176|
                          DCD      0x40000800
                  |L4.180|
                          DCD      0x40000c00
                  |L4.184|
                          DCD      0x40001000
                  |L4.188|
                          DCD      0x40001400
                  |L4.192|
                          DCD      0x40001800
                  |L4.196|
                          DCD      0x40001c00
                  |L4.200|
                          DCD      0x40002000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;258    */
;;;259    void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;260    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;261    {
000004  b087              SUB      sp,sp,#0x1c
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a14          LDRD     r6,r10,[sp,#0x50]
;;;262    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;263    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;264    	uint16_t usPeriod;
;;;265    	uint16_t usPrescaler;
;;;266    	uint32_t uiTIMxCLK;
;;;267    
;;;268    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L5.54|
;;;269    	{		
;;;270    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;271    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  9908              LDR      r1,[sp,#0x20]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;272    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  9908              LDR      r1,[sp,#0x20]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L5.48|
;;;273    		return;
;;;274    	}
;;;275    	else if (_ulDutyCycle == 10000)
;;;276    	{
;;;277    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;278    
;;;279    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;280    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;281    		return;
;;;282    	}
;;;283    	
;;;284    
;;;285    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;286    	
;;;287        /*-----------------------------------------------------------------------
;;;288    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;289    
;;;290    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;291    		PCLK2 = HCLK / 2      (APB2Periph)
;;;292    		PCLK1 = HCLK / 4      (APB1Periph)
;;;293    
;;;294    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;295    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;296    
;;;297    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;298    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;299    
;;;300    	----------------------------------------------------------------------- */
;;;301    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;302    	{
;;;303    		/* APB2 定时器 */
;;;304    		uiTIMxCLK = SystemCoreClock;
;;;305    	}
;;;306    	else	/* APB1 定时器 */
;;;307    	{
;;;308    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;309    	}
;;;310    
;;;311    	if (_ulFreq < 100)
;;;312    	{
;;;313    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;314    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;315    	}
;;;316    	else if (_ulFreq < 3000)
;;;317    	{
;;;318    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;319    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;320    	}
;;;321    	else	/* 大于4K的频率，无需分频 */
;;;322    	{
;;;323    		usPrescaler = 0;					/* 分频比 = 1 */
;;;324    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;325    	}
;;;326    
;;;327    	/* Time base configuration */
;;;328    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;329    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;330    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;331    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;332    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;333    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;334    
;;;335    	/* PWM1 Mode configuration: Channel1 */
;;;336    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;337    	
;;;338    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;339    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;340    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;341    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;342    	
;;;343    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;	/* only for TIM1 and TIM8. */	
;;;344    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;345    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;346    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;347    	
;;;348    	if (_ucChannel == 1)
;;;349    	{
;;;350    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;351    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;352    	}
;;;353    	else if (_ucChannel == 2)
;;;354    	{
;;;355    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;356    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;357    	}
;;;358    	else if (_ucChannel == 3)
;;;359    	{
;;;360    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;361    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;362    	}
;;;363    	else if (_ucChannel == 4)
;;;364    	{
;;;365    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;366    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;367    	}
;;;368    
;;;369    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;370    
;;;371    	/* TIMx enable counter */
;;;372    	TIM_Cmd(TIMx, ENABLE);
;;;373    
;;;374    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;375    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;376    	{
;;;377    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;378    	}
;;;379    }
000030  b00b              ADD      sp,sp,#0x2c
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.54|
000036  f2427010          MOV      r0,#0x2710            ;275
00003a  4582              CMP      r10,r0                ;275
00003c  d10d              BNE      |L5.90|
00003e  2100              MOVS     r1,#0                 ;277
000040  4620              MOV      r0,r4                 ;277
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;279
000048  9908              LDR      r1,[sp,#0x20]         ;279
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;280
000050  4658              MOV      r0,r11                ;280
000052  9908              LDR      r1,[sp,#0x20]         ;280
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L5.48|
                  |L5.90|
00005a  462b              MOV      r3,r5                 ;285
00005c  4622              MOV      r2,r4                 ;285
00005e  4658              MOV      r0,r11                ;285
000060  9908              LDR      r1,[sp,#0x20]         ;285
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  4851              LDR      r0,|L5.428|
000068  4284              CMP      r4,r0                 ;301
00006a  d00b              BEQ      |L5.132|
00006c  4850              LDR      r0,|L5.432|
00006e  4284              CMP      r4,r0                 ;301
000070  d008              BEQ      |L5.132|
000072  4850              LDR      r0,|L5.436|
000074  4284              CMP      r4,r0                 ;301
000076  d005              BEQ      |L5.132|
000078  484f              LDR      r0,|L5.440|
00007a  4284              CMP      r4,r0                 ;301
00007c  d002              BEQ      |L5.132|
00007e  484f              LDR      r0,|L5.444|
000080  4284              CMP      r4,r0                 ;301
000082  d103              BNE      |L5.140|
                  |L5.132|
000084  484e              LDR      r0,|L5.448|
000086  f8d08000          LDR      r8,[r0,#0]            ;304  ; SystemCoreClock
00008a  e002              B        |L5.146|
                  |L5.140|
00008c  484c              LDR      r0,|L5.448|
00008e  f8d08000          LDR      r8,[r0,#0]            ;308  ; SystemCoreClock
                  |L5.146|
000092  2e64              CMP      r6,#0x64              ;311
000094  d20a              BCS      |L5.172|
000096  f242790f          MOV      r9,#0x270f            ;313
00009a  f2427010          MOV      r0,#0x2710            ;314
00009e  fbb8f0f0          UDIV     r0,r8,r0              ;314
0000a2  fbb0f0f6          UDIV     r0,r0,r6              ;314
0000a6  1e40              SUBS     r0,r0,#1              ;314
0000a8  b287              UXTH     r7,r0                 ;314
0000aa  e013              B        |L5.212|
                  |L5.172|
0000ac  f64030b8          MOV      r0,#0xbb8             ;316
0000b0  4286              CMP      r6,r0                 ;316
0000b2  d209              BCS      |L5.200|
0000b4  f04f0963          MOV      r9,#0x63              ;318
0000b8  2064              MOVS     r0,#0x64              ;319
0000ba  fbb8f0f0          UDIV     r0,r8,r0              ;319
0000be  fbb0f0f6          UDIV     r0,r0,r6              ;319
0000c2  1e40              SUBS     r0,r0,#1              ;319
0000c4  b287              UXTH     r7,r0                 ;319
0000c6  e005              B        |L5.212|
                  |L5.200|
0000c8  f04f0900          MOV      r9,#0                 ;323
0000cc  fbb8f0f6          UDIV     r0,r8,r6              ;324
0000d0  1e40              SUBS     r0,r0,#1              ;324
0000d2  b287              UXTH     r7,r0                 ;324
                  |L5.212|
0000d4  f8ad7014          STRH     r7,[sp,#0x14]         ;328
0000d8  f8ad9010          STRH     r9,[sp,#0x10]         ;329
0000dc  2000              MOVS     r0,#0                 ;330
0000de  f8ad0016          STRH     r0,[sp,#0x16]         ;330
0000e2  f8ad0012          STRH     r0,[sp,#0x12]         ;331
0000e6  f88d0018          STRB     r0,[sp,#0x18]         ;332
0000ea  a904              ADD      r1,sp,#0x10           ;333
0000ec  4620              MOV      r0,r4                 ;333
0000ee  f7fffffe          BL       TIM_TimeBaseInit
0000f2  4668              MOV      r0,sp                 ;336
0000f4  f7fffffe          BL       TIM_OCStructInit
0000f8  2060              MOVS     r0,#0x60              ;338
0000fa  f8ad0000          STRH     r0,[sp,#0]            ;338
0000fe  2001              MOVS     r0,#1                 ;339
000100  f8ad0002          STRH     r0,[sp,#2]            ;339
000104  fb0af007          MUL      r0,r10,r7             ;340
000108  f2427110          MOV      r1,#0x2710            ;340
00010c  fbb0f0f1          UDIV     r0,r0,r1              ;340
000110  b280              UXTH     r0,r0                 ;340
000112  f8ad0006          STRH     r0,[sp,#6]            ;340
000116  2000              MOVS     r0,#0                 ;341
000118  f8ad0008          STRH     r0,[sp,#8]            ;341
00011c  f8ad0004          STRH     r0,[sp,#4]            ;343
000120  f8ad000a          STRH     r0,[sp,#0xa]          ;344
000124  f8ad000c          STRH     r0,[sp,#0xc]          ;345
000128  f8ad000e          STRH     r0,[sp,#0xe]          ;346
00012c  2d01              CMP      r5,#1                 ;348
00012e  d108              BNE      |L5.322|
000130  4669              MOV      r1,sp                 ;350
000132  4620              MOV      r0,r4                 ;350
000134  f7fffffe          BL       TIM_OC1Init
000138  2108              MOVS     r1,#8                 ;351
00013a  4620              MOV      r0,r4                 ;351
00013c  f7fffffe          BL       TIM_OC1PreloadConfig
000140  e01f              B        |L5.386|
                  |L5.322|
000142  2d02              CMP      r5,#2                 ;353
000144  d108              BNE      |L5.344|
000146  4669              MOV      r1,sp                 ;355
000148  4620              MOV      r0,r4                 ;355
00014a  f7fffffe          BL       TIM_OC2Init
00014e  2108              MOVS     r1,#8                 ;356
000150  4620              MOV      r0,r4                 ;356
000152  f7fffffe          BL       TIM_OC2PreloadConfig
000156  e014              B        |L5.386|
                  |L5.344|
000158  2d03              CMP      r5,#3                 ;358
00015a  d108              BNE      |L5.366|
00015c  4669              MOV      r1,sp                 ;360
00015e  4620              MOV      r0,r4                 ;360
000160  f7fffffe          BL       TIM_OC3Init
000164  2108              MOVS     r1,#8                 ;361
000166  4620              MOV      r0,r4                 ;361
000168  f7fffffe          BL       TIM_OC3PreloadConfig
00016c  e009              B        |L5.386|
                  |L5.366|
00016e  2d04              CMP      r5,#4                 ;363
000170  d107              BNE      |L5.386|
000172  4669              MOV      r1,sp                 ;365
000174  4620              MOV      r0,r4                 ;365
000176  f7fffffe          BL       TIM_OC4Init
00017a  2108              MOVS     r1,#8                 ;366
00017c  4620              MOV      r0,r4                 ;366
00017e  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L5.386|
000182  2101              MOVS     r1,#1                 ;369
000184  4620              MOV      r0,r4                 ;369
000186  f7fffffe          BL       TIM_ARRPreloadConfig
00018a  2101              MOVS     r1,#1                 ;372
00018c  4620              MOV      r0,r4                 ;372
00018e  f7fffffe          BL       TIM_Cmd
000192  4806              LDR      r0,|L5.428|
000194  4284              CMP      r4,r0                 ;375
000196  d002              BEQ      |L5.414|
000198  4805              LDR      r0,|L5.432|
00019a  4284              CMP      r4,r0                 ;375
00019c  d103              BNE      |L5.422|
                  |L5.414|
00019e  2101              MOVS     r1,#1                 ;377
0001a0  4620              MOV      r0,r4                 ;377
0001a2  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L5.422|
0001a6  bf00              NOP      
0001a8  e742              B        |L5.48|
;;;380    
                          ENDP

0001aa  0000              DCW      0x0000
                  |L5.428|
                          DCD      0x40012c00
                  |L5.432|
                          DCD      0x40013400
                  |L5.436|
                          DCD      0x40014c00
                  |L5.440|
                          DCD      0x40015000
                  |L5.444|
                          DCD      0x40015400
                  |L5.448|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMOutPWM_N||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM_N PROC
;;;390    */
;;;391    void bsp_SetTIMOutPWM_N(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;392    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;393    {
000004  b087              SUB      sp,sp,#0x1c
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a14          LDRD     r6,r10,[sp,#0x50]
;;;394    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;395    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;396    	uint16_t usPeriod;
;;;397    	uint16_t usPrescaler;
;;;398    	uint32_t uiTIMxCLK;
;;;399    
;;;400    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L6.54|
;;;401    	{		
;;;402    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;403    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  9908              LDR      r1,[sp,#0x20]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;404    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  9908              LDR      r1,[sp,#0x20]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L6.48|
;;;405    		return;
;;;406    	}
;;;407    	else if (_ulDutyCycle == 10000)
;;;408    	{
;;;409    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;410    
;;;411    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;412    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;413    		return;
;;;414    	}
;;;415    	
;;;416    
;;;417    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;418    	
;;;419        /*-----------------------------------------------------------------------
;;;420    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;421    
;;;422    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;423    		PCLK2 = HCLK / 2      (APB2Periph)
;;;424    		PCLK1 = HCLK / 4      (APB1Periph)
;;;425    
;;;426    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;427    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;428    
;;;429    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;430    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;431    
;;;432    	----------------------------------------------------------------------- */
;;;433    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;434    	{
;;;435    		/* APB2 定时器 */
;;;436    		uiTIMxCLK = SystemCoreClock;
;;;437    	}
;;;438    	else	/* APB1 定时器 */
;;;439    	{
;;;440    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;441    	}
;;;442    
;;;443    	if (_ulFreq < 100)
;;;444    	{
;;;445    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;446    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;447    	}
;;;448    	else if (_ulFreq < 3000)
;;;449    	{
;;;450    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;451    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;452    	}
;;;453    	else	/* 大于4K的频率，无需分频 */
;;;454    	{
;;;455    		usPrescaler = 0;					/* 分频比 = 1 */
;;;456    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;457    	}
;;;458    
;;;459    	/* Time base configuration */
;;;460    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;461    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;462    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;463    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;464    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;465    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;466    
;;;467    	/* PWM1 Mode configuration: Channel1 */
;;;468    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;469    	
;;;470    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;471    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;		/* 和 bsp_SetTIMOutPWM_N() 不同 */
;;;472    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;473    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;474    	
;;;475    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;		/* only for TIM1 and TIM8. */	
;;;476    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;477    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;478    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;479    	
;;;480    	if (_ucChannel == 1)
;;;481    	{
;;;482    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;483    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;484    	}
;;;485    	else if (_ucChannel == 2)
;;;486    	{
;;;487    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;488    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;489    	}
;;;490    	else if (_ucChannel == 3)
;;;491    	{
;;;492    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;493    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;494    	}
;;;495    	else if (_ucChannel == 4)
;;;496    	{
;;;497    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;498    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;499    	}
;;;500    
;;;501    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;502    
;;;503    	/* TIMx enable counter */
;;;504    	TIM_Cmd(TIMx, ENABLE);
;;;505    
;;;506    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;507    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;508    	{
;;;509    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;510    	}
;;;511    }
000030  b00b              ADD      sp,sp,#0x2c
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.54|
000036  f2427010          MOV      r0,#0x2710            ;407
00003a  4582              CMP      r10,r0                ;407
00003c  d10d              BNE      |L6.90|
00003e  2100              MOVS     r1,#0                 ;409
000040  4620              MOV      r0,r4                 ;409
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;411
000048  9908              LDR      r1,[sp,#0x20]         ;411
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;412
000050  4658              MOV      r0,r11                ;412
000052  9908              LDR      r1,[sp,#0x20]         ;412
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L6.48|
                  |L6.90|
00005a  462b              MOV      r3,r5                 ;417
00005c  4622              MOV      r2,r4                 ;417
00005e  4658              MOV      r0,r11                ;417
000060  9908              LDR      r1,[sp,#0x20]         ;417
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  4852              LDR      r0,|L6.432|
000068  4284              CMP      r4,r0                 ;433
00006a  d00b              BEQ      |L6.132|
00006c  4851              LDR      r0,|L6.436|
00006e  4284              CMP      r4,r0                 ;433
000070  d008              BEQ      |L6.132|
000072  4851              LDR      r0,|L6.440|
000074  4284              CMP      r4,r0                 ;433
000076  d005              BEQ      |L6.132|
000078  4850              LDR      r0,|L6.444|
00007a  4284              CMP      r4,r0                 ;433
00007c  d002              BEQ      |L6.132|
00007e  4850              LDR      r0,|L6.448|
000080  4284              CMP      r4,r0                 ;433
000082  d103              BNE      |L6.140|
                  |L6.132|
000084  484f              LDR      r0,|L6.452|
000086  f8d08000          LDR      r8,[r0,#0]            ;436  ; SystemCoreClock
00008a  e002              B        |L6.146|
                  |L6.140|
00008c  484d              LDR      r0,|L6.452|
00008e  f8d08000          LDR      r8,[r0,#0]            ;440  ; SystemCoreClock
                  |L6.146|
000092  2e64              CMP      r6,#0x64              ;443
000094  d20a              BCS      |L6.172|
000096  f242790f          MOV      r9,#0x270f            ;445
00009a  f2427010          MOV      r0,#0x2710            ;446
00009e  fbb8f0f0          UDIV     r0,r8,r0              ;446
0000a2  fbb0f0f6          UDIV     r0,r0,r6              ;446
0000a6  1e40              SUBS     r0,r0,#1              ;446
0000a8  b287              UXTH     r7,r0                 ;446
0000aa  e013              B        |L6.212|
                  |L6.172|
0000ac  f64030b8          MOV      r0,#0xbb8             ;448
0000b0  4286              CMP      r6,r0                 ;448
0000b2  d209              BCS      |L6.200|
0000b4  f04f0963          MOV      r9,#0x63              ;450
0000b8  2064              MOVS     r0,#0x64              ;451
0000ba  fbb8f0f0          UDIV     r0,r8,r0              ;451
0000be  fbb0f0f6          UDIV     r0,r0,r6              ;451
0000c2  1e40              SUBS     r0,r0,#1              ;451
0000c4  b287              UXTH     r7,r0                 ;451
0000c6  e005              B        |L6.212|
                  |L6.200|
0000c8  f04f0900          MOV      r9,#0                 ;455
0000cc  fbb8f0f6          UDIV     r0,r8,r6              ;456
0000d0  1e40              SUBS     r0,r0,#1              ;456
0000d2  b287              UXTH     r7,r0                 ;456
                  |L6.212|
0000d4  f8ad7014          STRH     r7,[sp,#0x14]         ;460
0000d8  f8ad9010          STRH     r9,[sp,#0x10]         ;461
0000dc  2000              MOVS     r0,#0                 ;462
0000de  f8ad0016          STRH     r0,[sp,#0x16]         ;462
0000e2  f8ad0012          STRH     r0,[sp,#0x12]         ;463
0000e6  f88d0018          STRB     r0,[sp,#0x18]         ;464
0000ea  a904              ADD      r1,sp,#0x10           ;465
0000ec  4620              MOV      r0,r4                 ;465
0000ee  f7fffffe          BL       TIM_TimeBaseInit
0000f2  4668              MOV      r0,sp                 ;468
0000f4  f7fffffe          BL       TIM_OCStructInit
0000f8  2060              MOVS     r0,#0x60              ;470
0000fa  f8ad0000          STRH     r0,[sp,#0]            ;470
0000fe  2000              MOVS     r0,#0                 ;471
000100  f8ad0002          STRH     r0,[sp,#2]            ;471
000104  fb0af007          MUL      r0,r10,r7             ;472
000108  f2427110          MOV      r1,#0x2710            ;472
00010c  fbb0f0f1          UDIV     r0,r0,r1              ;472
000110  b280              UXTH     r0,r0                 ;472
000112  f8ad0006          STRH     r0,[sp,#6]            ;472
000116  2000              MOVS     r0,#0                 ;473
000118  f8ad0008          STRH     r0,[sp,#8]            ;473
00011c  2004              MOVS     r0,#4                 ;475
00011e  f8ad0004          STRH     r0,[sp,#4]            ;475
000122  2000              MOVS     r0,#0                 ;476
000124  f8ad000a          STRH     r0,[sp,#0xa]          ;476
000128  f8ad000c          STRH     r0,[sp,#0xc]          ;477
00012c  f8ad000e          STRH     r0,[sp,#0xe]          ;478
000130  2d01              CMP      r5,#1                 ;480
000132  d108              BNE      |L6.326|
000134  4669              MOV      r1,sp                 ;482
000136  4620              MOV      r0,r4                 ;482
000138  f7fffffe          BL       TIM_OC1Init
00013c  2108              MOVS     r1,#8                 ;483
00013e  4620              MOV      r0,r4                 ;483
000140  f7fffffe          BL       TIM_OC1PreloadConfig
000144  e01f              B        |L6.390|
                  |L6.326|
000146  2d02              CMP      r5,#2                 ;485
000148  d108              BNE      |L6.348|
00014a  4669              MOV      r1,sp                 ;487
00014c  4620              MOV      r0,r4                 ;487
00014e  f7fffffe          BL       TIM_OC2Init
000152  2108              MOVS     r1,#8                 ;488
000154  4620              MOV      r0,r4                 ;488
000156  f7fffffe          BL       TIM_OC2PreloadConfig
00015a  e014              B        |L6.390|
                  |L6.348|
00015c  2d03              CMP      r5,#3                 ;490
00015e  d108              BNE      |L6.370|
000160  4669              MOV      r1,sp                 ;492
000162  4620              MOV      r0,r4                 ;492
000164  f7fffffe          BL       TIM_OC3Init
000168  2108              MOVS     r1,#8                 ;493
00016a  4620              MOV      r0,r4                 ;493
00016c  f7fffffe          BL       TIM_OC3PreloadConfig
000170  e009              B        |L6.390|
                  |L6.370|
000172  2d04              CMP      r5,#4                 ;495
000174  d107              BNE      |L6.390|
000176  4669              MOV      r1,sp                 ;497
000178  4620              MOV      r0,r4                 ;497
00017a  f7fffffe          BL       TIM_OC4Init
00017e  2108              MOVS     r1,#8                 ;498
000180  4620              MOV      r0,r4                 ;498
000182  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L6.390|
000186  2101              MOVS     r1,#1                 ;501
000188  4620              MOV      r0,r4                 ;501
00018a  f7fffffe          BL       TIM_ARRPreloadConfig
00018e  2101              MOVS     r1,#1                 ;504
000190  4620              MOV      r0,r4                 ;504
000192  f7fffffe          BL       TIM_Cmd
000196  4806              LDR      r0,|L6.432|
000198  4284              CMP      r4,r0                 ;507
00019a  d002              BEQ      |L6.418|
00019c  4805              LDR      r0,|L6.436|
00019e  4284              CMP      r4,r0                 ;507
0001a0  d103              BNE      |L6.426|
                  |L6.418|
0001a2  2101              MOVS     r1,#1                 ;509
0001a4  4620              MOV      r0,r4                 ;509
0001a6  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L6.426|
0001aa  bf00              NOP      
0001ac  e740              B        |L6.48|
;;;512    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L6.432|
                          DCD      0x40012c00
                  |L6.436|
                          DCD      0x40013400
                  |L6.440|
                          DCD      0x40014c00
                  |L6.444|
                          DCD      0x40015000
                  |L6.448|
                          DCD      0x40015400
                  |L6.452|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;524    */
;;;525    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;526    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;527    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;528    	uint16_t usPeriod;
;;;529    	uint16_t usPrescaler;
;;;530    	uint32_t uiTIMxCLK;
;;;531    
;;;532      	/* 使能TIM时钟 */
;;;533    	if ((TIMx == TIM1) || (TIMx == TIM8))
00000c  4874              LDR      r0,|L7.480|
00000e  4284              CMP      r4,r0
000010  d002              BEQ      |L7.24|
000012  4874              LDR      r0,|L7.484|
000014  4284              CMP      r4,r0
000016  d107              BNE      |L7.40|
                  |L7.24|
;;;534    	{
;;;535    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       bsp_GetRCCofTIM
00001e  4683              MOV      r11,r0
000020  2101              MOVS     r1,#1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
000026  e006              B        |L7.54|
                  |L7.40|
;;;536    	}
;;;537    	else
;;;538    	{
;;;539    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       bsp_GetRCCofTIM
00002e  4683              MOV      r11,r0
000030  2101              MOVS     r1,#1
000032  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L7.54|
;;;540    	}
;;;541    
;;;542    	if (_ulFreq == 0)
000036  2d00              CMP      r5,#0
000038  d141              BNE      |L7.190|
;;;543    	{
;;;544    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
00003a  2100              MOVS     r1,#0
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       TIM_Cmd
;;;545    
;;;546    		/* 关闭TIM定时更新中断 (Update) */
;;;547    		{
;;;548    			NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;549    			uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
000042  46ab              MOV      r11,r5
;;;550    
;;;551    			if (TIMx == TIM1)
000044  4866              LDR      r0,|L7.480|
000046  4284              CMP      r4,r0
000048  d102              BNE      |L7.80|
;;;552    				irq = TIM1_UP_IRQn;
00004a  f04f0b19          MOV      r11,#0x19
00004e  e028              B        |L7.162|
                  |L7.80|
;;;553    			else if (TIMx == TIM2)
000050  f1b44f80          CMP      r4,#0x40000000
000054  d102              BNE      |L7.92|
;;;554    				irq = TIM2_IRQn;
000056  f04f0b1c          MOV      r11,#0x1c
00005a  e022              B        |L7.162|
                  |L7.92|
;;;555    			else if (TIMx == TIM3)
00005c  4862              LDR      r0,|L7.488|
00005e  4284              CMP      r4,r0
000060  d102              BNE      |L7.104|
;;;556    				irq = TIM3_IRQn;
000062  f04f0b1d          MOV      r11,#0x1d
000066  e01c              B        |L7.162|
                  |L7.104|
;;;557    			else if (TIMx == TIM4)
000068  4860              LDR      r0,|L7.492|
00006a  4284              CMP      r4,r0
00006c  d102              BNE      |L7.116|
;;;558    				irq = TIM4_IRQn;
00006e  f04f0b1e          MOV      r11,#0x1e
000072  e016              B        |L7.162|
                  |L7.116|
;;;559    			else if (TIMx == TIM5)
000074  485e              LDR      r0,|L7.496|
000076  4284              CMP      r4,r0
000078  d102              BNE      |L7.128|
;;;560    				irq = TIM5_IRQn;
00007a  f04f0b32          MOV      r11,#0x32
00007e  e010              B        |L7.162|
                  |L7.128|
;;;561    			else if (TIMx == TIM6)
000080  485c              LDR      r0,|L7.500|
000082  4284              CMP      r4,r0
000084  d102              BNE      |L7.140|
;;;562    				irq = TIM6_IRQn;
000086  f04f0b36          MOV      r11,#0x36
00008a  e00a              B        |L7.162|
                  |L7.140|
;;;563    			else if (TIMx == TIM7)
00008c  485a              LDR      r0,|L7.504|
00008e  4284              CMP      r4,r0
000090  d102              BNE      |L7.152|
;;;564    				irq = TIM7_IRQn;
000092  f04f0b37          MOV      r11,#0x37
000096  e004              B        |L7.162|
                  |L7.152|
;;;565    			else if (TIMx == TIM8)
000098  4852              LDR      r0,|L7.484|
00009a  4284              CMP      r4,r0
00009c  d101              BNE      |L7.162|
;;;566    				irq = TIM8_UP_IRQn;
00009e  f04f0b2c          MOV      r11,#0x2c
                  |L7.162|
;;;567    
;;;568    			NVIC_InitStructure.NVIC_IRQChannel = irq;
0000a2  f88db000          STRB     r11,[sp,#0]
;;;569    			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
0000a6  f88d9001          STRB     r9,[sp,#1]
;;;570    			NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
0000aa  f88da002          STRB     r10,[sp,#2]
;;;571    			NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0000ae  2000              MOVS     r0,#0
0000b0  f88d0003          STRB     r0,[sp,#3]
;;;572    			NVIC_Init(&NVIC_InitStructure);
0000b4  4668              MOV      r0,sp
0000b6  f7fffffe          BL       NVIC_Init
                  |L7.186|
;;;573    		}		
;;;574    		return;
;;;575    	}
;;;576    
;;;577        /*-----------------------------------------------------------------------
;;;578    		system_stm32f4xx.c 文件中 static void SetSysClockToHSE(void) 函数对时钟的配置如下：
;;;579    
;;;580    			//HCLK = SYSCLK 
;;;581    			RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
;;;582    			  
;;;583    			//PCLK2 = HCLK
;;;584    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
;;;585    			
;;;586    			//PCLK1 = HCLK
;;;587    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
;;;588    
;;;589    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;590    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;591    
;;;592    	----------------------------------------------------------------------- */
;;;593    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;594    	{
;;;595    		/* APB2 定时器 */
;;;596    		uiTIMxCLK = SystemCoreClock;
;;;597    	}
;;;598    	else	/* APB1 定时器 .  */
;;;599    	{
;;;600    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;601    	}
;;;602    
;;;603    	if (_ulFreq < 100)
;;;604    	{
;;;605    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
;;;606    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;607    	}
;;;608    	else if (_ulFreq < 3000)
;;;609    	{
;;;610    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;611    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;612    	}
;;;613    	else	/* 大于4K的频率，无需分频 */
;;;614    	{
;;;615    		usPrescaler = 0;					/* 分频比 = 1 */
;;;616    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;617    	}
;;;618    
;;;619    	/* Time base configuration */
;;;620    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;621    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;622    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;623    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;624    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
;;;625    
;;;626    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;627    
;;;628    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;629    
;;;630    	/* TIM Interrupts enable */
;;;631    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
;;;632    
;;;633    	/* TIMx enable counter */
;;;634    	TIM_Cmd(TIMx, ENABLE);
;;;635    
;;;636    	/* 配置TIM定时更新中断 (Update) */
;;;637    	{
;;;638    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;639    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;640    
;;;641    		if (TIMx == TIM1)
;;;642    			irq = TIM1_UP_IRQn;
;;;643    		else if (TIMx == TIM2)
;;;644    			irq = TIM2_IRQn;
;;;645    		else if (TIMx == TIM3)
;;;646    			irq = TIM3_IRQn;
;;;647    		else if (TIMx == TIM4)
;;;648    			irq = TIM4_IRQn;
;;;649    		else if (TIMx == TIM5)
;;;650    			irq = TIM5_IRQn;
;;;651    		else if (TIMx == TIM6)
;;;652    			irq = TIM6_IRQn;
;;;653    		else if (TIMx == TIM7)
;;;654    			irq = TIM7_IRQn;
;;;655    		else if (TIMx == TIM8)
;;;656    			irq = TIM8_UP_IRQn;
;;;657    
;;;658    		NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;659    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;660    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;661    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;662    		NVIC_Init(&NVIC_InitStructure);
;;;663    	}
;;;664    }
0000ba  e8bd9fff          POP      {r0-r12,pc}
                  |L7.190|
0000be  4848              LDR      r0,|L7.480|
0000c0  4284              CMP      r4,r0                 ;593
0000c2  d00b              BEQ      |L7.220|
0000c4  4847              LDR      r0,|L7.484|
0000c6  4284              CMP      r4,r0                 ;593
0000c8  d008              BEQ      |L7.220|
0000ca  484c              LDR      r0,|L7.508|
0000cc  4284              CMP      r4,r0                 ;593
0000ce  d005              BEQ      |L7.220|
0000d0  484b              LDR      r0,|L7.512|
0000d2  4284              CMP      r4,r0                 ;593
0000d4  d002              BEQ      |L7.220|
0000d6  484b              LDR      r0,|L7.516|
0000d8  4284              CMP      r4,r0                 ;593
0000da  d102              BNE      |L7.226|
                  |L7.220|
0000dc  484a              LDR      r0,|L7.520|
0000de  6806              LDR      r6,[r0,#0]            ;596  ; SystemCoreClock
0000e0  e001              B        |L7.230|
                  |L7.226|
0000e2  4849              LDR      r0,|L7.520|
0000e4  6806              LDR      r6,[r0,#0]            ;600  ; SystemCoreClock
                  |L7.230|
0000e6  2d64              CMP      r5,#0x64              ;603
0000e8  d20a              BCS      |L7.256|
0000ea  f242780f          MOV      r8,#0x270f            ;605
0000ee  f2427010          MOV      r0,#0x2710            ;606
0000f2  fbb6f0f0          UDIV     r0,r6,r0              ;606
0000f6  fbb0f0f5          UDIV     r0,r0,r5              ;606
0000fa  1e40              SUBS     r0,r0,#1              ;606
0000fc  b287              UXTH     r7,r0                 ;606
0000fe  e013              B        |L7.296|
                  |L7.256|
000100  f64030b8          MOV      r0,#0xbb8             ;608
000104  4285              CMP      r5,r0                 ;608
000106  d209              BCS      |L7.284|
000108  f04f0863          MOV      r8,#0x63              ;610
00010c  2064              MOVS     r0,#0x64              ;611
00010e  fbb6f0f0          UDIV     r0,r6,r0              ;611
000112  fbb0f0f5          UDIV     r0,r0,r5              ;611
000116  1e40              SUBS     r0,r0,#1              ;611
000118  b287              UXTH     r7,r0                 ;611
00011a  e005              B        |L7.296|
                  |L7.284|
00011c  f04f0800          MOV      r8,#0                 ;615
000120  fbb6f0f5          UDIV     r0,r6,r5              ;616
000124  1e40              SUBS     r0,r0,#1              ;616
000126  b287              UXTH     r7,r0                 ;616
                  |L7.296|
000128  f8ad7008          STRH     r7,[sp,#8]            ;620
00012c  f8ad8004          STRH     r8,[sp,#4]            ;621
000130  2000              MOVS     r0,#0                 ;622
000132  f8ad000a          STRH     r0,[sp,#0xa]          ;622
000136  f8ad0006          STRH     r0,[sp,#6]            ;623
00013a  f88d000c          STRB     r0,[sp,#0xc]          ;624
00013e  a901              ADD      r1,sp,#4              ;626
000140  4620              MOV      r0,r4                 ;626
000142  f7fffffe          BL       TIM_TimeBaseInit
000146  2101              MOVS     r1,#1                 ;628
000148  4620              MOV      r0,r4                 ;628
00014a  f7fffffe          BL       TIM_ARRPreloadConfig
00014e  2201              MOVS     r2,#1                 ;631
000150  4611              MOV      r1,r2                 ;631
000152  4620              MOV      r0,r4                 ;631
000154  f7fffffe          BL       TIM_ITConfig
000158  2101              MOVS     r1,#1                 ;634
00015a  4620              MOV      r0,r4                 ;634
00015c  f7fffffe          BL       TIM_Cmd
000160  f04f0b00          MOV      r11,#0                ;639
000164  481e              LDR      r0,|L7.480|
000166  4284              CMP      r4,r0                 ;641
000168  d102              BNE      |L7.368|
00016a  f04f0b19          MOV      r11,#0x19             ;642
00016e  e028              B        |L7.450|
                  |L7.368|
000170  f1b44f80          CMP      r4,#0x40000000        ;643
000174  d102              BNE      |L7.380|
000176  f04f0b1c          MOV      r11,#0x1c             ;644
00017a  e022              B        |L7.450|
                  |L7.380|
00017c  481a              LDR      r0,|L7.488|
00017e  4284              CMP      r4,r0                 ;645
000180  d102              BNE      |L7.392|
000182  f04f0b1d          MOV      r11,#0x1d             ;646
000186  e01c              B        |L7.450|
                  |L7.392|
000188  4818              LDR      r0,|L7.492|
00018a  4284              CMP      r4,r0                 ;647
00018c  d102              BNE      |L7.404|
00018e  f04f0b1e          MOV      r11,#0x1e             ;648
000192  e016              B        |L7.450|
                  |L7.404|
000194  4816              LDR      r0,|L7.496|
000196  4284              CMP      r4,r0                 ;649
000198  d102              BNE      |L7.416|
00019a  f04f0b32          MOV      r11,#0x32             ;650
00019e  e010              B        |L7.450|
                  |L7.416|
0001a0  4814              LDR      r0,|L7.500|
0001a2  4284              CMP      r4,r0                 ;651
0001a4  d102              BNE      |L7.428|
0001a6  f04f0b36          MOV      r11,#0x36             ;652
0001aa  e00a              B        |L7.450|
                  |L7.428|
0001ac  4812              LDR      r0,|L7.504|
0001ae  4284              CMP      r4,r0                 ;653
0001b0  d102              BNE      |L7.440|
0001b2  f04f0b37          MOV      r11,#0x37             ;654
0001b6  e004              B        |L7.450|
                  |L7.440|
0001b8  480a              LDR      r0,|L7.484|
0001ba  4284              CMP      r4,r0                 ;655
0001bc  d101              BNE      |L7.450|
0001be  f04f0b2c          MOV      r11,#0x2c             ;656
                  |L7.450|
0001c2  f88db000          STRB     r11,[sp,#0]           ;658
0001c6  f88d9001          STRB     r9,[sp,#1]            ;659
0001ca  f88da002          STRB     r10,[sp,#2]           ;660
0001ce  2001              MOVS     r0,#1                 ;661
0001d0  f88d0003          STRB     r0,[sp,#3]            ;661
0001d4  4668              MOV      r0,sp                 ;662
0001d6  f7fffffe          BL       NVIC_Init
0001da  bf00              NOP      
0001dc  e76d              B        |L7.186|
;;;665    
                          ENDP

0001de  0000              DCW      0x0000
                  |L7.480|
                          DCD      0x40012c00
                  |L7.484|
                          DCD      0x40013400
                  |L7.488|
                          DCD      0x40000400
                  |L7.492|
                          DCD      0x40000800
                  |L7.496|
                          DCD      0x40000c00
                  |L7.500|
                          DCD      0x40001000
                  |L7.504|
                          DCD      0x40001400
                  |L7.508|
                          DCD      0x40014c00
                  |L7.512|
                          DCD      0x40015000
                  |L7.516|
                          DCD      0x40015400
                  |L7.520|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tim_pwm_c_d7165983____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REVSH|
#line 128
|__asm___13_bsp_tim_pwm_c_d7165983____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
