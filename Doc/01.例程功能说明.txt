*********************************************************************************************************
*
*	版    本 : V1.0
*	说    明 : 本实验主要学习如何在FreeRTOS上面实现微妙延迟。
*              实验目的：
*                1. 学习FreeRTOS的微妙延迟实现，采用DS18B20为例子。因为这个器件有很多地方要用到微妙延迟。
*                2. 微妙延迟的实现在bsp_dwt.c文件中，早前是采用的滴答定时器来实现微妙延迟，有不少局限性。很多
*                   时候，我们希望先初始化了外设功能后再开始滴答定时器，此时滴答定时器是用于系统时钟节拍，
*                   在使用RTX和FreeRTOS操作系统时，这个问题表现的尤为突出。
*                    -------本文件中我们使用了一种全新的微妙延迟方案，实际测试效果很好。------
*                3. 延时采用CPU的内部计数实现，32位计数器。
*                   (1). 主频168MHz的情况下，32位计数器计满是2^32/168000000 = 25.565秒
*                        建议使用本函数做延迟的话，延迟在1秒以下。  
*                   (3). 实际通过示波器测试，微妙延迟函数比实际设置实际多运行0.25us左右的时间。
*                     下面数据测试条件：
*             			 a. MDK5.15，优化等级0, 不同的MDK优化等级对其没有影响。
*            			 b. STM32F407IGT6
*            			 c. 测试方法：
*				 			GPIOI->BSRRL = GPIO_Pin_8;
*				 			bsp_DelayUS(10);
*							GPIOI->BSRRH = GPIO_Pin_8;
*            			   -------------------------------------------
*               		   测试                 实际执行
*            				bsp_DelayUS(1)          1.2360us
*            			    bsp_DelayUS(2)          2.256us
*             			    bsp_DelayUS(3)          3.256us
*             			    bsp_DelayUS(4)          4.256us
*             			    bsp_DelayUS(5)          5.276us
*             				bsp_DelayUS(6)          6.276us
*             				bsp_DelayUS(7)          7.276us
*            			    bsp_DelayUS(8)          8.276us
*            			    bsp_DelayUS(9)          9.276us
*            			 	bsp_DelayUS(10)         10.28us
*            		(3). 两个32位无符号数相减，获取的结果再赋值给32位无符号数依然可以正确的获取差值。
*                        假如A,B,C都是32位无符号数。
*              			 如果A > B  那么A - B = C，这个很好理解，完全没有问题
*              			 如果A < B  那么A - B = C， C的数值就是0xFFFFFFFF - B + A + 1。这一点要特别注意，
*                        正好用于本函数。
*                   (4). 具体实现参考bsp_dwt.c文件。
*              实验内容：
*                1. 按下按键K1可以通过串口打印任务执行情况（波特率115200，数据位8，奇偶校验位无，停止位1）
*                   =================================================
*                   任务名      任务状态 优先级   剩余栈 任务序号
*                   vTaskUserIF     R       1       256     1
*                   IDLE            R       0       114     5
*                   vTaskMsgPro     B       3       358     3
*                   vTaskLED        B       2       484     2
*                   vTaskStart      B       4       490     4
*                   
*                   
*                   任务名       运行计数         使用率
*                   vTaskUserIF     874             <1%
*                   IDLE            4857370         98%
*                   vTaskMsgPro     93450           1%
*                   vTaskLED        0               <1%
*                   vTaskStart      1               <1%
*                  串口软件建议使用SecureCRT（V4光盘里面有此软件）查看打印信息。
*                  各个任务实现的功能如下：
*                   vTaskTaskUserIF 任务: 接口消息处理	
*                   vTaskLED        任务: LED闪烁
*                   vTaskMsgPro     任务: 消息处理，这里用作DS18B20的温度采集和打印
*                   vTaskStart      任务: 启动任务，也就是最高优先级任务，这里实现按键扫描
*                2. 任务运行状态的定义如下，跟上面串口打印字母B, R, D, S对应：
*                    #define tskBLOCKED_CHAR		( 'B' )  阻塞
*                    #define tskREADY_CHAR		    ( 'R' )  就绪
*                    #define tskDELETED_CHAR		( 'D' )  删除
*                    #define tskSUSPENDED_CHAR	    ( 'S' )  挂起
*                3. 每200ms打印当前的温度值。
*              注意事项：
*                1. 本实验推荐使用串口软件SecureCRT，要不串口打印效果不整齐。此软件在
*                   V4开发板光盘里面有。
*                2. 务必将编辑器的缩进参数和TAB设置为4来阅读本文件，要不代码显示不整齐。
*
*	修改记录 :
*		版本号    日期         作者            说明
*       V1.0    2016-03-15   Eric2013    1. ST固件库到V3.6.1版本
*                                        2. BSP驱动包V1.2
*                                        3. FreeRTOS版本V8.2.3
*
*	Copyright (C), 2016-2020, 安富莱电子 www.armfly.com
*
*********************************************************************************************************
