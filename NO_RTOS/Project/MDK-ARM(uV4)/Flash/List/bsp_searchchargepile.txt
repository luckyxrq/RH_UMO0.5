; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_searchchargepile.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_searchchargepile.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\..\User\angle\gan_rui_Angle -I..\..\User\angle\yuan_zi_Angle -I..\..\User\dx8\inc -IF:\LuckyXRQ\CleanCar\NO_RTOS\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_searchchargepile.crf ..\..\User\app\src\bsp_SearchChargePile.c]
                          THUMB

                          AREA ||i.bsp_InitChargeIO||, CODE, READONLY, ALIGN=2

                  bsp_InitChargeIO PROC
;;;192    */
;;;193    void bsp_InitChargeIO(void)
000000  b508              PUSH     {r3,lr}
;;;194    {
;;;195    	GPIO_InitTypeDef GPIO_InitStructure;
;;;196    
;;;197    	/* 打开GPIO时钟 */
;;;198    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
000002  2101              MOVS     r1,#1
000004  2080              MOVS     r0,#0x80
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;199    
;;;200    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;201    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;202    	
;;;203    	/*上桩检测*/
;;;204    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_TOUCH_PILE;
000016  2080              MOVS     r0,#0x80
000018  f8ad0000          STRH     r0,[sp,#0]
;;;205    	GPIO_Init(GPIO_PORT_CHARGE_TOUCH_PILE, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4809              LDR      r0,|L1.68|
000020  f7fffffe          BL       GPIO_Init
;;;206    	
;;;207    	/*正在充电中*/
;;;208    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_IS_CHARGING;
000024  2001              MOVS     r0,#1
000026  f8ad0000          STRH     r0,[sp,#0]
;;;209    	GPIO_Init(GPIO_PORT_CHARGE_IS_CHARGING, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4806              LDR      r0,|L1.72|
00002e  f7fffffe          BL       GPIO_Init
;;;210    	
;;;211    	/*充电完成*/
;;;212    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_IS_DONE;
000032  2002              MOVS     r0,#2
000034  f8ad0000          STRH     r0,[sp,#0]
;;;213    	GPIO_Init(GPIO_PORT_CHARGE_IS_DONE, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4803              LDR      r0,|L1.72|
00003c  f7fffffe          BL       GPIO_Init
;;;214    	
;;;215    }
000040  bd08              POP      {r3,pc}
;;;216    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40011c00
                  |L1.72|
                          DCD      0x40012000

                          AREA ||i.bsp_IsChargeDone||, CODE, READONLY, ALIGN=2

                  bsp_IsChargeDone PROC
;;;172    */
;;;173    bool bsp_IsChargeDone(void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_IS_DONE,GPIO_PIN_CHARGE_IS_DONE)==0)
000002  2102              MOVS     r1,#2
000004  4803              LDR      r0,|L2.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b908              CBNZ     r0,|L2.16|
;;;176    	{
;;;177    		return true ;
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;178    	}
;;;179    	else
;;;180    	{
;;;181    		return false ;
;;;182    	}
;;;183    }
00000e  bd10              POP      {r4,pc}
                  |L2.16|
000010  2000              MOVS     r0,#0                 ;181
000012  e7fc              B        |L2.14|
;;;184    
                          ENDP

                  |L2.20|
                          DCD      0x40012000

                          AREA ||i.bsp_IsCharging||, CODE, READONLY, ALIGN=2

                  bsp_IsCharging PROC
;;;152    */
;;;153    bool bsp_IsCharging(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_IS_CHARGING,GPIO_PIN_CHARGE_IS_CHARGING)==0)
000002  2101              MOVS     r1,#1
000004  4803              LDR      r0,|L3.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b908              CBNZ     r0,|L3.16|
;;;156    	{
;;;157    		return true ;
00000c  2001              MOVS     r0,#1
                  |L3.14|
;;;158    	}
;;;159    	else
;;;160    	{
;;;161    		return false ;
;;;162    	}
;;;163    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  2000              MOVS     r0,#0                 ;161
000012  e7fc              B        |L3.14|
;;;164    
                          ENDP

                  |L3.20|
                          DCD      0x40012000

                          AREA ||i.bsp_IsTouchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_IsTouchChargePile PROC
;;;131    */
;;;132    bool bsp_IsTouchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;133    {
;;;134    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_TOUCH_PILE,GPIO_PIN_CHARGE_TOUCH_PILE))
000002  2180              MOVS     r1,#0x80
000004  4803              LDR      r0,|L4.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b108              CBZ      r0,|L4.16|
;;;135    	{
;;;136    		return true ;
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		return false ;
;;;141    	}
;;;142    }
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  2000              MOVS     r0,#0                 ;140
000012  e7fc              B        |L4.14|
;;;143    
                          ENDP

                  |L4.20|
                          DCD      0x40011c00

                          AREA ||i.bsp_SearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_SearchChargePile PROC
;;;77     */
;;;78     void bsp_SearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;79     {
;;;80     	if(bsp_IsTouchChargePile())
000002  f7fffffe          BL       bsp_IsTouchChargePile
000006  2800              CMP      r0,#0
000008  d035              BEQ      |L5.118|
;;;81     	{
;;;82     		/*播放开始充电*/
;;;83     		if(search.isNeedPlaySong && (bsp_GetRunTime() - search.isNeedPlaySongTick >= 1000) ) /*这个时间判断避免了抖动播放开始充电*/
00000a  4826              LDR      r0,|L5.164|
00000c  7b00              LDRB     r0,[r0,#0xc]  ; search
00000e  b188              CBZ      r0,|L5.52|
000010  f7fffffe          BL       bsp_GetRunTime
000014  4923              LDR      r1,|L5.164|
000016  6909              LDR      r1,[r1,#0x10]  ; search
000018  1a40              SUBS     r0,r0,r1
00001a  f5b07f7a          CMP      r0,#0x3e8
00001e  d309              BCC      |L5.52|
;;;84     		{
;;;85     			search.isNeedPlaySongTick = UINT32_T_MAX; /*给个最大时间刻度，下次自然不会满足*/
000020  f04f30ff          MOV      r0,#0xffffffff
000024  491f              LDR      r1,|L5.164|
000026  6108              STR      r0,[r1,#0x10]  ; search
;;;86     			bsp_SperkerPlay(Song22);
000028  2019              MOVS     r0,#0x19
00002a  f7fffffe          BL       bsp_SperkerPlay
;;;87     			search.isNeedPlaySong = false;
00002e  2000              MOVS     r0,#0
000030  491c              LDR      r1,|L5.164|
000032  7308              STRB     r0,[r1,#0xc]
                  |L5.52|
;;;88     		}
;;;89     
;;;90     		if(bsp_IsCharging())
000034  f7fffffe          BL       bsp_IsCharging
000038  b150              CBZ      r0,|L5.80|
;;;91     		{
;;;92     			bsp_SetLedState(AT_CHARGING);
00003a  2003              MOVS     r0,#3
00003c  f7fffffe          BL       bsp_SetLedState
;;;93     			search.lastIsChargingTick = bsp_GetRunTime();
000040  f7fffffe          BL       bsp_GetRunTime
000044  4917              LDR      r1,|L5.164|
000046  6148              STR      r0,[r1,#0x14]  ; search
;;;94     			DEBUG("is charging\r\n");
000048  a017              ADR      r0,|L5.168|
00004a  f7fffffe          BL       __2printf
00004e  e00d              B        |L5.108|
                  |L5.80|
;;;95     		}
;;;96     		else
;;;97     		{
;;;98     			if(bsp_GetRunTime() - search.lastIsChargingTick >= 1000) /*这个时间判断避免了黄灯，绿灯闪烁*/
000050  f7fffffe          BL       bsp_GetRunTime
000054  4913              LDR      r1,|L5.164|
000056  6949              LDR      r1,[r1,#0x14]  ; search
000058  1a40              SUBS     r0,r0,r1
00005a  f5b07f7a          CMP      r0,#0x3e8
00005e  d302              BCC      |L5.102|
;;;99     			{
;;;100    				bsp_SetLedState(AT_CHARGE_DONE);
000060  2004              MOVS     r0,#4
000062  f7fffffe          BL       bsp_SetLedState
                  |L5.102|
;;;101    			}
;;;102    
;;;103    			DEBUG("charge done\r\n");
000066  a014              ADR      r0,|L5.184|
000068  f7fffffe          BL       __2printf
                  |L5.108|
;;;104    		}
;;;105    		
;;;106    		search.lastIsTouchTick = bsp_GetRunTime();
00006c  f7fffffe          BL       bsp_GetRunTime
000070  490c              LDR      r1,|L5.164|
000072  6188              STR      r0,[r1,#0x18]  ; search
000074  e015              B        |L5.162|
                  |L5.118|
;;;107    	}
;;;108    	else /*离桩状态需要立马更改，但是灯需要等会儿处理，不然会抖动*/
;;;109    	{
;;;110    		search.isNeedPlaySong = true;
000076  2001              MOVS     r0,#1
000078  490a              LDR      r1,|L5.164|
00007a  7308              STRB     r0,[r1,#0xc]
;;;111    		search.isNeedPlaySongTick = bsp_GetRunTime();
00007c  f7fffffe          BL       bsp_GetRunTime
000080  4908              LDR      r1,|L5.164|
000082  6108              STR      r0,[r1,#0x10]  ; search
;;;112    		
;;;113    		if(bsp_GetRunTime() - search.lastIsTouchTick >= 500)
000084  f7fffffe          BL       bsp_GetRunTime
000088  4906              LDR      r1,|L5.164|
00008a  6989              LDR      r1,[r1,#0x18]  ; search
00008c  1a40              SUBS     r0,r0,r1
00008e  f5b07ffa          CMP      r0,#0x1f4
000092  d306              BCC      |L5.162|
;;;114    		{
;;;115    			bsp_SetLedState(THREE_WHITE_ON);
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       bsp_SetLedState
;;;116    			
;;;117    			 search.lastIsTouchTick = UINT32_T_MAX;
00009a  f04f30ff          MOV      r0,#0xffffffff
00009e  4901              LDR      r1,|L5.164|
0000a0  6188              STR      r0,[r1,#0x18]  ; search
                  |L5.162|
;;;118    		}
;;;119    		
;;;120    	}
;;;121    }
0000a2  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  |L5.164|
                          DCD      search
                  |L5.168|
0000a8  69732063          DCB      "is charging\r\n",0
0000ac  68617267
0000b0  696e670d
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L5.184|
0000b8  63686172          DCB      "charge done\r\n",0
0000bc  67652064
0000c0  6f6e650d
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.bsp_StartSearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_StartSearchChargePile PROC
;;;40     */
;;;41     void bsp_StartSearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43     	bsp_IRD_StartWork();
000002  f7fffffe          BL       bsp_IRD_StartWork
;;;44     	
;;;45     	search.action = 0 ;
000006  2000              MOVS     r0,#0
000008  4902              LDR      r1,|L6.20|
00000a  6048              STR      r0,[r1,#4]  ; search
;;;46     	search.delay = 0 ;
00000c  6088              STR      r0,[r1,#8]  ; search
;;;47     	search.isRunning = true;
00000e  2001              MOVS     r0,#1
000010  7008              STRB     r0,[r1,#0]
;;;48     	
;;;49     	
;;;50     }
000012  bd10              POP      {r4,pc}
;;;51     
                          ENDP

                  |L6.20|
                          DCD      search

                          AREA ||i.bsp_StopSearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_StopSearchChargePile PROC
;;;59     */
;;;60     void bsp_StopSearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;61     {
;;;62     	search.isRunning = false;
000002  2000              MOVS     r0,#0
000004  4903              LDR      r1,|L7.20|
000006  7008              STRB     r0,[r1,#0]
;;;63     	search.action = 0 ;
000008  6048              STR      r0,[r1,#4]  ; search
;;;64     	search.delay = 0 ;
00000a  6088              STR      r0,[r1,#8]  ; search
;;;65     	
;;;66     	bsp_IRD_StopWork();
00000c  f7fffffe          BL       bsp_IRD_StopWork
;;;67     }	
000010  bd10              POP      {r4,pc}
;;;68     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      search

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  search
                          %        28

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_SearchChargePile.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_bsp_SearchChargePile_c_314032fe____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_bsp_SearchChargePile_c_314032fe____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_bsp_SearchChargePile_c_314032fe____REVSH|
#line 128
|__asm___22_bsp_SearchChargePile_c_314032fe____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
