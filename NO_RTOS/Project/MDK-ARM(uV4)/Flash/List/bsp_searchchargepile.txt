; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_searchchargepile.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_searchchargepile.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\..\User\angle\gan_rui_Angle -I..\..\User\angle\yuan_zi_Angle -I..\..\User\dx8\inc -IF:\LuckyXRQ\CleanCar\NO_RTOS\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_searchchargepile.crf ..\..\User\app\src\bsp_SearchChargePile.c]
                          THUMB

                          AREA ||i.bsp_InitChargeIO||, CODE, READONLY, ALIGN=2

                  bsp_InitChargeIO PROC
;;;173    */
;;;174    void bsp_InitChargeIO(void)
000000  b508              PUSH     {r3,lr}
;;;175    {
;;;176    	GPIO_InitTypeDef GPIO_InitStructure;
;;;177    
;;;178    	/* 打开GPIO时钟 */
;;;179    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
000002  2101              MOVS     r1,#1
000004  2080              MOVS     r0,#0x80
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;180    
;;;181    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;182    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;183    	
;;;184    	/*上桩检测*/
;;;185    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_TOUCH_PILE;
000016  2080              MOVS     r0,#0x80
000018  f8ad0000          STRH     r0,[sp,#0]
;;;186    	GPIO_Init(GPIO_PORT_CHARGE_TOUCH_PILE, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4809              LDR      r0,|L1.68|
000020  f7fffffe          BL       GPIO_Init
;;;187    	
;;;188    	/*正在充电中*/
;;;189    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_IS_CHARGING;
000024  2001              MOVS     r0,#1
000026  f8ad0000          STRH     r0,[sp,#0]
;;;190    	GPIO_Init(GPIO_PORT_CHARGE_IS_CHARGING, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4806              LDR      r0,|L1.72|
00002e  f7fffffe          BL       GPIO_Init
;;;191    	
;;;192    	/*充电完成*/
;;;193    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_CHARGE_IS_DONE;
000032  2002              MOVS     r0,#2
000034  f8ad0000          STRH     r0,[sp,#0]
;;;194    	GPIO_Init(GPIO_PORT_CHARGE_IS_DONE, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4803              LDR      r0,|L1.72|
00003c  f7fffffe          BL       GPIO_Init
;;;195    	
;;;196    }
000040  bd08              POP      {r3,pc}
;;;197    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40011c00
                  |L1.72|
                          DCD      0x40012000

                          AREA ||i.bsp_IsChargeDone||, CODE, READONLY, ALIGN=2

                  bsp_IsChargeDone PROC
;;;153    */
;;;154    bool bsp_IsChargeDone(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_IS_DONE,GPIO_PIN_CHARGE_IS_DONE)==0)
000002  2102              MOVS     r1,#2
000004  4803              LDR      r0,|L2.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b908              CBNZ     r0,|L2.16|
;;;157    	{
;;;158    		return true ;
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;159    	}
;;;160    	else
;;;161    	{
;;;162    		return false ;
;;;163    	}
;;;164    }
00000e  bd10              POP      {r4,pc}
                  |L2.16|
000010  2000              MOVS     r0,#0                 ;162
000012  e7fc              B        |L2.14|
;;;165    
                          ENDP

                  |L2.20|
                          DCD      0x40012000

                          AREA ||i.bsp_IsCharging||, CODE, READONLY, ALIGN=2

                  bsp_IsCharging PROC
;;;133    */
;;;134    bool bsp_IsCharging(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_IS_CHARGING,GPIO_PIN_CHARGE_IS_CHARGING)==0)
000002  2101              MOVS     r1,#1
000004  4803              LDR      r0,|L3.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b908              CBNZ     r0,|L3.16|
;;;137    	{
;;;138    		return true ;
00000c  2001              MOVS     r0,#1
                  |L3.14|
;;;139    	}
;;;140    	else
;;;141    	{
;;;142    		return false ;
;;;143    	}
;;;144    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  2000              MOVS     r0,#0                 ;142
000012  e7fc              B        |L3.14|
;;;145    
                          ENDP

                  |L3.20|
                          DCD      0x40012000

                          AREA ||i.bsp_IsTouchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_IsTouchChargePile PROC
;;;112    */
;;;113    bool bsp_IsTouchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115    	if(GPIO_ReadInputDataBit(GPIO_PORT_CHARGE_TOUCH_PILE,GPIO_PIN_CHARGE_TOUCH_PILE))
000002  2180              MOVS     r1,#0x80
000004  4803              LDR      r0,|L4.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b108              CBZ      r0,|L4.16|
;;;116    	{
;;;117    		return true ;
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;118    	}
;;;119    	else
;;;120    	{
;;;121    		return false ;
;;;122    	}
;;;123    }
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  2000              MOVS     r0,#0                 ;121
000012  e7fc              B        |L4.14|
;;;124    
                          ENDP

                  |L4.20|
                          DCD      0x40011c00

                          AREA ||i.bsp_SearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_SearchChargePile PROC
;;;73     */
;;;74     void bsp_SearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	if(bsp_IsTouchChargePile())
000002  f7fffffe          BL       bsp_IsTouchChargePile
000006  b1d0              CBZ      r0,|L5.62|
;;;77     	{
;;;78     		/*播放开始充电*/
;;;79     		//bsp_SperkerPlay(Song22);
;;;80     		if(bsp_IsCharging())
000008  f7fffffe          BL       bsp_IsCharging
00000c  b158              CBZ      r0,|L5.38|
;;;81     		{
;;;82     			bsp_SetLedState(LED_DEFAULT_STATE);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       bsp_SetLedState
;;;83     			bsp_CloseAllLed();
000014  f7fffffe          BL       bsp_CloseAllLed
;;;84     			bsp_LedOn(LED_COLOR_YELLOW);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       bsp_LedOn
;;;85     			
;;;86     			DEBUG("is charging\r\n");
00001e  a00b              ADR      r0,|L5.76|
000020  f7fffffe          BL       __2printf
000024  e011              B        |L5.74|
                  |L5.38|
;;;87     		}
;;;88     		else
;;;89     		{
;;;90     			bsp_SetLedState(LED_DEFAULT_STATE);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       bsp_SetLedState
;;;91     			bsp_CloseAllLed();
00002c  f7fffffe          BL       bsp_CloseAllLed
;;;92     			bsp_LedOn(LED_COLOR_GREEN);
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       bsp_LedOn
;;;93     			
;;;94     			DEBUG("charge done\r\n");
000036  a009              ADR      r0,|L5.92|
000038  f7fffffe          BL       __2printf
00003c  e005              B        |L5.74|
                  |L5.62|
;;;95     		}
;;;96     	}
;;;97     	else
;;;98     	{
;;;99     		bsp_LedOff(LED_COLOR_YELLOW);
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       bsp_LedOff
;;;100    		bsp_LedOff(LED_COLOR_GREEN);
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       bsp_LedOff
                  |L5.74|
;;;101    	}
;;;102    }
00004a  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L5.76|
00004c  69732063          DCB      "is charging\r\n",0
000050  68617267
000054  696e670d
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0
                  |L5.92|
00005c  63686172          DCB      "charge done\r\n",0
000060  67652064
000064  6f6e650d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.bsp_StartSearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_StartSearchChargePile PROC
;;;36     */
;;;37     void bsp_StartSearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;38     {
;;;39     	bsp_IRD_StartWork();
000002  f7fffffe          BL       bsp_IRD_StartWork
;;;40     	
;;;41     	search.action = 0 ;
000006  2000              MOVS     r0,#0
000008  4902              LDR      r1,|L6.20|
00000a  6048              STR      r0,[r1,#4]  ; search
;;;42     	search.delay = 0 ;
00000c  6088              STR      r0,[r1,#8]  ; search
;;;43     	search.isRunning = true;
00000e  2001              MOVS     r0,#1
000010  7008              STRB     r0,[r1,#0]
;;;44     	
;;;45     	
;;;46     }
000012  bd10              POP      {r4,pc}
;;;47     
                          ENDP

                  |L6.20|
                          DCD      search

                          AREA ||i.bsp_StopSearchChargePile||, CODE, READONLY, ALIGN=2

                  bsp_StopSearchChargePile PROC
;;;55     */
;;;56     void bsp_StopSearchChargePile(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	search.isRunning = false;
000002  2000              MOVS     r0,#0
000004  4903              LDR      r1,|L7.20|
000006  7008              STRB     r0,[r1,#0]
;;;59     	search.action = 0 ;
000008  6048              STR      r0,[r1,#4]  ; search
;;;60     	search.delay = 0 ;
00000a  6088              STR      r0,[r1,#8]  ; search
;;;61     	
;;;62     	bsp_IRD_StopWork();
00000c  f7fffffe          BL       bsp_IRD_StopWork
;;;63     }	
000010  bd10              POP      {r4,pc}
;;;64     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      search

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  search
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\bsp_SearchChargePile.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_bsp_SearchChargePile_c_314032fe____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_bsp_SearchChargePile_c_314032fe____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_bsp_SearchChargePile_c_314032fe____REVSH|
#line 128
|__asm___22_bsp_SearchChargePile_c_314032fe____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
