; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\..\User\angle\gan_rui_Angle -I..\..\User\angle\yuan_zi_Angle -I..\..\User\dx8\inc -IF:\LuckyXRQ\CleanCar\NO_RTOS\Project\MDK-ARM(uV4)\RTE -ID:\soft\MDK5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\soft\MDK5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;272    */
;;;273    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;276    }
000006  bd10              POP      {r4,pc}
;;;277    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;119    extern void bsp_RunPer10ms(void);
;;;120    void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	static uint8_t s_count = 0;
;;;123    
;;;124    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;125    	if (s_uiDelayCount > 0)
000002  4813              LDR      r0,|L2.80|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;126    	{
;;;127    		if (--s_uiDelayCount == 0)
000008  4811              LDR      r0,|L2.80|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4910              LDR      r1,|L2.80|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L2.26|
;;;128    		{
;;;129    			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  490f              LDR      r1,|L2.84|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;130    		}
;;;131    	}
;;;132    
;;;133    
;;;134    	/* 全局运行时间每1ms增1 */
;;;135    	g_iRunTime++;
00001a  480f              LDR      r0,|L2.88|
00001c  6800              LDR      r0,[r0,#0]  ; g_iRunTime
00001e  1c40              ADDS     r0,r0,#1
000020  490d              LDR      r1,|L2.88|
000022  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;136    	if (g_iRunTime == 0xFFFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000028  1c40              ADDS     r0,r0,#1
00002a  b908              CBNZ     r0,|L2.48|
;;;137    	{
;;;138    		g_iRunTime = 0;
00002c  2000              MOVS     r0,#0
00002e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.48|
;;;139    	}
;;;140    
;;;141    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000030  f7fffffe          BL       bsp_RunPer1ms
;;;142    
;;;143    	if (++s_count >= 10)
000034  4809              LDR      r0,|L2.92|
000036  7800              LDRB     r0,[r0,#0]  ; s_count
000038  1c40              ADDS     r0,r0,#1
00003a  b2c0              UXTB     r0,r0
00003c  4907              LDR      r1,|L2.92|
00003e  7008              STRB     r0,[r1,#0]
000040  280a              CMP      r0,#0xa
000042  db03              BLT      |L2.76|
;;;144    	{
;;;145    		s_count = 0;
000044  2000              MOVS     r0,#0
000046  7008              STRB     r0,[r1,#0]
;;;146    
;;;147    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000048  f7fffffe          BL       bsp_RunPer10ms
                  |L2.76|
;;;148    	}
;;;149    }
00004c  bd10              POP      {r4,pc}
;;;150    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      s_uiDelayCount
                  |L2.84|
                          DCD      s_ucTimeOutFlag
                  |L2.88|
                          DCD      g_iRunTime
                  |L2.92|
                          DCD      s_count

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;442    #ifdef USE_TIM5
;;;443    void TIM5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;444    #endif
;;;445    {
;;;446        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  4821              LDR      r0,|L3.140|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L3.36|
;;;447        {
;;;448            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  481f              LDR      r0,|L3.140|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;449            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  481c              LDR      r0,|L3.140|
00001a  f7fffffe          BL       TIM_ITConfig
;;;450    
;;;451            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;452            s_TIM_CallBack1();
00001e  481c              LDR      r0,|L3.144|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L3.36|
;;;453        }
;;;454    
;;;455        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  4819              LDR      r0,|L3.140|
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L3.70|
;;;456        {
;;;457            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  4816              LDR      r0,|L3.140|
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;458            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  4814              LDR      r0,|L3.140|
00003c  f7fffffe          BL       TIM_ITConfig
;;;459    
;;;460            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;461            s_TIM_CallBack2();
000040  4814              LDR      r0,|L3.148|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L3.70|
;;;462        }
;;;463    
;;;464        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  4810              LDR      r0,|L3.140|
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L3.104|
;;;465        {
;;;466            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  480e              LDR      r0,|L3.140|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;467            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  480b              LDR      r0,|L3.140|
00005e  f7fffffe          BL       TIM_ITConfig
;;;468    
;;;469            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;470            s_TIM_CallBack3();
000062  480d              LDR      r0,|L3.152|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L3.104|
;;;471        }
;;;472    
;;;473        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  4808              LDR      r0,|L3.140|
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L3.138|
;;;474        {
;;;475            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  4805              LDR      r0,|L3.140|
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;476            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  4803              LDR      r0,|L3.140|
000080  f7fffffe          BL       TIM_ITConfig
;;;477    
;;;478            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;479            s_TIM_CallBack4();
000084  4805              LDR      r0,|L3.156|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L3.138|
;;;480        }
;;;481    }
00008a  bd10              POP      {r4,pc}
;;;482    
                          ENDP

                  |L3.140|
                          DCD      0x40000c00
                  |L3.144|
                          DCD      s_TIM_CallBack1
                  |L3.148|
                          DCD      s_TIM_CallBack2
                  |L3.152|
                          DCD      s_TIM_CallBack3
                  |L3.156|
                          DCD      s_TIM_CallBack4

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;158    */
;;;159    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161    	if (n == 0)
000004  b904              CBNZ     r4,|L5.8|
                  |L5.6|
;;;162    	{
;;;163    		return;
;;;164    	}
;;;165    	else if (n == 1)
;;;166    	{
;;;167    		n = 2;
;;;168    	}
;;;169    
;;;170    	DISABLE_INT();  			/* 关中断 */
;;;171    
;;;172    	s_uiDelayCount = n;
;;;173    	s_ucTimeOutFlag = 0;
;;;174    
;;;175    	ENABLE_INT();  				/* 开中断 */
;;;176    
;;;177    	while (1)
;;;178    	{
;;;179    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;180    
;;;181    		/*
;;;182    			等待延迟时间到
;;;183    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;184    		*/
;;;185    		if (s_ucTimeOutFlag == 1)
;;;186    		{
;;;187    			break;
;;;188    		}
;;;189    	}
;;;190    }
000006  bd10              POP      {r4,pc}
                  |L5.8|
000008  2c01              CMP      r4,#1                 ;165
00000a  d100              BNE      |L5.14|
00000c  2402              MOVS     r4,#2                 ;167
                  |L5.14|
00000e  2001              MOVS     r0,#1                 ;170
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L5.60|
000016  6004              STR      r4,[r0,#0]            ;172  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;173
00001a  4909              LDR      r1,|L5.64|
00001c  7008              STRB     r0,[r1,#0]            ;173
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L5.50|
                  |L5.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L5.64|
00002a  7800              LDRB     r0,[r0,#0]            ;185  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;185
00002e  d100              BNE      |L5.50|
000030  e000              B        |L5.52|
                  |L5.50|
000032  e7f7              B        |L5.36|
                  |L5.52|
000034  bf00              NOP                            ;187
000036  bf00              NOP      
000038  e7e5              B        |L5.6|
;;;191    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      s_uiDelayCount
                  |L5.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;199    */
;;;200    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;201    {
000002  4603              MOV      r3,r0
;;;202        uint32_t ticks;
;;;203        uint32_t told;
;;;204        uint32_t tnow;
;;;205        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;206        uint32_t reload;
;;;207           
;;;208    	reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;209        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L6.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L6.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;210        
;;;211        tcnt = 0;
00001a  bf00              NOP      
;;;212        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;213    
;;;214        while (1)
000022  e010              B        |L6.70|
                  |L6.36|
;;;215        {
;;;216            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;217            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L6.70|
;;;218            {    
;;;219                /* SYSTICK是一个递减的计数器 */    
;;;220                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L6.56|
;;;221                {
;;;222                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L6.62|
                  |L6.56|
;;;223                }
;;;224                /* 重新装载递减 */
;;;225                else
;;;226                {
;;;227                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L6.62|
;;;228                }        
;;;229                told = tnow;
00003e  4601              MOV      r1,r0
;;;230    
;;;231                /* 时间超过/等于要延迟的时间,则退出 */
;;;232                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L6.70|
;;;233                {
;;;234                	break;
000044  e000              B        |L6.72|
                  |L6.70|
000046  e7ed              B        |L6.36|
                  |L6.72|
000048  bf00              NOP      
;;;235                }
;;;236            }  
;;;237        }
;;;238    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;239    
                          ENDP

                  |L6.76|
                          DCD      SystemCoreClock
                  |L6.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;249    */
;;;250    uint32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252    	uint32_t runtime;
;;;253    
;;;254    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;255    
;;;256    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L7.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;257    
;;;258    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;259    
;;;260    	return runtime;
000012  4620              MOV      r0,r4
;;;261    }
000014  bd10              POP      {r4,pc}
;;;262    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;287    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;288    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;289    {
;;;290    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;291    	uint32_t usPeriod;
;;;292    	uint16_t usPrescaler;
;;;293    	uint32_t uiTIMxCLK;
;;;294    
;;;295      	/* 使能TIM时钟 */
;;;296    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;297    
;;;298        /*-----------------------------------------------------------------------
;;;299    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;300    
;;;301    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;302    		PCLK2 = HCLK / 2      (APB2Periph)
;;;303    		PCLK1 = HCLK / 4      (APB1Periph)
;;;304    
;;;305    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;306    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;307    
;;;308    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;309    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;310    
;;;311    	----------------------------------------------------------------------- */
;;;312    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L8.96|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;313    
;;;314    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4814              LDR      r0,|L8.100|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;315    	
;;;316    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;317    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;318    	usPeriod = 0xFFFF;	/* 103支持16位 */
000018  f64f74ff          MOV      r4,#0xffff
;;;319    #else
;;;320    	usPeriod = 0xFFFF;
;;;321    #endif
;;;322    	/* Time base configuration */
;;;323    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  f8ad4008          STRH     r4,[sp,#8]
;;;324    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
000020  f8ad5004          STRH     r5,[sp,#4]
;;;325    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000024  2000              MOVS     r0,#0
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;326    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00002a  f8ad0006          STRH     r0,[sp,#6]
;;;327    
;;;328    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002e  a901              ADD      r1,sp,#4
000030  480d              LDR      r0,|L8.104|
000032  f7fffffe          BL       TIM_TimeBaseInit
;;;329    
;;;330    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;331    
;;;332    	/* TIMx enable counter */
;;;333    	TIM_Cmd(TIM_HARD, ENABLE);
000036  2101              MOVS     r1,#1
000038  480b              LDR      r0,|L8.104|
00003a  f7fffffe          BL       TIM_Cmd
;;;334    
;;;335    	/* 配置TIM定时中断 (Update) */
;;;336    	{
;;;337    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;338    
;;;339    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
00003e  2032              MOVS     r0,#0x32
000040  f88d0000          STRB     r0,[sp,#0]
;;;340    
;;;341    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000044  2004              MOVS     r0,#4
000046  f88d0001          STRB     r0,[sp,#1]
;;;342    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004a  2000              MOVS     r0,#0
00004c  f88d0002          STRB     r0,[sp,#2]
;;;343    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000050  2001              MOVS     r0,#1
000052  f88d0003          STRB     r0,[sp,#3]
;;;344    		NVIC_Init(&NVIC_InitStructure);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       NVIC_Init
;;;345    	}
;;;346    }
00005c  bd7f              POP      {r0-r6,pc}
;;;347    
                          ENDP

00005e  0000              DCW      0x0000
                  |L8.96|
                          DCD      SystemCoreClock
                  |L8.100|
                          DCD      0x000f4240
                  |L8.104|
                          DCD      0x40000c00

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;88     */
;;;89     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
;;;91     	/*
;;;92     		配置systic中断周期为1ms，并启动systick中断。
;;;93     
;;;94         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;95     
;;;96         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;97     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;98     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;99     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;100    
;;;101        	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;102        */
;;;103    	SysTick_Config(SystemCoreClock / 1000);
000002  4815              LDR      r0,|L9.88|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  f44f727a          MOV      r2,#0x3e8
00000a  fbb0f1f2          UDIV     r1,r0,r2
00000e  f1b17f80          CMP      r1,#0x1000000
000012  d300              BCC      |L9.22|
000014  e01d              B        |L9.82|
                  |L9.22|
000016  f021407f          BIC      r0,r1,#0xff000000
00001a  1e40              SUBS     r0,r0,#1
00001c  f04f22e0          MOV      r2,#0xe000e000
000020  6150              STR      r0,[r2,#0x14]
000022  1750              ASRS     r0,r2,#29
000024  220f              MOVS     r2,#0xf
000026  2800              CMP      r0,#0
000028  da07              BGE      |L9.58|
00002a  0713              LSLS     r3,r2,#28
00002c  0e1d              LSRS     r5,r3,#24
00002e  4b0b              LDR      r3,|L9.92|
000030  f000040f          AND      r4,r0,#0xf
000034  1f24              SUBS     r4,r4,#4
000036  551d              STRB     r5,[r3,r4]
000038  e003              B        |L9.66|
                  |L9.58|
00003a  0713              LSLS     r3,r2,#28
00003c  0e1c              LSRS     r4,r3,#24
00003e  4b08              LDR      r3,|L9.96|
000040  541c              STRB     r4,[r3,r0]
                  |L9.66|
000042  bf00              NOP      
000044  2000              MOVS     r0,#0
000046  f04f22e0          MOV      r2,#0xe000e000
00004a  6190              STR      r0,[r2,#0x18]
00004c  2007              MOVS     r0,#7
00004e  6110              STR      r0,[r2,#0x10]
000050  bf00              NOP      
                  |L9.82|
;;;104    	
;;;105    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;106    	bsp_InitHardTimer();
000052  f7fffffe          BL       bsp_InitHardTimer
;;;107    #endif
;;;108    }
000056  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP

                  |L9.88|
                          DCD      SystemCoreClock
                  |L9.92|
                          DCD      0xe000ed18
                  |L9.96|
                          DCD      0xe000e400

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;360    */
;;;361    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;362    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;363        uint32_t cnt_now;
;;;364        uint32_t cnt_tar;
;;;365    
;;;366        /*
;;;367            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;368            bsp_StartTimer2(3, 500, (void *)test1);
;;;369        */
;;;370        if (_uiTimeOut < 5)
00000a  2f05              CMP      r7,#5
00000c  d300              BCC      |L10.16|
;;;371        {
;;;372            ;
;;;373        }
;;;374        else
;;;375        {
;;;376            _uiTimeOut -= 5;
00000e  1f7f              SUBS     r7,r7,#5
                  |L10.16|
;;;377        }
;;;378    
;;;379        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  4828              LDR      r0,|L10.180|
000012  f7fffffe          BL       TIM_GetCounter
000016  4680              MOV      r8,r0
;;;380        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
000018  eb080607          ADD      r6,r8,r7
;;;381        if (_CC == 1)
00001c  2c01              CMP      r4,#1
00001e  d10f              BNE      |L10.64|
;;;382        {
;;;383            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000020  4825              LDR      r0,|L10.184|
000022  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;384    
;;;385            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000024  b2b1              UXTH     r1,r6
000026  4823              LDR      r0,|L10.180|
000028  f7fffffe          BL       TIM_SetCompare1
;;;386            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002c  2102              MOVS     r1,#2
00002e  4821              LDR      r0,|L10.180|
000030  f7fffffe          BL       TIM_ClearITPendingBit
;;;387    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000034  2201              MOVS     r2,#1
000036  2102              MOVS     r1,#2
000038  481e              LDR      r0,|L10.180|
00003a  f7fffffe          BL       TIM_ITConfig
00003e  e037              B        |L10.176|
                  |L10.64|
;;;388    
;;;389        }
;;;390        else if (_CC == 2)
000040  2c02              CMP      r4,#2
000042  d10f              BNE      |L10.100|
;;;391        {
;;;392    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000044  481d              LDR      r0,|L10.188|
000046  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;393    
;;;394            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
000048  b2b1              UXTH     r1,r6
00004a  481a              LDR      r0,|L10.180|
00004c  f7fffffe          BL       TIM_SetCompare2
;;;395    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000050  2104              MOVS     r1,#4
000052  4818              LDR      r0,|L10.180|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;396    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
000058  2201              MOVS     r2,#1
00005a  2104              MOVS     r1,#4
00005c  4815              LDR      r0,|L10.180|
00005e  f7fffffe          BL       TIM_ITConfig
000062  e025              B        |L10.176|
                  |L10.100|
;;;397        }
;;;398        else if (_CC == 3)
000064  2c03              CMP      r4,#3
000066  d10f              BNE      |L10.136|
;;;399        {
;;;400            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
000068  4815              LDR      r0,|L10.192|
00006a  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;401    
;;;402            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006c  b2b1              UXTH     r1,r6
00006e  4811              LDR      r0,|L10.180|
000070  f7fffffe          BL       TIM_SetCompare3
;;;403            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000074  2108              MOVS     r1,#8
000076  480f              LDR      r0,|L10.180|
000078  f7fffffe          BL       TIM_ClearITPendingBit
;;;404    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
00007c  2201              MOVS     r2,#1
00007e  2108              MOVS     r1,#8
000080  480c              LDR      r0,|L10.180|
000082  f7fffffe          BL       TIM_ITConfig
000086  e013              B        |L10.176|
                  |L10.136|
;;;405        }
;;;406        else if (_CC == 4)
000088  2c04              CMP      r4,#4
00008a  d10f              BNE      |L10.172|
;;;407        {
;;;408            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
00008c  480d              LDR      r0,|L10.196|
00008e  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;409    
;;;410            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000090  b2b1              UXTH     r1,r6
000092  4808              LDR      r0,|L10.180|
000094  f7fffffe          BL       TIM_SetCompare4
;;;411    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000098  2110              MOVS     r1,#0x10
00009a  4806              LDR      r0,|L10.180|
00009c  f7fffffe          BL       TIM_ClearITPendingBit
;;;412    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a0  2201              MOVS     r2,#1
0000a2  2110              MOVS     r1,#0x10
0000a4  4803              LDR      r0,|L10.180|
0000a6  f7fffffe          BL       TIM_ITConfig
0000aa  e001              B        |L10.176|
                  |L10.172|
;;;413        }
;;;414    	else
;;;415        {
;;;416            return;
;;;417        }
;;;418    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
                  |L10.176|
0000b0  bf00              NOP      
0000b2  e7fb              B        |L10.172|
;;;419    #endif
                          ENDP

                  |L10.180|
                          DCD      0x40000c00
                  |L10.184|
                          DCD      s_TIM_CallBack1
                  |L10.188|
                          DCD      s_TIM_CallBack2
                  |L10.192|
                          DCD      s_TIM_CallBack3
                  |L10.196|
                          DCD      s_TIM_CallBack4

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000
                  s_count
00001c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 128
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
